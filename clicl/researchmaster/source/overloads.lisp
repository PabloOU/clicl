(defun head (p)
  (cond ((atom p) p)
        ((eq 'and (car p)) (cadr p))
        ((eq '<= (car p)) (cadr p))
        ((eq '=> (car p)) (car (last p)))
        ((eq '<=> (car p)) (second p))
        (t p)))

#|
(defun nonviewp (x )
  (cond ((find x '(plus minus pos neg error trigger)) nil)
        ((extensionalp x) t)
        (t (not (fullviewp x *library*)))))
|#

(defun nonview-sourcep (x source)
  (cond ((find x '(plus minus pos neg error trigger)) nil)
        ((findp `(extension ,(name source) ,x) *manager*) t)
        (t (not (fullviewp x source)))))

; sort by prettyname, not object name
(defun findalternatives (slot)
  (let (class options)
    (cond ((results 'option slot *interface*))
          ((and (setq class (find-range slot))
                (setq options (request `(ask-all ?x ,(makpred '?x class *gui*))
                                       *client* *gui*)))
           (setq options (mapcar #'(lambda (x) (cons (prettyname x) x)) options))
	   (mapcar #'cdr (sort options #'lessp :key #'car))))))


(defun outputclassookif (f class source)
  (let (predicate slots maxlen (*print-case* :downcase))
    (formatn f ";;;;;;;;;;;;;;;;" 5) (terpri f)
    (format f ";;; ~A" class) (terpri f)
    (formatn f ";;;;;;;;;;;;;;;;" 5) (terpri f)
    (setq predicate (find-predicate class))
    (setq slots (remove-if-not #'(lambda (x) (nonview-sourcep x source)) (attributes class)))
    (setq maxlen (maxlength (cons predicate slots)))
    (dolist (obj (get-instances class source))
      (terpri f)
      (princ "    (" f)
      (prin1 predicate f)
      (princ " " f) (formatn f " " (- maxlen (length (symbol-name predicate))))
      (prin1 obj f)
      (princ ")" f)
      (terpri f)
      (dolist (slot slots)
        (dolist (val (asks '?y (list slot obj '?y) nil source))
          (princ "    (" f)
          (prin1 slot f)
          (princ " " f) (formatn f " " (- maxlen (length (symbol-name slot))))
          (prin1 obj f)
          (princ " " f)
          (prin1 val f)
          (princ ")" f)
          (terpri f))))
    (terpri f)
    'done))

