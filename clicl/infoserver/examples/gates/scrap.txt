
    (person.instance    nil)
    (person.firstname   nil "Shankar")
    (person.firstname   nil "Yashar")
    (person.firstname   nil "Jean")
    (person.firstname   nil "Augusto")
    (person.firstname   nil "Dongwhi")
    (person.firstname   nil "Sungroh")
    (person.firstname   nil "Zhang")
    (person.firstname   nil "Chaiyasit")
    (person.firstname   nil "Aikaterini")
    (person.firstname   nil "Samuel")
    (person.lastname    nil "Agarwal")
    (person.lastname    nil "Ganjali")
    (person.lastname    nil "Suh")
    (person.lastname    nil "Roman")
    (person.lastname    nil "Lee")
    (person.lastname    nil "Yoon")
    (person.lastname    nil "Ting")
    (person.lastname    nil "Manovit")
    (person.lastname    nil "Argyraki")
    (person.lastname    nil "Palermo")
    (person.fullname    nil "Shankar Agarwal")
    (person.fullname    nil "Yashar Ganjali")
    (person.fullname    nil "Jean Suh")
    (person.fullname    nil "Augusto Roman")
    (person.fullname    nil "Dongwhi Lee")
    (person.fullname    nil "Sungroh Yoon")
    (person.fullname    nil "Zhang Ting")
    (person.fullname    nil "Chaiyasit Mnaovit")
    (person.fullname    nil "Chaiyasit Manovit")
    (person.fullname    nil "Aikaterini Argyraki")
    (person.fullname    nil "Samuel Palermo")
    (person.status      nil alumnus)
    (person.status      nil student)
    (person.office      nil gates-328)
    (person.office      nil gates-509)
    (person.office      nil gates-441)
    (person.telephone   nil "3-9369")
    (person.telephone   nil "650-725-3650")
    (person.telephone   nil "5-0413")
    (person.id          nil 10436)
    (person.id          nil 10558)
    (person.id          nil 10910)
    (person.id          nil 10929)
    (person.id          nil 10968)
    (person.id          nil 11194)
    (person.id          nil 8908)
    (person.id          nil 9611)
    (person.id          nil 9916)
    (person.id          nil 9957)
(EVENT.OWNER EVENT.3338992189.10 NIL)
(EVENT.OWNER EVENT.3338992189.11 NIL)
(EVENT.OWNER EVENT.3338992189.12 NIL)
(EVENT.OWNER EVENT.3338992189.13 NIL)
(EVENT.OWNER EVENT.3338992189.14 NIL)
(EVENT.OWNER EVENT.3338992189.15 NIL)
(EVENT.OWNER EVENT.3338992189.16 NIL)
(EVENT.OWNER EVENT.3338992189.4 NIL)
(EVENT.OWNER EVENT.3338992189.5 NIL)
(EVENT.OWNER EVENT.3338992189.6 NIL)
(EVENT.OWNER EVENT.3338992189.7 NIL)
(EVENT.OWNER EVENT.3338992189.8 NIL)
(EVENT.OWNER EVENT.3338992189.9 NIL)
(EVENT.OWNER EVENT.3341795338.1 NIL)
(EVENT.OWNER EVENT.3341795338.10 NIL)
(EVENT.OWNER EVENT.3341795338.11 NIL)
(EVENT.OWNER EVENT.3341795338.12 NIL)
(EVENT.OWNER EVENT.3341795338.13 NIL)
(EVENT.OWNER EVENT.3341795338.14 NIL)
(EVENT.OWNER EVENT.3341795338.15 NIL)
(EVENT.OWNER EVENT.3341795338.16 NIL)
(EVENT.OWNER EVENT.3341795338.17 NIL)
(EVENT.OWNER EVENT.3341795338.18 NIL)
(EVENT.OWNER EVENT.3341795338.2 NIL)
(EVENT.OWNER EVENT.3341795338.3 NIL)
(EVENT.OWNER EVENT.3341795338.4 NIL)
(EVENT.OWNER EVENT.3341795338.5 NIL)
(EVENT.OWNER EVENT.3341795338.6 NIL)
(EVENT.OWNER EVENT.3341795338.7 NIL)
(EVENT.OWNER EVENT.3341795338.8 NIL)
(EVENT.OWNER EVENT.3341795338.9 NIL)
(EVENT.OWNER EVENT.3345907725 NIL)
(EVENT.OWNER EVENT.3346533977 NIL)
(EVENT.OWNER EVENT.3346617576 NIL)
(EVENT.OWNER EVENT.3349117728 NIL)
(EVENT.OWNER EVENT.3350942229 NIL)
(EVENT.OWNER EVENT.3351456799 NIL)
(EVENT.OWNER EVENT.3351909807 NIL)
(EVENT.OWNER EVENT.3353200476 NIL)
(EVENT.OWNER EVENT.3354705488 NIL)
(EVENT.OWNER EVENT.3354772093 NIL)
(EVENT.OWNER EVENT.3354921849 NIL)
(EVENT.OWNER EVENT.3355604095 NIL)
(EVENT.OWNER EVENT.3357092625 NIL)
(EVENT.OWNER EVENT.3357499982 NIL)
(EVENT.OWNER EVENT.3358536023 NIL)
(EVENT.OWNER EVENT.3358619385 NIL)
(EVENT.OWNER EVENT.3360603901 NIL)
(EVENT.OWNER EVENT.3361719647 NIL)
(EVENT.OWNER EVENT.3364166314 NIL)
(EVENT.OWNER EVENT.3368890997 NIL)
(EVENT.OWNER EVENT.3368998042 NIL)
(EVENT.OWNER EVENT.3369669684 NIL)
(EVENT.OWNER EVENT.3371405248 NIL)
(EVENT.OWNER EVENT.3371916936 NIL)
(EVENT.OWNER EVENT.3372795218 NIL)
(EVENT.OWNER EVENT.3376927646 NIL)
(EVENT.OWNER EVENT.3378499324 NIL)
(EVENT.OWNER EVENT.3380481513 NIL)
(EVENT.OWNER EVENT.3382280967 NIL)
(EVENT.OWNER EVENT.3394221746 NIL)
(EVENT.OWNER EVENT.3405188974 NIL)
(EVENT.OWNER EVENT.3405437493 NIL)
(SERIES.OWNER SERIES.3338992189 NIL)
(SERIES.OWNER SERIES.3341795338 NIL)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Webauth security
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#|
(defparameter *forwarder* nil)

(defun process-http (s *remote*)
  (let (start end firstline postline command path protocol
        type contentlength dir file query
         *forwarder* (*client* *client*) (*password* *password*)
        *cookies* (*browser* 'generic) (*receiver* *agent*))
    (setq start (get-universal-time))
    (unless (setq firstline (get-http-line s))
      (format s "HTTP/1.0 400 Bad request") (crlf s)
      (return-from process-http))
    (multiple-value-setq (command path protocol) (parsefirstline firstline))
    (unless command
      (format s "HTTP/1.0 400 Bad request") (crlf s)
      (return-from process-http) )
    (cond (protocol (multiple-value-setq (type contentlength) (parse-header s)))
          (t (setq type 'x-www-form-urlencoded contentlength *max-line-size*)))
    (cond ((eq type 'acl) (acl-handler s (read-content s contentlength)))
          ((eq type 'sql) (sql-handler s (read-content s contentlength)))
          ((eq type 'soap) (soap-handler s (read-content s contentlength)))
          ((eq type 'form-data)
           (multiple-value-setq (dir file query) (parsepath path))
           (html-handler s dir file (readmultipart s contentlength) type))
          (t (multiple-value-setq (dir file query) (parsepath path))
             (if (string= command "POST")
               (setq postline (get-http-line s contentlength))
               (setq postline query))
             (html-handler s dir file postline nil)
             (when *logfile*
               (setq end (get-universal-time))
               (loghttp start end *remote* *browser* *client* firstline postline))))))

(defun parse-header (s)
  (do ((line) (pos) (type) (len *max-line-size*))
      (nil)
      (setq line (string-left-trim '(#\space #\linefeed #\return) (get-http-line s)))
      (cond ((string= line "") (return (values type len)))
            ((and (startstringp "Authorization" line)
                  (setq line (base64-to-string (subseq line 21)))
                  (setq pos (position #\: line)))
             (setq *client* (mapclient (read-user-string (subseq line 0 pos))))
             (setq *password* (subseq line (1+ pos)))
             (when (or (null *client*) (null *password*))
               (setq *client* 'anonymous *password* "anonymous")))
            ((startstringp "X-Forwarded-Host" line)
              (setq *forwarder* (subseq line 18))) 
            ((startstringp "Webauthproxy" line)
             (setq *client* (read-user-string (subseq line 14 (1- (length line)))))
             (setq *password* "webauth"))
            ((startstringp "Receiver" line)
             (setq line (subseq line 10))
	     (setq *receiver* (internalize line)))
            ((startstringp "User-Agent" line)
             (setq *browser* (subseq line 12)))
    ;        ((startstringp "Cookie" line)
    ;         (setq line (subseq line 8))
    ;         (setq *cookies* (parse-cookies line)))
            ((startstringp "Content-type" line)
             (when (setq pos (position #\/ line))
               (setq type (read-value-string (subseq line (1+ pos))))))
            ((startstringp "Content-length" line)
             (setq line (subseq line 16))
	     (when (not (find-if-not #'digit-char-p line))
	       (setq len (read-from-string line)))))))

(defun mapclient (x)
  (cond ((eq x 'anonymous) 'anonymous)
	((object 'person.csid x *repository*))
	(t x)))
|#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; pedit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (isa pedit sqlserver)
    (host pedit "arrogant.stanford.edu")
    (port pedit 4000)

    (naryrelation  people)
    (arity         people 9)
    (key           people          person_id)
    (column        people          person_id)
    (columntype    person_id       symbol)
    (column        people          nam_last)
    (column        people          nam_first_mi)
    (column        people          nam_friendly)
    (column        people          secretary_id)
    (columntype    secretary_id    symbol)
    (column        people          sponsor_id)
    (columntype    sponsor_id      symbol)
    (column        people          last_updated_on)
    (column        people          last_updated_by)
    (columntype    last_updated_by symbol)
    (column        people          homepage)

    (naryrelation  relations)
    (arity         relations 5)
    (key           relations          relation_id)
    (column        relations          relation_id)
    (columntype    relation_id        symbol)
    (column        relations          relation_name)
    (column        relations          relation_abbrev)
    (columntype    relation_abbrev    symbol)
    (column        relations          user_editable)
    (columntype    user_editable      symbol)
    (column        relations          visible_in_lookup)
    (columntype    visible_in_lookup  symbol)


    (naryrelation  relmap)
    (arity         relmap 3)
    (key           relmap          relmap_id)
    (column        relmap          relmap_id)
    (columntype    relation_id     symbol)
    (column        relmap          person_id)
    (columntype    person_id       symbol)
    (column        relmap          relation_id)
    (columntype    relation_id     symbol)
    ;;historical_lock column not included


    (naryrelation  phones)
    (arity         phones 6)
    (key           phones          phone_id)
    (column        phones          phone_id)
    (columntype    phone_id        symbol)
    (column        phones          person_id)
    (columntype    person_id       symbol)
    (column        phones          phone_number)
    (column        phones          phone_type)
    (column        phones          phone_visible)
    (columntype    phone_visible   symbol)
    (column        phones          data_source)
    (columntype    data_source     symbol)

    (naryrelation  csaliases)
    (arity         csaliases 7)
    (key           csaliases        csalias_id)
    (column        csaliases        csalias_id)
    (columntype    csalias_id       symbol)
    (column        csaliases        person_id)
    (columntype    person_id        symbol)
    (column        csaliases        cs_name)
    (columntype    cs_name          symbol)
    (column        csaliases        cs_name_mash)
    (columntype    cs_name_mash     symbol)
    (column        csaliases        user_editable)
    (columntype    user_editable    symbol)
    (column        csaliases        primary_alias)
    (columntype    primary_alias    symbol)
    (column        csaliases        alias_type)
    (columntype    alias_type       symbol)
    ;;description1 column not included
    ;;description2 column not included

    (naryrelation  offices)
    (arity         offices 5)
    (key           offices          office_id)
    (column        offices          office_id)
    (columntype    office_id        symbol)
    (column        offices          person_id)
    (columntype    person_id        symbol)
    (column        offices          building)
    (column        offices          room)
    (columntype    office_type      symbol)
    (column        offices          office_visible)
    (columntype    office_visible   symbol)


    (naryrelation  unames)
    (arity         unames 4)
    (key           unames          uname_id)
    (column        unames          person_id)
    (columntype    person_id       symbol)
    (column        unames          acct)
    (columntype    acct            symbol)
    (column        unames          uid)
    (columntype    uid             symbol)
    (column        unames          uname_id)
    (columntype    uname_id        symbol)

;;;;


    (<= (isa ?x person)
        (person.instance ?x))

    (<= (isa ?x group)
        (group.instance ?x))

    (<= (isa ?x office)
        (office.instance ?x))

    (<= (isa ?x conferenceroom)
        (conferenceroom.instance ?x))

    (<= (isa ?x event)
        (event.instance ?x))

    (<= (isa ?x series)
        (series.instance ?x))

    (<= (isa ?x boolean)
        (boolean.instance ?x))

    (<= (isa ?x feature)
        (feature.instance ?x))

    (<= (isa ?x floor)
        (floor.instance ?x))

    (<= (isa ?x status)
        (status.instance ?x))

    (<= (isa ?x time)
        (time.instance ?x))

    (<= (isa ?x weekday)
        (weekday.instance ?x))

    (<= (isa ?x date)
        (date.instance ?x))

;;;;

