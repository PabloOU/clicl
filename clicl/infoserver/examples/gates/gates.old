
(defmethod process-fastcreatepage-create (s object (class (eql 'series)) constraints)
  (let (title room days sd ed st et url errors)
    (setq title (getslotval 'series.title constraints))
    (setq room (getslotval 'series.conferenceroom constraints))
    (setq days (getslotvals 'series.day constraints))
    (setq sd (getslotval 'series.startdate constraints))
    (setq ed (getslotval 'series.enddate constraints))
    (setq st (getslotval 'series.starttime constraints))
    (setq et (getslotval 'series.endtime constraints))
    (setq url (getslotval 'series.url constraints))
    (cond ((setq errors (checkseries object title room days sd ed st et))
           (http-problems s errors))
	  (t (defineobject object class constraints *gui*)
	     (dolist (p (createevents object title room days sd ed st et *client* url))
               (insert p *repository*))
	     (output-fastcreatepage-success s object)))))

(defun checkseries (object title room days sd ed st et)
  (let (errors)
    (unless (eq (classify object *gui*) 'thing)
      (setq errors (cons "Object already exists." errors)))
    (unless title (push "No title specified." errors))
    (unless room (push "No classroom specified." errors))
    (unless days (push "No days specified." errors))
    (unless sd (push "No start date specified." errors))
    (unless ed (push "No end date specified." errors))
    (unless st (push "No start time specified." errors))
    (unless et (push "No end time specified." errors))
    (when (lessp ed sd) (push "End date before start date." errors))
    (when (lessp et st) (push "End time before start time." errors))
    (when (and room days sd ed st et)
      (setq errors (nconc errors (seriesconflicts room days sd ed st et))))
    (when errors
      (setq errors (cons "Press the Back button, correct the error(s), and resubmit." errors)))
    (nreverse errors)))

(defun seriesconflicts (room days sd ed st et)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7)) (flag) (errors))
      (flag (nreverse errors))
      (do ((i days (cdr i)) (wd date))
          ((null i))
          (setq wd (dateint-plus date (car i)))
          (cond ((dategreaterp sd wd))
                ((dategreaterp wd ed) (setq flag t) (return t))
                (t (dolist (e (findconflicts room wd st et))
                     (push (format nil "Proposed series conflicts with <a href=~A>~A</a>." e e)
                           errors)))))))

(defun createevents (series title room days sd ed st et owner url)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7))
       (seriesname (subseq (symbol-name series) 7)) (count 1) (event) 
       (flag) (data))
      (flag (nreverse data))
      (do ((i days (cdr i)) (wd date))
	  ((null i))
	  (setq wd (dateint-plus date (car i)))
	  (cond ((dategreaterp sd wd))
		((dategreaterp wd ed) (setq flag t) (return t))
		(t (setq event (intern (stringappend "EVENT." seriesname "." (princ-to-string count))))
		   (push `(event.instance ,event) data)
		   (push `(event.title ,event ,title) data)
		   (push `(event.conferenceroom ,event ,room) data)
		   (push `(event.date ,event ,wd) data)
		   (push `(event.start ,event ,st) data)
		   (push `(event.end ,event ,et) data)
		   (push `(event.owner ,event ,owner) data)
		   (when url (push `(event.url ,event ,url) data))
		   (push `(event.series ,event ,series) data)
		   (setq count (1+ count)))))))
