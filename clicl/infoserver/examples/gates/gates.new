;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; series
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process-fastcreatepage-create (s object (class (eql 'series)) constraints)
  (let (title room days sd ed st et owner url errors)
    (setq title (getslotval 'series.title constraints))
    (setq room (getslotval 'series.conferenceroom constraints))
    (setq days (getslotvals 'series.day constraints))
    (setq sd (getslotval 'series.startdate constraints))
    (setq ed (getslotval 'series.enddate constraints))
    (setq st (getslotval 'series.starttime constraints))
    (setq et (getslotval 'series.endtime constraints))
    (setq owner (getslotval 'series.owner constraints))
    (setq url (getslotval 'series.url constraints))
    (cond ((setq errors (checkseries object title room days sd ed st et))
           (http-problems s errors))
	  ((setq errors (seriesconflicts room days sd ed st et))
	   (handleconflicts s (list* object class constraints) errors))
	  (t (defineobject object class constraints *gui*)
	     (dolist (p (createevents object title room days sd ed st et owner url))
               (insert p *repository*))
	     (output-fastcreatepage-success s object)))))

(defun checkseries (object title room days sd ed st et)
  (let (errors)
    (unless (eq (classify object *gui*) 'thing)
      (setq errors (cons "Object already exists." errors)))
    (unless title (push "No title specified." errors))
    (unless room (push "No classroom specified." errors))
    (unless days (push "No days specified." errors))
    (unless sd (push "No start date specified." errors))
    (unless ed (push "No end date specified." errors))
    (unless st (push "No start time specified." errors))
    (unless et (push "No end time specified." errors))
    (when (lessp ed sd) (push "End date before start date." errors))
    (when (lessp et st) (push "End time before start time." errors))
    (when errors
      (setq errors (cons "Press the Back button, correct the error(s), and try again." errors)))
    (nreverse errors)))

(defun seriesconflicts (room days sd ed st et)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7)) (flag) (errors))
      (flag (nreverse errors))
      (do ((i days (cdr i)) (wd date))
          ((null i))
          (setq wd (dateint-plus date (car i)))
          (cond ((dategreaterp sd wd))
                ((dategreaterp wd ed) (setq flag t) (return t))
                (t (dolist (e (findconflicts room wd st et))
                     (push e errors)))))))

(defun handleconflicts (s structure conflicts)
  (format-html s) (crlf s)
  (format-head s)
  (format s "<title>Create Series</title>") (crlf s)
  (format-javascript s) (crlf s)
  (finish-head s) (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (format-border s)
  (format s "<center>") (crlf s)
  (format s "<table style='color:#ff0000' border='0'") (crlf s)
  (dolist (event conflicts)
    (format s "<tr><td>Proposed series conflicts with <a href=~A>~A</a>.</td></tr>"
	    event (prettyname event))
    (crlf s))
  (format s "<tr><td>Press the Back button, correct the error(s), and resubmit.</td></tr>")
  (format s "<tr><td>Alternatively, click <a href='createseriespage?Structure=~A'>here</a> to let GIN propose alternate room assignments.</td></tr>"
	  (htmlify (prin1-to-string structure)))
  (format s "<tr><td>Once GIN creates the series, you can still edit each event to change its choices.</td></tr>")
  (format s "<tr><td>Just click on the correpsonding event, push the Change button, and select a different room.</td></tr>")
  (format s "</table>") (crlf s)
  (format s "</center>") (crlf s)
  (finish-border s)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun createevents (series title room days sd ed st et owner url)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7))
       (seriesname (subseq (symbol-name series) 7)) (count 1) (event) 
       (flag) (data))
      (flag (nreverse data))
      (do ((i days (cdr i)) (wd date))
	  ((null i))
	  (setq wd (dateint-plus date (car i)))
	  (cond ((dategreaterp sd wd))
		((dategreaterp wd ed) (setq flag t) (return t))
		(t (setq event (intern (stringappend "EVENT." seriesname "." (princ-to-string count))))
		   (push `(event.instance ,event) data)
		   (push `(event.title ,event ,title) data)
		   (push `(event.conferenceroom ,event ,room) data)
		   (push `(event.date ,event ,wd) data)
		   (push `(event.start ,event ,st) data)
		   (push `(event.end ,event ,et) data)
		   (push `(event.owner ,event ,owner) data)
		   (when url (push `(event.url ,event ,url) data))
		   (push `(event.series ,event ,series) data)
		   (setq count (1+ count)))))))

(defun createseriesevents (series title room days sd ed st et owner url)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7))
       (seriesname (subseq (symbol-name series) 7)) (count 1) (event) (flag))
      (flag series)
      (do ((i days (cdr i)) (wd date))
	  ((null i))
	  (setq wd (dateint-plus date (car i)))
	  (cond ((dategreaterp sd wd))
		((dategreaterp wd ed) (setq flag t) (return t))
		(t (setq event (intern (stringappend "EVENT." seriesname "." (princ-to-string count))))
		   (insert `(event.instance ,event) *repository*)
		   (insert `(event.title ,event ,title) *repository*)
		   (insert `(event.conferenceroom ,event ,room) *repository*)
		   (insert `(event.date ,event ,wd) *repository*)
		   (insert `(event.start ,event ,st) *repository*)
		   (insert `(event.end ,event ,et) *repository*)
		   (insert `(event.owner ,event ,owner) *repository*)
		   (insert url (push `(event.url ,event ,url) *repository*))
		   (insert `(event.series ,event ,series) *repository*)
		   (setq count (1+ count)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'createseriespage)) postlines)
  (let (dum)
    (cond ((null postlines) (process-fastcreatepage s 'series))
          ((setq dum (getf-post "Structure" postlines))
           (setq dum (read-user-string dum))
           (process-createseriespage s (car dum) (cddr dum)))
          (t (http-problem s "Bad request.")))))

(defun process-createseriespage (s object constraints)
  (let (title room days sd ed st et owner url errors data)
    (setq title (getslotval 'series.title constraints))
    (setq room (getslotval 'series.conferenceroom constraints))
    (setq days (getslotvals 'series.day constraints))
    (setq sd (getslotval 'series.startdate constraints))
    (setq ed (getslotval 'series.enddate constraints))
    (setq st (getslotval 'series.starttime constraints))
    (setq et (getslotval 'series.endtime constraints))
    (setq owner (getslotval 'series.owner constraints))
    (setq url (getslotval 'series.url constraints))
    (cond ((setq errors (checkseries object title room days sd ed st et))
           (http-problems s errors))
	  ((setq data (createothers object title room days sd ed st et owner url))
	   (defineobject object 'series constraints *gui*)
	   (dolist (p data) (insert p *repository*))
	   (output-fastcreatepage-success s object))
	  (t (http-problems s (list "No rooms available for at least one event in the series."))))))

(defun createothers (series title room days sd ed st et owner url)
  (setq days (getdayincrements days))
  (do ((date (lastmonday sd) (dateint-plus date 7))
       (seriesname (subseq (symbol-name series) 7)) (count 1) (event) 
       (flag) (data))
      (flag (nreverse data))
      (do ((i days (cdr i)) (wd date) (myroom room room))
	  ((null i))
	  (setq wd (dateint-plus date (car i)))
	  (cond ((dategreaterp sd wd))
		((dategreaterp wd ed) (setq flag t) (return t))
		((or (freeroomp myroom wd st et) (setq myroom (findroom wd st et)))
		 (setq event (intern (stringappend "EVENT." seriesname "." (princ-to-string count))))
		 (push `(event.instance ,event) data)
		 (push `(event.title ,event ,title) data)
		 (push `(event.conferenceroom ,event ,myroom) data)
		 (push `(event.date ,event ,wd) data)
		 (push `(event.start ,event ,st) data)
		 (push `(event.end ,event ,et) data)
		 (push `(event.owner ,event ,owner) data)
		 (when url (push `(event.url ,event ,url) data))
		 (push `(event.series ,event ,series) data)
		 (setq count (1+ count)))
		(t (setq data nil flag t) (return t))))))

(defun findroom (date st et)
  (dolist (room (cdr (conferencerooms)))
    (when (freeroomp room date st et) (return room))))

(defun freeroomp (room date st et)
  (do ((l (objects 'event.date date *repository*) (cdr l)))
      ((null l) t)
      (when (and (triplep 'event.conferenceroom (car l) room *repository*)
		 (overlapsp (result 'event.start (car l) *repository*)
			    (result 'event.end (car l) *repository*)
			    st et))
	(return nil))))

(defun overlapsp (st1 et1 st2 et2)
  (or (and (lessp st2 et1) (lessp st1 et2))
      (and (lessp st1 et2) (lessp st2 et1))))

(defun lqp (x y)
  (or (equal x y) (lessp x y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#|
(defmethod process (s (command (eql 'createseriespage)) postlines)
  (let (structure (*fastcreatepage* "createseriespage"))
    (cond ((null postlines)
	   (process-createseriespage-start s (createitem (newinstance 'series))))
          ;((string-equal (getf-post "Command" postlines) "Create")
          ; (setq structure (read-user-string (cdr (pop postlines))))
          ; (process-fastcreatepage-create s (car structure) (cadr structure) (cddr structure)))
          ((string-equal (getf-post "Command" postlines) "Create")
           (setq structure (read-user-string (cdr (pop postlines))))
           (process-createseriespage-create s structure))
          (t (http-problem s "Bad request.")))))

(defmethod process-fastcreatepage-create (s object (class (eql 'series)) constraints)
  (process-createseriespage s object constraints))

(defun process-createseriespage (s series constraints)
  (format-html s) (crlf s)
  (format-head s)
  (format s "<title>Events</title>") (crlf s)
  (format-javascript s) (crlf s)
  (finish-head s) (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (format-border s)
  (format s "<center>") (crlf s)
  (output-createseries s series constraints) (crlf s)
  (format s "</center>") (crlf s)
  (finish-border s)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun output-createseries (s series constraints)
  (let (title room days sd ed st et owner url)
    (setq title (getslotval 'series.title constraints))
    (setq room (getslotval 'series.conferenceroom constraints))
    (setq days (getslotvals 'series.day constraints))
    (setq sd (getslotval 'series.startdate constraints))
    (setq ed (getslotval 'series.enddate constraints))
    (setq st (getslotval 'series.starttime constraints))
    (setq et (getslotval 'series.endtime constraints))
    (setq url (getslotval 'series.url constraints))
    (format s "Your proposed series is decribed below.") (format s "<br/>")
    (format s "You can select new room assignments from the selectors as desired.") (format s "<br/>")
    (format s "The room selectors show all rooms available at the corresponding times.") (format s "<br/>")
    (format s "When you are done, click the Record button at the bottom of the page to record the series.") (crlf s)
    (format s "<table cellspacing='8'>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Title</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.title title 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Room</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.conferenceroom room 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Day</th>")
    (format s "<td>")
    (output-fastcreate-cells s 'series.day days 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Start Time</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.starttime st 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>End Time</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.endtime et 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Start Date</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.startdate sd 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>End Date</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.enddate ed 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Owner</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.owner owner 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Webpage</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.url url 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Event</th>")
    (format s "<td>")
    (output-createseriesevents s series title room days sd ed st et owner url)
    (format s "</tr>")
    (format s "</table>")
    (format s "<input type='submit' name='Command' value='Record'/>")))

(defmethod output-createseriesevents (s series title room days sd ed st et owner url)
  (setq days (getdayincrements days))
  (format s "<table cellspacing='2' bgcolor='~A' border='0'>" *bgcolor*) (crlf s)
  (format s "<tr>")
  (format s "<th>Event</th>")
  (format s "<th></th>")
  (format s "<th>Room</th>")
  (format s "<th>Day</th>")
  (format s "<th>Start</th>")
  (format s "<th>End</th>")
  (format s "</tr>") (crlf s)
  (do ((date (lastmonday sd) (dateint-plus date 7))
       (seriesname (subseq (symbol-name series) 7))
       (count 1) (event) (flag))
      (flag)
      (do ((i days (cdr i)) (wd date))
	  ((null i))
	  (setq wd (dateint-plus date (car i)))
	  (cond ((dategreaterp sd wd))
		((dategreaterp wd ed) (setq flag t) (return t))
		(t (setq event (stringappend "EVENT." seriesname "." (princ-to-string count)))
		   (format s "<tr>") (crlf s)
		   (format s "<td>")
		   (output-hidden s 'object event)
		   (format s "~A ~A" title wd)
		   (format s "</td>")
		   (format s "<td>")
		   (output-hidden s 'event.title title)
		   (format s "</td>")
		   (format s "<td>")
		   (output-fastcreate-cell s 'event.conferenceroom room 'selector)
		   (format s "</td>")
		   (format s "<td>")
		   (output-fastcreate-cell s 'event.day (elt *day-names* (car i)) 'prettystyle)
		   (format s "</td>")
		   (format s "<td>")
		   (output-fastcreate-cell s 'event.start st 'prettystyle)
		   (format s "</td>")
		   (format s "<td>")
		   (output-fastcreate-cell s 'event.end et 'prettystyle)
		   (format s "</td>")
		   (format s "<td>")
		   (output-hidden s 'event.owner owner)
		   (format s "</td>")
		   (format s "<td>")
		   (output-hidden s 'event.url url)
		   (format s "</td>")
		   (format s "</tr>") (crlf s)))))
  (format s "</table>") (crlf s))
|#


#|
(defun output-inspectseries-inner (s structure items slots results)
  (let (class nohandle)
    (setq class (cadr structure))
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (format s "<table cellspacing='2' bgcolor='~A' border='~A'>" *bgcolor* *border*) (crlf s)
    (format s "<tr>")
    (unless nohandle
      (format s "<th>")
      (format s (iconify class))
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<th>")
      (format s (iconify slot))
      (format s "</th>")
      (crlf s))
    (format s "</tr>") (crlf s)
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)))
        ((null l))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nohandle
          (format s "<td>")
          (output-handle s (car l))
          (format s "</td>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots)) (style) (vals)) 
            ((null n))
            (setq style (find-comparestyle (car slots)))
            (setq vals (car n))
            (setq vals (remove 'unknown vals))
            (if (every #'(lambda (val) (numberp val)) vals)
              (format s "<td align='right'>")
              (format s "<td>"))
            (output-cells s (car slots) vals style)
            (format s "</td>"))
        (format s "</tr>")
        (crlf s))
    (format s "</table>") (crlf s))))

(defun output-createseries (s structure)
  (let (series title room days sd ed st et owner url events)
    (setq series (car structure))
    (setq title (getslotval 'series.title (cddr structure)))
    (setq room (getslotval 'series.conferenceroom (cddr structure)))
    (setq days (getslotvals 'series.day (cddr structure)))
    (setq sd (getslotval 'series.startdate (cddr structure)))
    (setq ed (getslotval 'series.enddate (cddr structure)))
    (setq st (getslotval 'series.starttime (cddr structure)))
    (setq et (getslotval 'series.endtime (cddr structure)))
    (setq owner (getslotval 'series.owner (cddr structure)))
    (setq url (getslotval 'series.url (cddr structure)))
    (setq events (results 'series.event series *repository*))
    (format s "Change room assignments as desired and click the Create button below to create the series.") (crlf s)
    (force-output s)
    (format s "<table cellspacing='8'>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Title</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.title title 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Room</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.conferenceroom room 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Day</th>")
    (format s "<td>")
    (output-fastcreate-cells s 'series.day days 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Start Time</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.starttime st 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>End Time</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.endtime et 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Start Date</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.startdate sd 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>End Date</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.enddate ed 'prettystyle)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Owner</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.owner owner 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Webpage</th>")
    (format s "<td>")
    (output-fastcreate-cell s 'series.url url 'glyph)
    (format s "</td>")
    (format s "</tr>")
    (format s "<tr>")
    (format s "<th align='left' valign='top'>Event</th>")
    (format s "<td>")
    (output-events s events)
    (format s "</tr>")
    (format s "</table>")
    (format s "<input type='submit' name='Command' value='Create'/>")))

(defmethod output-events (s events)
  (let (slots sorter results)
    (setq slots '(event.date event.conferenceroom))
    (setq results (prorequest `(ask-table ,events ,slots)))
    (format s "<div>")
    (output-inspectseries-inner s `(? event) events slots results)
    (format s "</div>")))

(defun output-inspectseries-inner (s structure items slots results)
  (let (class nohandle)
    (setq class (cadr structure))
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (format s "<table cellspacing='2' bgcolor='~A' border='~A'>" *bgcolor* *border*) (crlf s)
    (format s "<tr>")
    (unless nohandle
      (format s "<th>")
      (format s (iconify class))
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<th>")
      (format s (iconify slot))
      (format s "</th>")
      (crlf s))
    (format s "</tr>") (crlf s)
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)))
        ((null l))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nohandle
          (format s "<td>")
          (output-handle s (car l))
          (format s "</td>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots)) (style) (vals)) 
            ((null n))
            (setq style (find-comparestyle (car slots)))
            (setq vals (car n))
            (setq vals (remove 'unknown vals))
            (if (every #'(lambda (val) (numberp val)) vals)
              (format s "<td align='right'>")
              (format s "<td>"))
            (output-cells s (car slots) vals style)
            (format s "</td>"))
        (format s "</tr>")
        (crlf s))
    (format s "</table>") (crlf s))))
|#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
