var counter = 1function addslot (slot,obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(slot).cloneNode(true);  node.parentNode.insertBefore(copy,node);  copy.setAttribute('status','active');  copy.style.display = '';  return true}function remslot (obj) {var node = obj.parentNode.parentNode;  obj = getobject(node);  node.parentNode.removeChild(node);  propagate(obj,obj);  return true}function additem (slot,obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(slot).cloneNode(true);  var name = 'x' + counter++;  node.parentNode.insertBefore(copy,node);  copy.id = name;  copy.childNodes[1].childNodes[0].id = name;  copy.childNodes[1].childNodes[0].childNodes[0].innerHTML = name;  copy.setAttribute('status','active');  copy.style.display = '';  return true}function remitem (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}function toggletable (obj) {if (obj.innerHTML == 'Hide')     {obj.nextSibling.style.display = 'None'; obj.innerHTML = 'Show'}  else {obj.nextSibling.style.display = ''; obj.innerHTML = 'Hide'}}function addrow (category, obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(category).cloneNode(true);  node.parentNode.insertBefore(copy,node);  copy.id = category + '.' + counter++;  copy.setAttribute('status','active');  copy.style.display = '';  return true}function remrow (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}function transform (node) {if (node.nodeType != '1') {return ''};  if (node.getAttribute('status') == 'skip') {return ''};  if (node.nodeName == 'DIV') {return transformdiv(node)};  if (node.nodeName == 'TR') {return transformdiv(node)};  if (node.nodeName == 'SELECT') {return transformselect(node)};  if (node.nodeName == 'INPUT') {return transforminput(node)};  if (node.nodeName == 'TEXTAREA') {return transformtextarea(node)};  return transformother(node)}function transformdiv (node) {var object = node.getAttribute('id');  var category = node.getAttribute('class');  var slot = node.getAttribute('slot');  if (node.getAttribute('status') == 'skip') {return ''};  if (slot)     {var value = '(' + object + ' ' + category + ' ' + transformother(node) + ')';      return listify(slot,value)};  if (category) {return '(' + object + ' ' + category + ' ' + transformother(node) + ')'};  return transformother(node)}function transformselect (node) {var val = node.options[node.selectedIndex].value;  if (val == '') {return val} else {return listify(node.name,val)}}function transforminput (node) {if (node.type == 'text') {return transformtext(node)};  if (node.type == 'textarea') {return transformtextarea(node)};  if (node.type == 'hidden') {return listify(node.name,escape(node.value))};  if (node.type == 'radio') {return transformradio(node)};  if (node.type == 'checkbox') {return transformcheckbox(node)};  return ''}function transformtext (node) {if (node.value == '') {return ''};  if (node.getAttribute('status') == 'string') {return listify(node.name,stringize(node.value))};  return listify(node.name,node.value)}function transformradio (node) {if (node.checked) {return listify(node.name, escape(node.value))} else {return ''}}function transformcheckbox (node) {if (node.checked) {return listify(node.name, escape(node.value))} else {return ''}}function transformtextarea (node) {if (node.value == '') {return ''};  return listify(node.name, stringize(node.value))}function transformother (node) {var ns = '';  for (var i=0; i<node.childNodes.length; i++)      {ns = ns + transform(node.childNodes[i])};  return ns}function stringize (str)  {str = str.replace(/\\\\/g,'\\\\\\\\');   str = str.replace(/\"/g,'\\\\\\\"');   return '\"' + escape(str) + '\"'}function listify (x,y)  {return '(' + x + ' ' + y + ')'}function showchange () {if (document.title.slice(0,1) != '^') {document.title = '^' + document.title}}function showsaved () {if (document.title.slice(0,1) == '^')     {document.title = document.title.slice(1,document.title.length)}}function showstructure (node) {alert(transform(node.parentNode))}function showchange (node) {if (document.title.slice(0,1) != '^') {document.title = '^' + document.title};  node = getobject(node);  propagate(node,node)}function propagate (node,obj) {if (node.nodeType != '1') {return false};  if (node.nodeName == 'TR' && node.getAttribute('controlslot')) {return propwidget(node,obj)};  for (var i=0; i<node.childNodes.length; i++) {prop(node.childNodes[i],obj)}  return false}function prop (node,obj) {if (node.nodeType != '1') {return false};  if (node.nodeName == 'DIV') {return false};  if (node.nodeName == 'TR' && node.getAttribute('controlslot')) {return propwidget(node,obj)};  for (var i=0; i<node.childNodes.length; i++) {prop(node.childNodes[i],obj)}  return false}function propwidget (node,obj) {var slotname = node.getAttribute('controlslot');  var values = node.getAttribute('controlvalues').split('&');  var selections = propvals(slotname,obj);  if (intersectionp(values,selections))     {node.style.display = ''}     else {node.style.display = 'None'}  return false}function propwidget (node,obj) {var slotname = node.getAttribute('controlslot');  var values = node.getAttribute('controlvalues').split('&');  var selections = propvals(slotname,obj);  if (intersectionp(values,selections))     {node.style.display = ''; node.setAttribute('status','')}     else {node.style.display = 'None'; node.setAttribute('status','skip')}  return false}function propvals (slotname,node) {var answers = empty();  for (var i=0; i<node.childNodes.length; i++)      {answers = getvalues(slotname,node.childNodes[i],answers)}  return answers}function getvalues (slotname,node,answers) {if (node.nodeType != '1') {return answers};  if (node.nodeName == 'DIV') {return answers};  if (node.nodeName == 'SELECT')     {return getselectorvalues(slotname,node,answers)};  for (var i=0; i<node.childNodes.length; i++)      {answers = getvalues(slotname,node.childNodes[i],answers)}  return answers}function getselectorvalues (slotname, node, answers) {if (node.name == slotname && node.options[node.selectedIndex].value != '')     {answers[answers.length] = node.options[node.selectedIndex].value};  return answers}function getobject (node) {if (node == false) {return false};  if (node.nodeName == 'DIV' && node.getAttribute('class')) {return node};  return getobject(node.parentNode)}function empty () {return new Array(0)}function intersectionp (seq1, seq2) {for (var i=0; i<seq1.length; i++)      {for (var j=0; j<seq2.length; j++)           {if (seq1[i] == seq2[j]) {return true}}};  return false}function record (node) {postRecord('finechangepage?','Structure=' + transform(node.parentNode) + '&Command=Record')}function postRecord (url,args) {http_result = false;  if (window.XMLHttpRequest)     {http_result = new XMLHttpRequest();      if (http_result.overrideMimeType)         {http_result.overrideMimeType('text/xml');}}  else if (window.ActiveXObject)          {try {http_result = new ActiveXObject('Msxml2.XMLHTTP')}           catch (e) {try {http_result = new ActiveXObject('Microsoft.XMLHTTP')}                      catch (e) {} }}  http_result.onreadystatechange = alertRecord;  http_result.open('POST', url, true);  http_result.send(args);}function alertRecord() {if (http_result.readyState == 4)     {if (http_result.responseText)         {showsaved()}      else {alert('There was a problem with the request in alertResult.')}}}