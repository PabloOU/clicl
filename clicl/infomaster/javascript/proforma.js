var gMenu = null;var gCal = null;var gColorPicker = null;var gSelectedItem = null;var gSelectedCell = null;var gIsGecko = false;var gIsOpera = false;var gIsSafari = null;var gIsBrowserKnown = false;var preloadImage = new Image();var gMonths = [{name: 'January', days: 31},  {name: 'February', days: 28},  {name: 'March', days: 31},  {name: 'April', days: 30},  {name: 'May', days: 31},  {name: 'June', days: 30},  {name: 'July', days: 31},  {name: 'August', days: 31},  {name: 'September', days: 30},  {name: 'October', days: 31},  {name: 'November', days: 30},  {name: 'December', days: 31}];var textchange = false;var http_result = false;function postReplace (fobj) {postRequest(fobj.action,'Structure=' + newFormStructure(fobj) + '&Command=Refresh')}function postReplace (fobj) {location.replace(fobj.action + 'Structure=' + newFormStructure(fobj) + '&Command=Refresh')}function postReplace (fobj) {if (navigator.userAgent.indexOf('MSIE') != -1)     {location.replace(fobj.action + 'Structure=' + newFormStructure(fobj) + '&Command=Refresh')}     else {postRequest(fobj.action,'Structure=' + newFormStructure(fobj) + '&Command=Refresh')}}function postReplace (fobj) {location.replace(fobj.action + 'Structure=' + newFormStructure(fobj) + '&Command=Refresh')}function postDisplay (fobj) {window.location = fobj.action + 'Structure=' + newFormStructure(fobj) + '&Command=Display'}function postRequest (url,args) {http_result = false;  if (window.XMLHttpRequest)     {http_result = new XMLHttpRequest();      if (http_result.overrideMimeType)         {http_result.overrideMimeType('text/xml');}}  else if (window.ActiveXObject)          {try {http_result = new ActiveXObject('Msxml2.XMLHTTP')}           catch (e) {try {http_result = new ActiveXObject('Microsoft.XMLHTTP')}                      catch (e) {} }};  http_result.onreadystatechange = alertRequest;  http_result.open('POST', url, true);  http_result.send(args)}function alertRequest() {if (http_result.readyState == 4)     {if (http_result.responseText)         {document.documentElement.innerHTML=http_result.responseText}      else {alert('There was a problem with the request in alertResult.')}}}function newFormStructure (fobj) {var str = '';  str += '(' + fobj.elements[0].value;  str += ' ' + fobj.elements[1].value;  for (var i = 2; i < fobj.elements.length; i++)      {if (fobj.elements[i].getAttribute('qualifier') == 'skip') {str = str}       else if (fobj.elements[i].type == 'select-one')               {var val = fobj.elements[i].options[fobj.elements[i].selectedIndex].value;                if (val != '') {str += ' ' + listify(fobj.elements[i].name, escape(val))}}       else if (fobj.elements[i].type == 'select-multiple')               {for (var j = 0; j < fobj.elements[i].options.length; j++)                    {if (fobj.elements[i].options[j].selected)                        {var val = fobj.elements[i].options[j].value;                         str += ' ' + listify(fobj.elements[i].name, val)}}}       else if (fobj.elements[i].type == 'radio')               {if (fobj.elements[i].checked)                   {str += ' ' + listify(fobj.elements[i].name, escape(fobj.elements[i].value))}}       else if (fobj.elements[i].type == 'checkbox')               {if (fobj.elements[i].checked)                   {str += ' ' + listify(fobj.elements[i].name, escape(fobj.elements[i].value))}}       else if (fobj.elements[i].type == 'button')               {str = str}       else if (fobj.elements[i].getAttribute('qualifier') == 'string')               {if (fobj.elements[i].value != '')                   {str += ' ' + listify(fobj.elements[i].name, stringize(fobj.elements[i].value))}}       else {str += ' ' + listify(fobj.elements[i].name, escape(fobj.elements[i].value))}}  str = str + ')';  return str}function stringize (str)  {str = str.replace(/\\\\/g,'\\\\\\\\');   str = str.replace(/\"/g,'\\\\\\\"');   return '\"' + escape(str) + '\"'}function listify (x, y)  {return '(' + x + ' ' + y + ')'}function textEdit(e) {var keynum;  if (window.event) {keynum = e.keyCode}  else if (e.which) {keynum = e.which};  if (keynum == 13)     {textchange = false;      postReplace(form1);      return false}  else {textchange = true;        return true}}function textBlur(e) {if (textchange == true)     {textchange = false;      postReplace(window.document.form1)}}function CheckNumber (evt,value) {var code = GetCharCode(evt);  if (IsMetaKeyDown(evt) || IsAltKeyDown(evt) || IsCtrlKeyDown(evt)) {return true}  if (code == 13) {postReplace(form1); return false};  if ((code==null) || (code==0) || (code==8) || (code==9) || (code==27) || (code >= 37 && code <= 40) || (code > 255)) {return true}  else if (code >= 48 && code <= 57) {return true}  else if (((code == 190) || (code == 46)) && value.indexOf('.') == -1) {return true}  return false}function DetermineBrowser() {if(gIsBrowserKnown) return;  gIsBrowserKnown=true;  var ua=navigator.userAgent.toLowerCase();  gIsGecko=((ua.indexOf('gecko')!=-1)&&(ua.indexOf('opera')==-1));  gIsOpera=(ua.indexOf('opera')!=-1);  gIsSafari=(ua.indexOf('safari')!=-1)}function IsGecko () {DetermineBrowser();  return gIsGecko}function IsSafari () {DetermineBrowser();  return gIsSafari}function Min (a,b) {if (a < b) return a;  return b}function IsMetaKeyDown (evt) {if (!evt) evt=window.event;  if (evt) {return evt.metaKey}  return false}function IsShiftKeyDown (evt) {if (!evt) evt=window.event;  if (evt) {return evt.shiftKey}  return false}function IsAltKeyDown (evt) {if (!evt) evt=window.event;  if (evt) {return evt.altKey}  return false}function IsCtrlKeyDown (evt) {if (!evt) evt=window.event;  if (evt) {return evt.ctrlKey}  return false}function GetCharCode (evt) {if (!evt) evt=window.event;  if (evt)     {if (evt.keyCode) {return evt.keyCode}      else {return evt.which}}  return 0}function HandleKeyDown (evt) {var code = GetCharCode(evt);  if (code == 9 || code == 0) {hidePopup()};  if (code == 13) {postReplace(form1); return false};  return true}function numChildNodes (elt) {var nodes = elt.childNodes;  var n = 0;  for (i=0; i < nodes.length; i=i+1)      {if(nodes[i].nodeType == 1) {n = n+1}}  return n}//------------------------------------------------------------------------------// combobox//------------------------------------------------------------------------------function showMenu (elt) {hidePopup();  gMenu = elt;  var numElts = numChildNodes(elt);  if (numElts > 0) {elt.style.display='block'}}function hideMenu () {if (gMenu != null) {gMenu.style.display='none'; gMenu = null};  comboDeselect()}function comboSelect (elt) {if (elt != gSelectedItem)     {comboDeselect();      gSelectedItem = elt;      elt.style.color='white';      elt.style.backgroundColor='#316AC5'}}function comboDeselect () {if (gSelectedItem)     {gSelectedItem.style.color='';      gSelectedItem.style.backgroundColor='';      gSelectedItem = null}}function cbClick (elt,val,evt) {elt.parentNode.previousSibling.value=val;  hidePopup();  cancelBubble(evt)}//------------------------------------------------------------------------------// dateinput//------------------------------------------------------------------------------function showCal (cal,date) {hidePopup();  gCal = cal;  cal.style.display='block';  date = parseDate(date);  if(!date) date = new Date();  var month = date.getMonth()+1;  var year = date.getFullYear();  var day = date.getDate();  selectCell(year,month,day,cal)}function hideCal () {if (gCal != null) {gCal.style.display='none'} else {gCal = null}}function prevMonth(elt,evt) {cal = elt.parentNode.parentNode.parentNode.parentNode;  selectCell(parseInt(cal.childNodes[1].value), parseInt(cal.childNodes[0].value), 0,cal);  cancelBubble(evt)}function nextMonth(elt,evt) {cal = elt.parentNode.parentNode.parentNode.parentNode;  selectCell(parseInt(cal.childNodes[3].value), parseInt(cal.childNodes[2].value), 0,cal);  cancelBubble(evt)}function calClick (val,evt,flag) {gCal.previousSibling.value=val;  if (flag) postReplace(form1);  hidePopup();  cancelBubble(evt)}function parseDate(d) {d = d.split('/');   if(d.length != 3 || d[0].length == 0 || d[1].length == 0 || d[0].length > 2 || d[1].length > 2 || d[2].length != 4) return null;   d[0] = parseInt(d[0]);   d[1] = parseInt(d[1]);   d[2] = parseInt(d[2]);   if (isNaN(d[0]) || isNaN(d[1]) || isNaN(d[2])) return null;   if (d[0] < 1 || d[0] > 12 || d[1] < 1 || d[1] > 31) return null;   return new Date(d[2],d[0]-1,d[1])}function selectCell (year,month,day,cal) {var monthIndex = month-1;  gMonths[1].days = ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) ? 29 : 28;  var prevYear = (month == 1) ? year - 1 : year;  var nextYear = (month == 12) ? year + 1 : year;  var prevMonth = (month == 1) ? 12 : month - 1;  var nextMonth = month % 12 + 1;  var firstDay = new Date ();  firstDay.setFullYear(year,monthIndex,1);  firstDay = firstDay.getDay();  var monthName = gMonths[monthIndex].name;  var numDays = gMonths[monthIndex].days;  var prevDays = gMonths[prevMonth-1].days;  var numPrevDays = (firstDay > 4) ? firstDay : firstDay + 7;  cal.childNodes[0].value = prevMonth;  cal.childNodes[1].value = prevYear;  cal.childNodes[2].value = nextMonth;  cal.childNodes[3].value = nextYear;  var table = cal.childNodes[4];  table.childNodes[0].childNodes[0].childNodes[1].childNodes[0].innerHTML=monthName;  table.childNodes[0].childNodes[0].childNodes[1].childNodes[1].innerHTML=' ' + year;  var d = prevDays - numPrevDays + 1;  var m = prevMonth;  var y = prevYear;  for (var r = 2; r < 9; r++)      {var row = table.rows[r];       for (var c = 0; c < 7; c++)           {var cell = row.cells[c];            cell.innerHTML = d;            cell.id = y + '-' + normstring(m) + '-' + normstring(d);            cell.style.fontWeight = (m == month) ? 'bold' : '';            if (d == day && m == month && y == year)               {cell.style.backgroundColor = (c == 0 || c == 6) ? '#9bd' : '#ace'}            else {cell.style.backgroundColor = ''};       d++;       if (m == prevMonth && d > prevDays)          {m = month; d = 1; y = year}       else if (m == month && d > numDays)            {m = nextMonth; d = 1; y = nextYear}}}}function normalizedate (d) {d = d.split('-');  if(d.length != 3 || d[0].length == 0 || d[1].length == 0 || d[2].length == 0) return "";  d[0] = parseInt(d[0]);  d[1] = parseInt(d[1]);  d[2] = parseInt(d[2]);  if (isNaN(d[0]) || isNaN(d[1]) || isNaN(d[2])) return "";  if (d[1] < 1 || d[1] > 12 || d[2] < 1 || d[2] > 31) return "";  return d[0] + '-' + normstring(d[1]) + '-' + normstring(d[2])}function normstring (n) {if (n < 10) {return '0' + n}  else return '' + n}//------------------------------------------------------------------------------// colorpicker//------------------------------------------------------------------------------function showColorPicker(elem,evt) {cancelBubble(evt);  hidePopup();  gColorPicker = elem.nextSibling;  gColorPicker.style.display='block'}function hideColorPicker () {if (gColorPicker != null)     {gColorPicker.style.display='none';      gColorPicker = null}}function cpClicked (val,evt) {gColorPicker.previousSibling.previousSibling.value=val;  hidePopup();  cancelBubble(evt)}//------------------------------------------------------------------------------// Other Subroutines//------------------------------------------------------------------------------function CancelBubble(evt){    if(!evt) evt=window.event;    if(evt) {        if (evt.stopPropagation) evt.stopPropagation();        if (evt.preventDefault) evt.preventDefault();        if (evt.preventBubble) evt.preventBubble();        evt.returnValue=false;        evt.cancelBubble=true;    }    return false;}function cancelBubble(evt) {if(!evt) evt=window.event;  if (evt)     {if (evt.stopPropagation) evt.stopPropagation();      if (evt.preventDefault) evt.preventDefault();     //   if (evt.preventBubble) evt.preventBubble();      evt.returnValue=false;      evt.cancelBubble=true}    return false}function getElementBy(ele_str) {var elem=document.getElementById(ele_str);  if (elem) return elem;  var elt=document.getElementsByName(ele_str);  if (elt.length>0) return elt[0];  return null}function toElem(ele) {if(!ele) return ele;  if(typeof ele=='string')    {return getElementBy(ele)}  else {return ele}}function EltBox(ele) {ele=toElem(ele);    var box=new Object;    var lft=0;    var top=0;    for (var e=ele; e; e=e.offsetParent)        {lft += e.offsetLeft;         top += e.offsetTop;         if (!IsGecko())            {lft+=e.clientLeft;             top+=e.clientTop}}    box.left = lft;    box.top = top;    box.right = lft + ele.offsetWidth;    box.bottom = top + ele.offsetHeight;    return box}function hidePopup() {hideMenu();  hideCal();  hideColorPicker()}//------------------------------------------------------------------------------// fast//------------------------------------------------------------------------------var http_slot = false;var http_old = false;function fastselect (slot,value) {http_slot = slot;  postSelect('fastselect?','Slot=' + slot + '&Value=' + value)}function postSelect (url,args) {http_result = false;  if (window.XMLHttpRequest)     {http_result = new XMLHttpRequest();      if (http_result.overrideMimeType)         {http_result.overrideMimeType('text/xml');}}  else if (window.ActiveXObject)          {try {http_result = new ActiveXObject('Msxml2.XMLHTTP')}           catch (e) {try {http_result = new ActiveXObject('Microsoft.XMLHTTP')}                      catch (e) {} }}  http_result.onreadystatechange = alertSelect;  http_result.open('POST', url, true);  http_result.send(args);}function alertSelect() {if (http_result.readyState == 4)     {if (http_result.responseText)         {var cell = document.getElementById(http_slot);          cell.innerHTML = http_result.responseText}      else {alert('There was a problem with the request in alertResult.')}}}function fancyselect (slot,old,context,value) {http_slot = slot;  http_old = value;  postFancyselect('fancyselect?','Slot=' + slot + '&Old=' + old + '&Context=' + context + '&Value=' + value)}function fancydeselect (slot,old,context,value) {http_slot = slot;  http_old = value;  postFancyselect('fancydeselect?','Slot=' + slot + '&Old=' + old + '&Context=' + context + '&Value=' + value)}function fancycancel (slot,old) {document.getElementById(slot).innerHTML=''}function postFancyselect (url,args) {http_result = false;  if (window.XMLHttpRequest)     {http_result = new XMLHttpRequest();      if (http_result.overrideMimeType)         {http_result.overrideMimeType('text/xml');}}  else if (window.ActiveXObject)          {try {http_result = new ActiveXObject('Msxml2.XMLHTTP')}           catch (e) {try {http_result = new ActiveXObject('Microsoft.XMLHTTP')}                      catch (e) {} }}  http_result.onreadystatechange = alertFancyselect;  http_result.open('POST', url, true);  http_result.send(args);}function alertFancyselect() {if (http_result.readyState == 4)     {if (http_result.responseText)         {var elem = document.getElementById(http_slot);          if (http_result.responseText == ' ')             {document.getElementsByName(http_slot)[0].value=http_old};          elem.innerHTML = http_result.responseText}      else {alert('There was a problem with the request in alertResult.')}}}//------------------------------------------------------------------------------// patcher//------------------------------------------------------------------------------var counter = 1function adjust (slot,obj) {if (obj.selectedIndex == 0) {return adjustdelete(obj)};  var last = document.getElementById(slot).previousSibling.cells[0].childNodes[0];  if (last.value != "") {return adjustadd(slot,obj)}}function adjustadd (slot,obj) {var node = obj.parentNode.parentNode;  var base = document.getElementById(slot);  var copy = base.cloneNode(true);  node.parentNode.insertBefore(copy,base);  copy.setAttribute('qualifier','active');  copy.style.display = '';  return true}function adjustdelete (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}function addslot (slot,obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(slot).cloneNode(true);  node.parentNode.insertBefore(copy,node);  copy.setAttribute('qualifier','active');  copy.style.display = '';  return true}function remslot (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}function additem (slot,obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(slot).cloneNode(true);  var name = 'x' + counter++;  node.parentNode.insertBefore(copy,node);  copy.id = name;  copy.childNodes[1].childNodes[0].id = name;  copy.childNodes[1].childNodes[0].childNodes[0].innerHTML = name;  copy.setAttribute('qualifier','active');  copy.style.display = '';  return true}function remitem (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}function toggletable (obj) {if (obj.innerHTML == 'Hide')     {obj.nextSibling.style.display = 'None'; obj.innerHTML = 'Show'}  else {obj.nextSibling.style.display = ''; obj.innerHTML = 'Hide'}}function addrow (category, obj) {var node = obj.parentNode.parentNode;  var copy = document.getElementById(category).cloneNode(true);  node.parentNode.insertBefore(copy,node);  copy.id = category + '.' + counter++;  copy.setAttribute('qualifier','active');  copy.style.display = '';  return true}function remrow (obj) {var node = obj.parentNode.parentNode;  node.parentNode.removeChild(node);  return true}//------------------------------------------------------------------------------function transform (node) {if (node.nodeType != '1') {return ''};  if (node.getAttribute('qualifier') == 'skip') {return ''};  if (node.nodeName == 'DIV') {return transformdiv(node)};  if (node.nodeName == 'TR') {return transformdiv(node)};  if (node.nodeName == 'SELECT') {return transformselect(node)};  if (node.nodeName == 'INPUT') {return transforminput(node)};  if (node.nodeName == 'TEXTAREA') {return transformtextarea(node)};  return transformother(node)}function transformdiv (node) {var object = node.getAttribute('id');  var category = node.getAttribute('category');  var slot = node.getAttribute('slot');  if (node.getAttribute('qualifier') == 'skip') {return ''};  if (slot)     {var value = '(' + object + ' ' + category + ' ' + transformother(node) + ')';      return listify(slot,value)};  if (category) {return '(' + object + ' ' + category + ' ' + transformother(node) + ')'};  return transformother(node)}function transformselect (node) {if (node.multiple) {return transformmenu(node)} else {return transformselector(node)}}function transformselector (node) {var val = node.options[node.selectedIndex].value;  if (val == '') {return val} else {return listify(node.name,val)}}function transformmenu (node) {var ns = '';  for (var i=0; i<node.options.length; i++)      {if (node.options[i].selected)          {ns = ns + listify(node.name,node.options[i].value)}};  return ns}function transforminput (node) {if (node.type == 'radio') {return transformradio(node)};  if (node.type == 'checkbox') {return transformcheckbox(node)};  if (node.type == 'text') {return transformtext(node)};  if (node.type == 'textarea') {return transformtextarea(node)};  if (node.type == 'password') {return transformtextarea(node)};  if (node.type == 'hidden') {return listify(node.name,escape(node.value))};  return ''}function transformtext (node) {if (node.value == '') {return ''};  if (node.getAttribute('qualifier') == 'string') {return listify(node.name,stringize(node.value))};  return listify(node.name,node.value)}function transformradio (node) {if (node.checked) {return listify(node.name, escape(node.value))} else {return ''}}function transformcheckbox (node) {if (node.checked) {return listify(node.name, escape(node.value))} else {return ''}}function transformtextarea (node) {if (node.value == '') {return ''};  return listify(node.name, stringize(node.value))}function transformother (node) {var ns = '';  for (var i=0; i<node.childNodes.length; i++)      {ns = ns + transform(node.childNodes[i])};  return ns}function stringize (str)  {str = str.replace(/\\\\/g,'\\\\\\\\');   str = str.replace(/\"/g,'\\\\\\\"');   return '\"' + escape(str) + '\"'}function listify (x,y)  {return '(' + x + ' ' + y + ')'}function showchange (node) {if (document.title.slice(0,1) != '^') {document.title = '^' + document.title};  node = getobject(node);  propagate(node,node)}function showchange () {if (document.title.slice(0,1) != '^') {document.title = '^' + document.title}}function showsaved () {if (document.title.slice(0,1) == '^')     {document.title = document.title.slice(1,document.title.length)}}function showstructure (node) {alert(transform(node.parentNode))}function propagate (node,obj) {if (node.nodeType != '1') {return false};  if (node.nodeName == 'TR' && node.getAttribute('controlslot')) {return propwidget(node,obj)};  for (var i=0; i<node.childNodes.length; i++) {prop(node.childNodes[i],obj)}  return false}function prop (node,obj) {if (node.nodeType != '1') {return false};  if (node.nodeName == 'DIV') {return false};  if (node.nodeName == 'TR' && node.getAttribute('controlslot')) {return propwidget(node,obj)};  for (var i=0; i<node.childNodes.length; i++) {prop(node.childNodes[i],obj)}  return false}function propwidget (node,obj) {var slotname = node.getAttribute('controlslot');  var values = node.getAttribute('controlvalues').split('&');  var selections = propvals(slotname,obj);  if (intersectionp(values,selections))     {node.style.display = ''}     else {node.style.display = 'None'}  return false}function propwidget (node,obj) {var slotname = node.getAttribute('controlslot');  var values = node.getAttribute('controlvalues').split('&');  var selections = propvals(slotname,obj);  if (intersectionp(values,selections))     {node.style.display = ''; node.setAttribute('qualifier','')}     else {node.style.display = 'None'; node.setAttribute('qualifier','skip')}  return false}function propvals (slotname,node) {var answers = empty();  for (var i=0; i<node.childNodes.length; i++)      {answers = getvalues(slotname,node.childNodes[i],answers)}  return answers}function getvalues (slotname,node,answers) {if (node.nodeType != '1') {return answers};  if (node.nodeName == 'DIV') {return answers};  if (node.nodeName == 'SELECT')     {return getselectorvalues(slotname,node,answers)};  for (var i=0; i<node.childNodes.length; i++)      {answers = getvalues(slotname,node.childNodes[i],answers)}  return answers}function getselectorvalues (slotname, node, answers) {if (node.name == slotname && node.options[node.selectedIndex].value != '')     {answers[answers.length] = node.options[node.selectedIndex].value};  return answers}function getobject (node) {if (node == false) {return false};  if (node.nodeName == 'DIV' && node.getAttribute('category')) {return node};  return getobject(node.parentNode)}function empty () {return new Array(0)}function intersectionp (seq1, seq2) {for (var i=0; i<seq1.length; i++)      {for (var j=0; j<seq2.length; j++)           {if (seq1[i] == seq2[j]) {return true}}};  return false}function create (node) {window.location = node.form.action + 'Structure=' + transform(node.parentNode) + '&Command=Create'}function record (node) {window.location = node.form.action + 'Structure=' + transform(node.parentNode) + '&Command=Record'}//------------------------------------------------------------------------------//------------------------------------------------------------------------------//------------------------------------------------------------------------------