;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; interface.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reset;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(reset)*(defparameter *interface* (make-instance '*interface* :name '*interface*))*(defparameter *factserver* (make-instance 'factserver :name 'factserver))*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; revise, errors, revisions, notifications, reactions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(revisions '(p a) *interface*)((P A))(revisions '(q a) *interface*)((Q A))(revisions '(and (not (p b)) (q b)) *interface*)((NOT (P B)) (Q B))(revisions '(<= (r ?x) (p ?x) (q ?x)) *interface*)((<= (R ?X) (P ?X) (Q ?X)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; askp, askx, asks;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(integer 2) nil *interface*)t(askp '(integer 1/2) nil *interface*)nil(askp '(integer 3.2) nil *interface*)nil(askp '(integer #c(1 2)) nil *interface*)nil(askp '(integer a) nil *interface*)nil(askp '(even 2) nil *interface*)t(askp '(even a) nil *interface*)nil(askp '(odd 3) nil *interface*)t(askp '(odd a) nil *interface*)nil(askp '(positive 3) nil *interface*)t(askp '(positive a) nil *interface*)nil(askp '(negative -1) nil *interface*)t(askp '(negative a) nil *interface*)nil(askp '(zero 0) nil *interface*)t(askp '(gcd 2 6 2) nil *interface*)t(askp '(lcm 2 3 6) nil *interface*)t(askp '(isqrt 5 2) nil *interface*)t(askp '(mod 7 2 1) nil *interface*)t(askp '(rem 3 2 1) nil *interface*)t(askp '(ash 1 1 2) nil *interface*)t(askp '(boole 6 1 1 1) nil *interface*)t(askp '(logbit 2 6) nil *interface*)t(askp '(logand 1 1 1) nil *interface*)t(askp '(logandc1 0 1 1) nil *interface*)t(askp '(logandc2 1 0 1) nil *interface*)t(askp '(logcount 3 2) nil *interface*)t(askp '(logeqv 1 1 -1) nil *interface*)t(askp '(logior 1 1 1) nil *interface*)t(askp '(lognand 0 1 -1) nil *interface*)t(askp '(lognor 0 0 -1) nil *interface*)t(askp '(lognot -4 3) nil *interface*)t(askp '(logorc1 0 0 -1) nil *interface*)t(askp '(logorc2 0 0 -1) nil *interface*)t(askp '(logxor 0 1 1) nil *interface*)t(askp '(zero a) nil *interface*)nil(askp '(logbit 0 6) nil *interface*)nil(askp '(logtest 2 6) nil *interface*)t(askp '(logtest 2 -3) nil *interface*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(rationalnumber 1) nil *interface*)t(askp '(rationalnumber 1/2) nil *interface*)t(askp '(rationalnumber 3.2) nil *interface*)nil(askp '(rationalnumber #c(1 2)) nil *interface*)nil(askp '(rationalnumber a) nil *interface*)nil(askp '(numerator 1/2 1) nil *interface*)t(askp '(denominator 1/2 2) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(realnumber 1) nil *interface*)t(askp '(realnumber 1/2) nil *interface*)t(askp '(realnumber 3.2) nil *interface*)t(askp '(realnumber #c(1 2)) nil *interface*)nil(askp '(realnumber a) nil *interface*)nil(askp '(< 2 3) nil *interface*)t(askp '(< 3 3) nil *interface*)nil(askp '(< a b) nil *interface*)nil(askp '(=< 2 3) nil *interface*)t(askp '(=< 3 2) nil *interface*)nil(askp '(=< a b) nil *interface*)nil(askp '(> 3 2) nil *interface*)t(askp '(> 3 3) nil *interface*)nil(askp '(> a b) nil *interface*)nil(askp '(>= 3 2) nil *interface*)t(askp '(>= 2 3) nil *interface*)nil(askp '(>= a b) nil *interface*)nil(askp '(+ 1 2 3) nil *interface*)t(askp '(- 3 2 1) nil *interface*)t(askp '(* 2 3 6) nil *interface*)t(askp '(/ 4 2 2) nil *interface*)t(askp '(1+ 1 2) nil *interface*)t(askp '(1- 2 1) nil *interface*)t(askp '(abs -1 1) nil *interface*)t(askp '(exp 0 1) nil *interface*)t(askp '(expt 2 3 8) nil *interface*)t(askp '(log 8 2 3) nil *interface*)t(askp '(sqrt 4 2) nil *interface*)t(askp '(max 1 2 3 3) nil *interface*)t(askp '(min 1 2 3 1) nil *interface*)t(askp '(signum 23 1) nil *interface*)t(askp '(acos 1 0) nil *interface*)t(askp '(acosh 1 0) nil *interface*)t(askp '(asin 0 0) nil *interface*)t(askp '(asinh 0 0) nil *interface*)t(askp '(atan 0 0) nil *interface*)t(askp '(atanh 0 0) nil *interface*)t(askp '(cos 0 1) nil *interface*)t(askp '(cosh 0 1) nil *interface*)t(askp '(sin 0 0) nil *interface*)t(askp '(sinh 0 0) nil *interface*)t(askp '(tan 0 0) nil *interface*)t(askp '(tanh 0 0) nil *interface*)t(askp '(ceiling 1.6 2) nil *interface*)t(askp '(floor 1.6 1) nil *interface*)t(askp '(round 1.6 2) nil *interface*)t(askp '(truncate 1.6 1) nil *interface*)t(askp '(rationalize 0.5 1/2) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(complexnumber 1) nil *interface*)nil ;;; t?(askp '(complexnumber 1/2) nil *interface*)nil ;;; t?(askp '(complexnumber 3.2) nil *interface*)nil ;;; t?(askp '(complexnumber #c(1 2)) nil *interface*)t(askp '(complexnumber a) nil *interface*)nil(askp '(conjugate #c(1 1) #c(1 -1)) nil *interface*)t(askp '(complex 1 1 #c(1 1)) nil *interface*)t(askp '(realpart #c(1 2) 1) nil *interface*)t(askp '(imagpart #c(1 2) 2) nil *interface*)t(askp '(cis 0 #c(1 0)) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(number 1) nil *interface*)t(askp '(number 1/2) nil *interface*)t(askp '(number 3.2) nil *interface*)t(askp '(number #c(1 2)) nil *interface*)t(askp '(number a) nil *interface*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(character #\a) nil *interface*)t(askp '(character "a") nil *interface*)nil(askp '(character a) nil *interface*)nil(askp '(alphabetic #\a) nil *interface*)t(askp '(alphabetic #\1) nil *interface*)nil(askp '(uppercase #\A) nil *interface*)t(askp '(uppercase #\a) nil *interface*)nil(askp '(lowercase #\a) nil *interface*)t(askp '(lowercase #\A) nil *interface*)nil(askp '(digit #\1) nil *interface*)t(askp '(digit #\a) nil *interface*)nil(askp '(alphanumeric #\a) nil *interface*)t(askp '(alphanumeric #\1) nil *interface*)t(askp '(alphanumeric #\.) nil *interface*)nil(askp '(chargreater #\b #\a) nil *interface*)t(askp '(chargreater #\a #\b) nil *interface*)nil(askp '(charless #\a #\b) nil *interface*)t(askp '(charless #\b #\a) nil *interface*)nil(askp '(charupcase #\a #\A) nil *interface*)t(askp '(chardowncase #\A #\a) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(string #\a) nil *interface*)nil(askp '(string "a") nil *interface*)t(askp '(string a) nil *interface*)nil(askp '(stringgreater "bbc" "abc") nil *interface*)t(askp '(stringgreater "abc" "bbc") nil *interface*)nil(askp '(stringless "abc" "bbc") nil *interface*)t(askp '(stringless "bbc" "abc") nil *interface*)nil(askp '(substring "bc" "abcd") nil *interface*)t(askp '(substring "abcd" "ab") nil *interface*)nil(askp '(stringlength "abc" 3) nil *interface*)t(askp '(stringelement "abc" 2 #\b) nil *interface*)t(askp '(stringsubseq "abcd" 2 3 "bc") nil *interface*)t(askp '(stringalphanumeric " a bc'd-e " "abcde") nil *interface*)t(askp '(stringappend "abc" "def" "ghi" "abcdefghi") nil *interface*)t(askp '(stringappend "" "") nil *interface*)t(askp '(stringcharpos #\b "abc" 2) nil *interface*)t(askx '?x '(stringcharpos #\d "abc" ?x) nil *interface*)nil(askp '(stringposition "bc" "abcd" 2) nil *interface*)t(askx '?x '(stringposition "cb" "abcd" ?x) nil *interface*)nil(askp '(stringsubstitute #\a #\b "abab" "aaaa") nil *interface*)t(askp '(stringupcase "abc" "ABC") nil *interface*)t(askp '(stringdowncase "ABC" "abc") nil *interface*)t(askp '(stringcapitalize "abc.def" "Abc.Def") nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(charstring #\a "a") nil *interface*)t(askp '(stringify a "A") nil *interface*)t(askp '(symbolize "a" a) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(word 'a) nil *interface*)t(askp '(word a) nil *interface*)nil(askp '(indvar '?x) nil *interface*)t(askp '(indvar a) nil *interface*)nil(askp '(seqvar '@l) nil *interface*)t(askp '(seqvar a) nil *interface*)nil(askp '(variable '?x) nil *interface*)t(askp '(variable '@l) nil *interface*)t(askp '(variable a) nil *interface*)nil(askp '(same a a) nil *interface*)t(askp '(same a b) nil *interface*)nil(askp '(distinct a a) nil *interface*)nil(askp '(distinct a b) nil *interface*)t(askp '(oneof b a b c) nil *interface*)t(askp '(oneof d a b c) nil *interface*)nil(askp '(choose ?x (oneof ?x a b c) a) nil *interface*)t(askp '(choose ?x (oneof ?x a b c) b) nil *interface*)nil(askp '(bagofall ?x (oneof ?x a b c) (listof a b c)) nil *interface*)t(askp '(bagofall ?x (oneof ?x a b c) (listof a)) nil *interface*)nil(askp '(ground a) nil *interface*)t(askp '(ground ?x) nil *interface*)nil(askp '(nonground a) nil *interface*)nil(askp '(nonground ?x) nil *interface*)t(askp '(execute (member 'b '(a b c)) '(b c)) nil *interface*)t(askp '(evaluate (member b (a b c)) (b c)) nil *interface*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Logic;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp 'true nil *interface*)t(askp 'false nil *interface*)nil(askp '(not true) nil *interface*)nil(askp '(not false) nil *interface*)t(askp '(and true true) nil *interface*)t(askp '(and true false) nil *interface*)nil(askp '(and false true) nil *interface*)nil(askp '(and false false) nil *interface*)nil(askp '(or true true) nil *interface*)t(askp '(or true false) nil *interface*)t(askp '(or false true) nil *interface*)t(askp '(or false false) nil *interface*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *myfactserver* ""  '((p a)    (p b)    (p c)    (q b)    (q c)))*(askp '(and (p b) (q b)) nil *interface*)t(askp '(or (p a) (q a)) nil *interface*)t(askx '?x '(and (p ?x) (q ?x)) nil *interface*)b(askx '?x '(or (p ?x) (q ?x)) nil *interface*)a(asks '?x '(and (p ?x) (q ?x)) nil *interface*)(b c)(asks '?x '(or (p ?x) (q ?x)) nil *interface*)(a b c)(define-theory *myfactserver* ""  '((pp a a)    (pp a b)    (qq b c)))*(askp '(and (pp a b) (qq b c)) nil *interface*)t(askx '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) nil *interface*)(a b c)(asks '(?x ?y ?z) '(and (pp ?x ?y) (qq ?y ?z)) nil *interface*)((a b c))(reset)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;