;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; translator.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; resetsystem;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; revise, revisions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *manager*  '((interest  mrg        p)    (interest  mrg        r)))*(definemore *repository*  '((p a b)    (p b b)    (q b b)))*(define-theory *library* ""  '((<= (r ?x ?y) (p ?x ?y) (q ?x ?y))    (<= (s ?x ?y) (p ?x ?y))    (<= (s ?x ?y) (q ?x ?y))    (<= (t ?x ?z) (p ?x ?y) (q ?y ?z))        (<= (pos (r ?x ?y)) (p ?x ?y) (not (neg (p ?x ?y))) (pos (q ?x ?y)))    (<= (pos (r ?x ?y)) (pos (p ?x ?y)) (q ?x ?y) (not (neg (q ?x ?y))))    (<= (pos (r ?x ?y)) (pos (p ?x ?y)) (pos (q ?x ?y)))    (<= (neg (r ?x ?y)) (neg (p ?x ?y)))    (<= (neg (r ?x ?y)) (neg (q ?x ?y)))    (<= (pos (s ?x ?y)) (pos (p ?x ?y)))    (<= (pos (s ?x ?y)) (pos (q ?x ?y)))    (<= (neg (s ?x ?y)) (p ?x ?y) (not (neg (p ?x ?y))) (pos (q ?x ?y)))    (<= (neg (s ?x ?y)) (pos (p ?x ?y)) (q ?x ?y) (not (neg (q ?x ?y))))    (<= (neg (s ?x ?y)) (pos (p ?x ?y)) (pos (q ?x ?y)))    (<= (plus (p ?x ?y)) (plus (r ?x ?y)))    (<= (plus (q ?x ?y)) (plus (r ?x ?y)))    (<= (minus (p ?x ?y)) (minus (r ?x ?y)) (q ?x ?y))    (<= (plus (p ?x ?y)) (plus (s ?x ?y)))    (<= (minus (p ?x ?y)) (minus (s ?x ?y)) (p ?x ?y))    (<= (minus (q ?x ?y)) (minus (s ?x ?y)) (q ?x ?y))    (<= (plus (p ?x b)) (plus (t ?x ?z)))    (<= (plus (q b ?z)) (plus (t ?x ?z)))    (<= (minus (p ?x ?y)) (minus (t ?x ?z)) (q ?y ?z))    (<= (minus (q ?y ?z)) (minus (t ?x ?z)) (p ?x ?y))    (<= (trigger (print (kwote ?x))) (pos (p ?x ?y)) (pos (q ?x ?y)))    (<= (error "P is a function.") (p ?x ?y) (not (neg (p ?x ?y))) (pos (p ?x ?z)) (distinct ?y ?z))    (<= (error "P is a function.") (pos (p ?x ?y)) (pos (p ?x ?z)) (distinct ?y ?z))))*(revisions '(p a c) *mytranslator*)((P A C))(revisions '(not (p b b)) *mytranslator*)((NOT (P B B)))(revisions '(and (not (p b b)) (q a b)) *mytranslator*)((NOT (P B B)) (Q A B))(revisions '(r a c) *mytranslator*)((P A C) (Q A C))(revisions '(s a c) *mytranslator*)((P A C))(revisions '(t a c) *mytranslator*)((P A B) (Q B C))(errors '(p a c) *mytranslator*)("P is a function.")(errors '(and (not (p a b)) (p a c)) *mytranslator*)NIL(materializations '(and (not (p b b)) (q a b)) *mytranslator*)NIL(reactions '(and (p a c) (q a c)) *mytranslator*)((PRINT (KWOTE A)))(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (integer 2)) nil *mytranslator*)t(request '(ask-if (integer 1/2)) nil *mytranslator*)nil(request '(ask-if (integer 3.2)) nil *mytranslator*)nil(request '(ask-if (integer #c(1 2))) nil *mytranslator*)nil(request '(ask-if (integer a)) nil *mytranslator*)nil(request '(ask-if (even 2)) nil *mytranslator*)t(request '(ask-if (even a)) nil *mytranslator*)nil(request '(ask-if (odd 3)) nil *mytranslator*)t(request '(ask-if (odd a)) nil *mytranslator*)nil(request '(ask-if (positive 3)) nil *mytranslator*)t(request '(ask-if (positive a)) nil *mytranslator*)nil(request '(ask-if (negative -1)) nil *mytranslator*)t(request '(ask-if (negative a)) nil *mytranslator*)nil(request '(ask-if (zero 0)) nil *mytranslator*)t(request '(ask-if (gcd 2 6 2)) nil *mytranslator*)t(request '(ask-if (lcm 2 3 6)) nil *mytranslator*)t(request '(ask-if (isqrt 5 2)) nil *mytranslator*)t(request '(ask-if (mod 7 2 1)) nil *mytranslator*)t(request '(ask-if (rem 3 2 1)) nil *mytranslator*)t(request '(ask-if (ash 1 1 2)) nil *mytranslator*)t(request '(ask-if (boole 6 1 1 1)) nil *mytranslator*)t(request '(ask-if (logbit 2 6)) nil *mytranslator*)t(request '(ask-if (logand 1 1 1)) nil *mytranslator*)t(request '(ask-if (logandc1 0 1 1)) nil *mytranslator*)t(request '(ask-if (logandc2 1 0 1)) nil *mytranslator*)t(request '(ask-if (logcount 3 2)) nil *mytranslator*)t(request '(ask-if (logeqv 1 1 -1)) nil *mytranslator*)t(request '(ask-if (logior 1 1 1)) nil *mytranslator*)t(request '(ask-if (lognand 0 1 -1)) nil *mytranslator*)t(request '(ask-if (lognor 0 0 -1)) nil *mytranslator*)t(request '(ask-if (lognot -4 3)) nil *mytranslator*)t(request '(ask-if (logorc1 0 0 -1)) nil *mytranslator*)t(request '(ask-if (logorc2 0 0 -1)) nil *mytranslator*)t(request '(ask-if (logxor 0 1 1)) nil *mytranslator*)t(request '(ask-if (zero a)) nil *mytranslator*)nil(request '(ask-if (logbit 0 6)) nil *mytranslator*)nil(request '(ask-if (logtest 2 6)) nil *mytranslator*)t(request '(ask-if (logtest 2 -3)) nil *mytranslator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (rationalnumber 1)) nil *mytranslator*)t(request '(ask-if (rationalnumber 1/2)) nil *mytranslator*)t(request '(ask-if (rationalnumber 3.2)) nil *mytranslator*)nil(request '(ask-if (rationalnumber #c(1 2))) nil *mytranslator*)nil(request '(ask-if (rationalnumber a)) nil *mytranslator*)nil(request '(ask-if (numerator 1/2 1)) nil *mytranslator*)t(request '(ask-if (denominator 1/2 2)) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (realnumber 1)) nil *mytranslator*)t(request '(ask-if (realnumber 1/2)) nil *mytranslator*)t(request '(ask-if (realnumber 3.2)) nil *mytranslator*)t(request '(ask-if (realnumber #c(1 2))) nil *mytranslator*)nil(request '(ask-if (realnumber a)) nil *mytranslator*)nil(request '(ask-if (< 2 3)) nil *mytranslator*)t(request '(ask-if (< 3 3)) nil *mytranslator*)nil(request '(ask-if (< a b)) nil *mytranslator*)nil(request '(ask-if (=< 2 3)) nil *mytranslator*)t(request '(ask-if (=< 3 2)) nil *mytranslator*)nil(request '(ask-if (=< a b)) nil *mytranslator*)nil(request '(ask-if (> 3 2)) nil *mytranslator*)t(request '(ask-if (> 3 3)) nil *mytranslator*)nil(request '(ask-if (> a b)) nil *mytranslator*)nil(request '(ask-if (>= 3 2)) nil *mytranslator*)t(request '(ask-if (>= 2 3)) nil *mytranslator*)nil(request '(ask-if (>= a b)) nil *mytranslator*)nil(request '(ask-if (+ 1 2 3)) nil *mytranslator*)t(request '(ask-if (- 3 2 1)) nil *mytranslator*)t(request '(ask-if (* 2 3 6)) nil *mytranslator*)t(request '(ask-if (/ 4 2 2)) nil *mytranslator*)t(request '(ask-if (1+ 1 2)) nil *mytranslator*)t(request '(ask-if (1- 2 1)) nil *mytranslator*)t(request '(ask-if (abs -1 1)) nil *mytranslator*)t(request '(ask-if (exp 0 1)) nil *mytranslator*)t(request '(ask-if (expt 2 3 8)) nil *mytranslator*)t(request '(ask-if (log 8 2 3)) nil *mytranslator*)t(request '(ask-if (sqrt 4 2)) nil *mytranslator*)t(request '(ask-if (max 1 2 3 3)) nil *mytranslator*)t(request '(ask-if (min 1 2 3 1)) nil *mytranslator*)t(request '(ask-if (signum 23 1)) nil *mytranslator*)t(request '(ask-if (acos 1 0)) nil *mytranslator*)t(request '(ask-if (acosh 1 0)) nil *mytranslator*)t(request '(ask-if (asin 0 0)) nil *mytranslator*)t(request '(ask-if (asinh 0 0)) nil *mytranslator*)t(request '(ask-if (atan 0 0)) nil *mytranslator*)t(request '(ask-if (atanh 0 0)) nil *mytranslator*)t(request '(ask-if (cos 0 1)) nil *mytranslator*)t(request '(ask-if (cosh 0 1)) nil *mytranslator*)t(request '(ask-if (sin 0 0)) nil *mytranslator*)t(request '(ask-if (sinh 0 0)) nil *mytranslator*)t(request '(ask-if (tan 0 0)) nil *mytranslator*)t(request '(ask-if (tanh 0 0)) nil *mytranslator*)t(request '(ask-if (ceiling 1.6 2)) nil *mytranslator*)t(request '(ask-if (floor 1.6 1)) nil *mytranslator*)t(request '(ask-if (round 1.6 2)) nil *mytranslator*)t(request '(ask-if (truncate 1.6 1)) nil *mytranslator*)t(request '(ask-if (rationalize 0.5 1/2)) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (complexnumber 1)) nil *mytranslator*)nil ;;; t?(request '(ask-if (complexnumber 1/2)) nil *mytranslator*)nil ;;; t?(request '(ask-if (complexnumber 3.2)) nil *mytranslator*)nil ;;; t?(request '(ask-if (complexnumber #c(1 2))) nil *mytranslator*)t(request '(ask-if (complexnumber a)) nil *mytranslator*)nil(request '(ask-if (conjugate #c(1 1) #c(1 -1))) nil *mytranslator*)t(request '(ask-if (complex 1 1 #c(1 1))) nil *mytranslator*)t(request '(ask-if (realpart #c(1 2) 1)) nil *mytranslator*)t(request '(ask-if (imagpart #c(1 2) 2)) nil *mytranslator*)t(request '(ask-if (cis 0 #c(1 0))) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (number 1)) nil *mytranslator*)t(request '(ask-if (number 1/2)) nil *mytranslator*)t(request '(ask-if (number 3.2)) nil *mytranslator*)t(request '(ask-if (number #c(1 2))) nil *mytranslator*)t(request '(ask-if (number a)) nil *mytranslator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (character #\a)) nil *mytranslator*)t(request '(ask-if (character "a")) nil *mytranslator*)nil(request '(ask-if (character a)) nil *mytranslator*)nil(request '(ask-if (alphabetic #\a)) nil *mytranslator*)t(request '(ask-if (alphabetic #\1)) nil *mytranslator*)nil(request '(ask-if (uppercase #\A)) nil *mytranslator*)t(request '(ask-if (uppercase #\a)) nil *mytranslator*)nil(request '(ask-if (lowercase #\a)) nil *mytranslator*)t(request '(ask-if (lowercase #\A)) nil *mytranslator*)nil(request '(ask-if (digit #\1)) nil *mytranslator*)t(request '(ask-if (digit #\a)) nil *mytranslator*)nil(request '(ask-if (alphanumeric #\a)) nil *mytranslator*)t(request '(ask-if (alphanumeric #\1)) nil *mytranslator*)t(request '(ask-if (alphanumeric #\.)) nil *mytranslator*)nil(request '(ask-if (chargreater #\b #\a)) nil *mytranslator*)t(request '(ask-if (chargreater #\a #\b)) nil *mytranslator*)nil(request '(ask-if (charless #\a #\b)) nil *mytranslator*)t(request '(ask-if (charless #\b #\a)) nil *mytranslator*)nil(request '(ask-if (charupcase #\a #\A)) nil *mytranslator*)t(request '(ask-if (chardowncase #\A #\a)) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (string #\a)) nil *mytranslator*)nil(request '(ask-if (string "a")) nil *mytranslator*)t(request '(ask-if (string a)) nil *mytranslator*)nil(request '(ask-if (stringgreater "bbc" "abc")) nil *mytranslator*)t(request '(ask-if (stringgreater "abc" "bbc")) nil *mytranslator*)nil(request '(ask-if (stringless "abc" "bbc")) nil *mytranslator*)t(request '(ask-if (stringless "bbc" "abc")) nil *mytranslator*)nil(request '(ask-if (substring "bc" "abcd")) nil *mytranslator*)t(request '(ask-if (substring "abcd" "ab")) nil *mytranslator*)nil(request '(ask-if (stringlength "abc" 3)) nil *mytranslator*)t(request '(ask-if (stringelement "abc" 2 #\b)) nil *mytranslator*)t(request '(ask-if (stringsubseq "abcd" 2 3 "bc")) nil *mytranslator*)t(request '(ask-if (stringalphanumeric " a bc'd-e " "abcde")) nil *mytranslator*)t(request '(ask-if (stringappend "abc" "def" "ghi" "abcdefghi")) nil *mytranslator*)t(request '(ask-if (stringappend "" "")) nil *mytranslator*)t(request '(ask-if (stringcharpos #\b "abc" 2)) nil *mytranslator*)t(request '(ask-if (stringcharpos #\d "abc" ?x)) nil *mytranslator*)nil(request '(ask-if (stringposition "bc" "abcd" 2)) nil *mytranslator*)t(request '(ask-if (stringposition "cb" "abcd" ?x)) nil *mytranslator*)nil(request '(ask-if (stringsubstitute #\a #\b "abab" "aaaa")) nil *mytranslator*)t(request '(ask-if (stringupcase "abc" "ABC")) nil *mytranslator*)t(request '(ask-if (stringdowncase "ABC" "abc")) nil *mytranslator*)t(request '(ask-if (stringcapitalize "abc.def" "Abc.Def")) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (charstring #\a "a")) nil *mytranslator*)t(request '(ask-if (stringify a "A")) nil *mytranslator*)t(request '(ask-if (symbolize "a" a)) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (same a a)) nil *mytranslator*)t(request '(ask-if (same a b)) nil *mytranslator*)nil(request '(ask-if (distinct a a)) nil *mytranslator*)nil(request '(ask-if (distinct a b)) nil *mytranslator*)t(request '(ask-if (word 'a)) nil *mytranslator*)t(request '(ask-if (word a)) nil *mytranslator*)nil(request '(ask-if (indvar '?x)) nil *mytranslator*)t(request '(ask-if (indvar a)) nil *mytranslator*)nil(request '(ask-if (seqvar '@l)) nil *mytranslator*)t(request '(ask-if (seqvar a)) nil *mytranslator*)nil(request '(ask-if (variable '?x)) nil *mytranslator*)t(request '(ask-if (variable '@l)) nil *mytranslator*)t(request '(ask-if (variable a)) nil *mytranslator*)nil(request '(ask-if (execute (member 'b '(a b c)) '(b c))) nil *mytranslator*)t(request '(ask-if (evaluate (member b (a b c)) (b c))) nil *mytranslator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Logic;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if true) nil *mytranslator*)t(request '(ask-if false) nil *mytranslator*)nil(request '(ask-if (not true)) nil *mytranslator*)nil(request '(ask-if (not false)) nil *mytranslator*)t(request '(ask-if (and true true)) nil *mytranslator*)t(request '(ask-if (and true false)) nil *mytranslator*)nil(request '(ask-if (and false true)) nil *mytranslator*)nil(request '(ask-if (and false false)) nil *mytranslator*)nil(request '(ask-if (or true true)) nil *mytranslator*)t(request '(ask-if (or true false)) nil *mytranslator*)t(request '(ask-if (or false true)) nil *mytranslator*)t(request '(ask-if (or false false)) nil *mytranslator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Translation;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *library*  '((<= (r ?x) (p ?x) (q ?x))))*(define-theory *repository* ""  '((p a)    (p b)    (p c)    (q b)    (q c)))*(request '(ask-one ?x (and (p ?x) (q ?x))) nil *mytranslator*)b(request '(ask-all ?x (and (p ?x) (q ?x))) nil *mytranslator*)(b c)(request '(ask-one ?x (or (p ?x) (q ?x))) nil *mytranslator*)a(request '(ask-all ?x (or (p ?x) (q ?x))) nil *mytranslator*)(a b c)(request '(ask-one ?x (r ?x)) nil *mytranslator*)b(request '(ask-all ?x (r ?x)) nil *mytranslator*)(b c)(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; resetsystem;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;