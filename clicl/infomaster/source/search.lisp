;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (c) Copyright 1993-1999 by Mergent Systems.  All rights reserved.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(eval-when (compile load eval)
  (proclaim '(special *home*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Search
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'search)) postlines)
  (format s "<HTML>
<HEAD>
<TITLE>Search</TITLE>
</HEAD>
<FRAMESET COLS=\"*\" ROWS=\"76,*,36\" NAME=\"outer\" FRAMESPACING=\"0\" FRAMEBORDER=\"0\">
<FRAME SRC=\"header?\" NAME=\"header\" SCROLLING=\"no\" MARGINHEIGHT=\"0\" MARGINWIDTH=\"0\">
<FRAMESET COLS=\"190,*,190\" ROWS=\"*\" NAME=\"inner\" FRAMESPACING=\"0\" FRAMEBORDER=\"2\"> 
<FRAME SRC=\"tree?\" NAME=\"tree\" SCROLLING=\"auto\">
<FRAME SRC=\"~A\" NAME=\"query\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/empty.html\" NAME=\"result\" SCROLLING=\"auto\">
</FRAMESET> 
<FRAME SRC=\"footer?\" NAME=\"footer\" SCROLLING=\"no\" MARGINHEIGHT=\"0\" MARGINWIDTH=\"0\">
</FRAMESET>
</HTML>"
          (if postlines (stringappend "find?Class=" (cdar postlines))
              (stringappend *home* "pages/search.html"))
          *home*))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Create
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'new)) postlines)
  (declare (ignore postlines))
  (format s "<HTML>
<HEAD>
<TITLE>Create</TITLE>
</HEAD>
<FRAMESET ROWS=\"76,*,44\" BORDER=\"0\" COLS=\"100%\" FRAMESPACING=\"0\" FRAMEBORDER=\"no\">
<FRAME SRC=\"header?\" NAME=\"header\" SCROLLING=\"no\">
<FRAMESET COLS=\"20%,60%,20%\" ROWS=\"100%\" BORDER=\"0\" FRAMESPACING=\"0\" FRAMEBORDER=\"no\"> 
<FRAME SRC=\"createclasses?\" NAME=\"tree\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/create.html\" NAME=\"query\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/empty.html\" NAME=\"result\" SCROLLING=\"auto\">
</FRAMESET> 
<FRAME SRC=\"footer?\" NAME=\"footer\" SCROLLING=\"no\">
</FRAMESET>
</HTML>" *home* *home*))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Lookup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun lookup-top (s)
  (format s "<HTML>
<HEAD>
<TITLE>Lookup</TITLE>
</HEAD>
<FRAMESET ROWS=\"76,*,44\" BORDER=\"0\" COLS=\"100%\" FRAMESPACING=\"0\" FRAMEBORDER=\"no\">
<FRAME SRC=\"header?\" NAME=\"header\" SCROLLING=\"no\">
<FRAMESET COLS=\"20%,60%,20%\" ROWS=\"100%\" BORDER=\"0\" FRAMESPACING=\"0\" FRAMEBORDER=\"no\"> 
<FRAME SRC=\"relations?\" NAME=\"tree\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/table.html\" NAME=\"query\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/empty.html\" NAME=\"result\" SCROLLING=\"auto\">
</FRAMESET> 
<FRAME SRC=\"footer?\" NAME=\"footer\" SCROLLING=\"no\">
</FRAMESET>
</HTML>" *home* *home*))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Tree
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'treetop)) postlines)
  (cond ((null (cdr postlines)) (output-taxonomy s nil))
        (t (reissue-taxonomy s postlines nil))))

(defun output-taxonomy (s multipane)
  (let (tree)
    (setq tree (cons 'top (find-frames *gui*)))
    (output-prolog s 200)
    (unless multipane (output-header s "Select Class"))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (if multipane
      (format s "<FORM ACTION=TREE? METHOD=POST NAME=formtree>")
      (format s "<FORM ACTION=TREETOP? METHOD=POST NAME=formtree>"))
    (format-hidden s "Tree" tree)
    (dolist (item (cdr tree))
      (format s "<DT>")
      (output-tree s item multipane))
    (format s "</FORM>")
    (unless multipane (output-footer s))
    (format s "</BODY>")
    (crlf s)))

(defun reissue-taxonomy (s postlines multipane)
  (let (tree command)
    (setq tree (read-user-string (cdr (pop postlines))))
    (setq command (caar postlines))
    (setq command (read-user-string (subseq command 0 (- (length command) 2))))
    (setq tree (toggle command tree))
    (output-prolog s 200)
    (unless multipane (output-header s "Select Class"))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (if multipane
      (format s "<FORM ACTION=TREE? METHOD=POST NAME=formtree>")
      (format s "<FORM ACTION=TREETOP? METHOD=POST NAME=formtree>"))
    (format-hidden s "Tree" tree)
    (dolist (item (cdr tree))
      (format s "<DT>")
      (output-tree s item multipane))
    (format s "</FORM>")
    (format s "</BODY>")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Create
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defparameter *cells* 0)

(defparameter *buttons* 0)

(defun process-create (s postlines)
  (let (class command (*cells* *cells*))
    (setq class (read-user-string (cdar postlines)))
    (cond ((findp `(nocommand ,*gui* inspect) *interface*)
           (process s 'creator postlines))
          ((null (cdr postlines)) (output-create s class))
          ((setq command (getf-post "Command" postlines))
           (cond ((string= command "Convert to ACL")
                  (create-acl s class postlines))
                 ((string= command "Create Structure")
                  (process-create-creator s postlines))
                 (t (add-new-object s class postlines))))
          ((setq command (getf-revname postlines))
           (cond ((startstringp "Create" command)
                  (output-create s (read-value-string (subseq command 7))))
                 (t (output-frame s (subseq command 5)))))
          (t (reissue-create s postlines)))))

(defun process-create-creator (s postlines)
  (let (object class structure (*buttons* 0) (*cells* 0))
    (setq class (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq object (read-value-string (cdr (pop postlines))))
    (do ((style) (slot) (value) (nl))
        ((or (null postlines) (not (string= (caar postlines) "Start")))
         (setq structure (cons object (cons class (nreverse nl)))))
        (pop postlines)
        (setq style (read-value-string (cdr (pop postlines))))
        (setq slot (read-value-string (cdr (pop postlines))))
        (setq postlines (popvals "Reference" postlines))
        (do ()
            ((string= (caar postlines) "End") (pop postlines))
            (setq value (cdr (pop postlines)))
            (cond ((equal value "") (setq nl (cons `(,slot) nl)))
                  ((find style '(stringfield text textarea password))
                   (setq nl (cons `(,slot ,value) nl)))
                  (t (setq value (readas value (find-range slot)))
                     (setq nl (cons `(,slot ,value) nl))))))
    (output-creator-revision s object class structure)))


(defun output-create (s class)
  (let (page)
    (setq page (find-createpage class))
    (cond ((not page) (old-create s class))
          (t (new-create s page)))))

(defun old-create (s class)
  (let (handle)
    (setq handle (newinstance class))
    (output-prolog s 200)
    (output-header s "Create ~A" (prettify class))
    (format s "<FORM ACTION=CREATE? METHOD=POST>" class)
    (format s "Create ")
    (format-hidden s "Class" (stringify class))
    (format-hidden s "Predicate" (stringify (find-predicate class)))
    (cond ((findp `(nomodify ,class handle) *interface*)
           (format-hidden s "Object" (stringify handle))
           (format s "<B>~A</B>" (prettify handle)))
          (t (format-text s "Object" (stringify handle) 30)))
    (format s " as ~A <B>" (article class))
    (output-classlink s class)
    (format s "</B>.<BR>")
    (make-create-buttons s class)
    (format s "</FORM>")
    (output-footer s)))

(defun old-create (s class)
  (let (handle)
    (setq handle (intern (strappend (symbol-name class) "." (princ-to-string (get-universal-time)))))
    (output-prolog s 200)
    (output-header s "Create ~A" (prettify class))
    (format s "<FORM ACTION=CREATE? METHOD=POST>" class)
    (format s "Create ")
    (format-hidden s "Class" (stringify class))
    (format-hidden s "Predicate" (stringify (find-predicate class)))
    (cond ((findp `(nomodify ,class handle) *interface*)
           (format-hidden s "Object" (stringify handle))
           (format s "<B>~A</B>" (prettify handle)))
          (t (format-text s "Object" (stringify handle) 30)))
    (format s " as ~A <B>" (article class))
    (output-classlink s class)
    (format s "</B> with the following profile.<BR>")
    (format s "<TABLE>")
    (dolist (slot (createable-slots class)) (make-create-cell s slot))
    (format s "</TABLE>")
    (format s "<BR>")
    (make-create-buttons s class)
    (format s "</FORM>")
    (output-footer s)))

(defun make-create-buttons (s class)
  (format s "<TABLE WIDTH=100%>")
  (format s "<TR><TD WIDTH=50% VALIGN=TOP>")
  (format-button s "Command" "Create")
    (format s " this new ~A" (prettify class))
  (format s "</TD><TD>")
  (unless (findp `(nocommand ,*gui* creator) *interface*)
    (format-button s "Command" "Create Structure"))
  (format s "<BR>")
  (unless (findp `(nocommand ,*gui* acl) *interface*)
    (format-button s "Command" "Convert to ACL"))
  (format s "</TD></TR>")
  (format s "</TABLE>")
  (format s "</FORM>"))

(defun new-create (s page)
  (output-prolog s 200)
  (format s (cleanse page)))

(defun create-acl (s class postlines)
  (let (predicate handle untells tells)
    (pop postlines)
    (setq predicate (read-value-string (cdr (pop postlines))))
    (setq handle (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (untells tells) (get-edits handle postlines))
    (setq untells (mapcar #'(lambda (x) `(unprovable ,x)) untells))
    (setq tells (cons (makpredicate predicate handle class) tells))
    (generate-acl s `(tell ,(maksand (nconc untells tells))))))


(defun add-new-object (s class postlines)
  (let (predicate handle facts errors result page)
    (pop postlines)
    (setq predicate (read-value-string (cdr (pop postlines))))
    (setq handle (getf-post "Object" postlines))
    (if (and handle (not (string= handle "")))
	(setq handle (string-upcase (substitute #\- #\space handle)))
        (setq handle (format nil "~A.~D" class (get-universal-time))))
    (setq handle (read-value-string handle))
    (setq postlines (remove "Object" postlines :key #'first :test #'string=))
    (when (request `(ask-if ,(makisa handle '?x *gui*)) *interface* *agent*)
      (http-problem s
        (format nil "Error creating new ~A. <A HREF=\"INSPECT?Object=~A\">~A</A> already exists!"
                (stringify class) (addressify handle) (prettify handle)))
      (return-from add-new-object))
    (setq facts (get-content handle class predicate postlines))
    (cond ((setq errors (errors facts))
           (do ((l errors (cdr l)) (message "<B>Error(s):</B><BR>"))
               ((null l) (http-problem s message))
               (setq message (strappend message "<BR><BR>" (car l)))))
          ((stringp (setq result (prorequest `(tell ,(maksand facts)))))
           (http-problem s result))
          ((setq page (find-modifypage class))
           (save-viewable *client* handle)
           (save-editable *client* handle)
           (new-modify s handle page))
          (t (save-viewable *client* handle)
             (save-editable *client* handle)
             (output-prolog s 200)
             (output-header s "Modify ~A" (prettify handle))
             (format-message s "New object succesful.  Use the following form to make changes.")
             (editobj s class predicate handle)
             (output-footer s)))))

(defun get-content (handle class predicate postlines)
  (do ((style) (slot) (value) (nl))
      ((or (null postlines) (not (string= (caar postlines) "Start")))
       (cons (makpredicate predicate handle class) (nreverse nl)))
      (pop postlines)
      (setq style (read-value-string (cdr (pop postlines))))
      (setq slot (read-value-string (cdr (pop postlines))))
      (setq postlines (popvals "Reference" postlines))
      (do ()
          ((string= (caar postlines) "End") (pop postlines))
          (setq value (cdr (pop postlines)))
          (cond ((equal value ""))
                ((find style '(stringfield text textarea password))
                 (setq nl (cons `(,slot ,handle ,value) nl)))
                (t (setq value (readas value (find-range slot)))
                   (setq nl (cons `(,slot ,handle ,value) nl)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Find
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'find)) postlines)
  (let (classname (*cells* *cells*) (*var-count* 0))
    (setq classname (cdar postlines))
    (cond ((null (cdr postlines)) (process-find-output s classname))
          ((cdr (assoc "Admin" postlines :test #'equalp))
           (admin-find s classname postlines))
          ((getf-revname postlines) (process-find-reissue s classname postlines))
          ((getf-expname postlines) (process-find-expand s postlines))
          (t (enumerate-find s postlines)))))

(defun process-find-output (s classname)
  (let (class page)
    (setq class (read-value-string classname))
    (setq page (find-findpage class))
    (cond ((not page) (old-find s classname))
          (t (new-find s page)))))

(defun admin-find (s classname *postlines*)
  (let (class predicate selection aspect kif command)
    (setq class (read-value-string classname))
    (setq predicate (find-predicate class))
    (setq selection (find-selection predicate))
    (setq aspect (first-aspect *postlines*))
    (setq kif (convert-frame))
    (setq command (read-user-string (cdr (assoc "Admin" *postlines* :test #'equalp))))
    (cond ((and selection (eq command 'save))
           (dolist (rule (rules `(<= ,(list selection aspect) ,kif)))
             (request `(tell ,rule) *client* *gui*))
           (output-message s "Selection saved."))
          ((and selection (eq command 'drop))
           (dolist (rule (rules `(<= ,(list selection aspect) ,kif)))
             (request `(untell ,rule) *client* *gui*))
           (output-message s "Selection dropped."))
          (t (output-message s "No selection relation specified.")))))

(defun process-find-reissue (s classname postlines)
  (let (class revname)
    (setq class (read-value-string classname))
    (setq revname (getf-revname postlines))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<P>Find every <B>")
    (output-classlink s class)
    (format s "</B> that satisfies the following criteria.")
    (format s "<FORM ACTION=FIND? METHOD=POST NAME=form1 TARGET=result>" (addressify class))
    (setq postlines (reissue-find-subframe s revname postlines))
    (format s "</FORM>")
    (format s "</BODY>")))

(defun process-find-expand (s postlines)
  (let (class revname)
    (setq class (read-value-string (cdar postlines)))
    (setq revname (getf-expname postlines))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<P>Find every <B>")
    (output-classlink s class)
    (format s "</B> that satisfies the following criteria.")
    (format s "<FORM ACTION=FIND? METHOD=POST NAME=form1 TARGET=result>" (addressify class))
    (process-find-expand-subframe s revname postlines)
    (output-find-commands s)
    (format s "</FORM>")
    (format s "</BODY>")))


(defun old-find (s classname)
  (let ((class (read-value-string classname))
        (aspectname (concatenate 'string "?" classname)))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\" onLoad='window.document.form1.submit()'>")
    ;(format s "<P>Find every <B>")
    ;(output-classlink s class)
    ;(format s "</B> that satisfies the following criteria.")
    (format s "<FORM ACTION=FIND? METHOD=POST NAME=form1 TARGET=result>" (addressify class))
    (output-finder s aspectname class)
    (output-find-commands s)
    (format s "</FORM>")
    (format s "</BODY>")))

(defun new-find (s page)
  (output-prolog s 200)
  (format s (cleanse page)))

(defun output-message (s message)
  (output-prolog s 200)
  (format s "<HTML><BODY BGCOLOR=WHITE>")
  (format s message)
  (format s "<BODY></HTML>"))

(defun find-selection (class)
  (findx '?x `(selection ,class ?x) *interface*))

(defun find-findpage (class)
  (findx '?x `(findpage ,class ?x) *interface*))

(defun output-find-commands (s)
  (format s "<BR>")
  (format-hidden s "== Commands ==" "")
  (format s "<TABLE WIDTH=100%>")
  (format s "<TR><TD WIDTH=50% VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* display) *interface*)
    (format-button s "Foobar" "Display")
    (format s " all answers for query"))
  (format s "</TD><TD>")
  (unless (findp `(nocommand ,*gui* save) *interface*)
    (format-button s "Admin" "Save")
    (format s "</TD></TR><TR><TD></TD><TD>")
    (format-button s "Admin" "Drop"))
  (format s "</TD></TR></TABLE>~%"))


(defun output-finder (s aspectname class)
  (format-hidden s "Class" (stringify class))
  (format-hidden s "Predicate" (stringify (find-predicate class)))
  (format-hidden s "Aspect" (htmlify aspectname))
  (format s "<TABLE>")
  (dolist (slot (queryable-slots class)) (output-find-cell s slot))
  (format s "</TABLE>")
  (format-hidden s "Concept-End" ""))

(defun output-find-cell (s slot)
  (let ((style (findx '?t `(searchstyle ,slot ?t) *interface*)))
    (cond ((eq style 'multichoicelist) (output-find-menu-cell s slot))
          ((eq style 'dropdownlist) (output-find-selector-cell s slot))
          ((eq style 'progressivehierarchicalchoicelist) (output-find-multiselector-cell s slot))
          ((eq style 'checkbox) (output-find-checkbox-cell s slot))
          ((eq style 'radiobutton) (output-find-radiobutton-cell s slot))
          ((eq style 'interval) (output-find-interval-cell s slot))
          ((eq style 'intermenu) (output-find-intermenu-cell s slot))
          ((eq style 'stringfield) (output-find-stringfield-cell s slot))
          ((eq style 'text) (output-find-text-cell s slot))
          ((eq style 'textarea) (output-find-text-cell s slot))
          ((eq style 'password))
          ((eq style 'message) (output-find-message-cell s slot))
          ((eq style 'subframe) (output-find-subframe-cell s slot))
          (t (output-find-typein-cell s slot)))))

(defun output-find-menu-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "MultiChoiceList")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-find-button s slot *cells*)
  (format s "</TD><TD>")
  (output-find-menu s *cells* (find-values slot) (find-searchdefaults slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-selector-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "DropdownList")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-find-button s slot *cells*)
  (format s "</TD><TD>")
  (output-find-selector s *cells* (find-possibilities slot) (find-searchdefault slot))
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-multiselector-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Multiselector")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-find-button s slot *cells*)
  (format s "</TD><TD>")
  (output-find-selector s *cells* (cons 'unknown (find-values slot)) 'unknown)
  (output-expand-button s *cells*)
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-checkbox-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Checkbox")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-find-button s slot *cells*)
  (format s "</TD><TD>")
  (output-checkboxes s *cells* (find-options slot) (find-inputs slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-radiobutton-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Radiobutton")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-find-button s slot *cells*)
  (format s "</TD><TD>")
  (output-find-radiobuttons s *cells* (find-options slot) (find-input slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-interval-cell (s slot)
  (let ((input (find-input-string slot)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Interval")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD></TD><TD>")
    (format s "At least ")
    (format-text s "Min" input 10)
    (format s " and at most ")
    (format-text s "Max" input 10)
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-find-intermenu-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Intermenu")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD></TD><TD>")
  (format s "At least ")
  (output-selector s 'min (find-alternatives slot) (find-input slot))
  (format s " and at most ")
  (output-selector s 'max (find-alternatives slot) (find-input slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-stringfield-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Stringfield")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (format s "</TD><TD>")
  (format-find-text s (stringify *cells*) (find-input-string slot) 30)
  (format-checkbox s "Match" "Exact?" nil)
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-text-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD></TD><TD>")
  (format-text s (stringify *cells*) (find-input-string slot) 21)
  (format s "<SELECT NAME=\"Match\">")
  (format s "<OPTION SELECTED>All Words")
  (format s "<OPTION>Any Word")
  (format s "<OPTION>Phrase")
  (format s "</SELECT>")
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-message-cell (s slot)
  (let ((subframe (subframep slot)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Message")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-find-button s slot *cells*)
    (format s "</TD><TD>")
    (if subframe (format s "Press button to specify criteria.")
        (format s "Cannot specify values for this attribute."))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-find-subframe-cell (s slot)
  (let* ((class (or (findx '?x `(range ,slot ?x) *interface*) 'thing))
         (aspectname (symbol-name (gentemp "?"))))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-unfind-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>~%")
    (format s "~A " (article class))
    (format s "~A that satisfies the following criteria<BR>" (string-downcase (princ-to-string class)))
    (output-finder s aspectname class)
    (format s "</TD></TR></TABLE>")
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-find-typein-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
;  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (format-text s (stringify *cells*) (find-input-string slot) 40)
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-find-button (s slot n)
  (when (subframep slot)
    (format s "<INPUT TYPE=SUBMIT NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.target=\"query\"'>"
            (strappend "Command." (stringify n)) "  ")))

(defun output-unfind-button (s n)
  (format s "<INPUT TYPE=SUBMIT NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.target=\"query\"'>"
          (strappend "Command." (stringify n)) "  "))

(defun output-expand-button (s n)
  (format s "<INPUT TYPE=SUBMIT NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.target=\"query\"'>"
          (strappend "Expand." (stringify n)) "Expand"))


(defun enumerate-find (s *postlines*)
  (let (class aspect kif (*var-count* 0))
    (setq class (read-value-string (cdar *postlines*)))
    (setq aspect (first-aspect *postlines*))
    (setq kif (convert-frame))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (enumerate-items s class aspect kif 1 20)
    (format s "</BODY>")))

(defun enumerate-items (s class aspect kif start end)
  (let (items count)
    (setq items (request `(ask-all ,aspect ,kif) *client* *agent*))
    (setq count (length items))
    (when (< start 1) (setq start 1))
    (cond ((< end 1) (setq end (min count 20)))
          ((> end count) (setq end count)))
    (when (< end start) (setq end start))
    (cond ((and (= start 1) (= end count)))
          ((> start count) (setq items nil))
          (t (setq items (subseq items (1- start) end))))
    (format s "<FORM ACTION=COMPARE? METHOD=POST TARGET='_top'>" (addressify class))
    (format-hidden s "Class" (stringify class))
    (format-hidden s "Aspect" (stringify aspect))
    (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
    (format-hidden s "Start" (stringify start))
    (format-hidden s "Solutions" (stringify end))
    (cond ((= count 1) (format s "<CENTER><B>1 item</B></CENTER><P>"))
          ((> count 20)
           (format s "<P><CENTER>")
           (format-button s "Command" "Compare")
           (format s "</CENTER></P>")
           (format s "<CENTER><B>20 of ~A items</B></CENTER><P>" count))
          (t (format s "<P><CENTER>")
             (format-button s "Command" "Compare")
             (format s "</CENTER></P>")
             (format s "<CENTER><B>~A items</B></CENTER><P>" count)))
    (format s "</FORM>")
    (do ((l items (cdr l)) (i 1 (1+ i)))
        ((or (null l) (> i 20)))
        ;(unless nobasket (format-checkbox s (prettify (car l)) "" t))
        (output-item s (car l)) ;(output-value s (car l))
        (format s "<BR>")
        (crlf s))
    (when (> count 20)
      (format s "<FORM ACTION=COMPARE? METHOD=POST>" (addressify class))
      (format-hidden s "Class" (stringify class))
      (format-hidden s "Aspect" (stringify aspect))
      (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
      (format-hidden s "Start" (stringify start))
      (format-hidden s "Solutions" (stringify end))
      (format s "<P><CENTER>")
      (format-button s "Command" " More ")
      (format s "</CENTER></P>")
      (format s "</FORM>"))))


(defun process-find-expand-subframe (s revname postlines)
  (let ((classname (cdr (pop postlines)))
        (predicatename (cdr (pop postlines)))
        (aspectname (cdr (pop postlines))))
    (format-hidden s "Class" (htmlify classname))
    (format-hidden s "Predicate" (htmlify predicatename))
    (format-hidden s "Aspect" (htmlify aspectname))
    (format s "<TABLE>")
    (do ()
        ((or (null postlines) (string= (caar postlines) "Concept-End"))
         (pop postlines))
        (setq postlines (process-find-expand-cell s revname postlines)))
    (format s "</TABLE>")
    (format-hidden s "Concept-End" "")
    postlines))

(defun process-find-expand-cell (s revname postlines)
  (let ((cellname (cdar postlines)) (type (cdadr postlines)))
    (cond ((string= type "Typein")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-typein-cell s postlines)))
          ((string= type "MultiChoiceList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-menu-cell s postlines)))
          ((string= type "DropdownList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-selector-cell s postlines)))
          ((string= type "Multiselector")
           (if (string= cellname revname)
               (progn (process-find-expand-multiselector-cell s postlines)
                      (reissue-other postlines))
               (reissue-find-multiselector-cell s postlines)))
          ((string= type "Checkbox")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-checkbox-cell s postlines)))
          ((string= type "Radiobutton")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-radiobutton-cell s postlines)))
          ((string= type "Interval") (reissue-interval-cell s postlines))
          ((string= type "Intermenu") (reissue-intermenu-cell s postlines))
          ((string= type "Stringfield") (reissue-stringfield-cell s postlines))
          ((string= type "Text") (reissue-text-cell s postlines))
          ((string= type "Textarea") (reissue-text-cell s postlines))
          ((string= type "Message")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-message-cell s postlines)))
          ((string= type "Subframe")
           (if (string= cellname revname)
               (progn (output-query-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (expand-subframe-cell s revname postlines)))
          (t (reissue-other postlines)))))

(defun process-find-expand-multiselector-cell (s postlines)
  (let (name slot references value options)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (read-value-string (cdr (pop postlines))))
    (when (and postlines (not (string= (caar postlines) name))) (pop postlines))    
    (cond (value (setq references (newrefs value references))
                 (setq options (find-components slot value references)))
          (t (setq references nil options (find-options slot))))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-find-button s slot *cells*)
    (format s "</TD><TD>")
    (output-find-selector s *cells* (nconc references (cons 'unknown options)) 'unknown)
    (output-expand-button s *cells*)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>~%")
    (format-hidden s "Cell-End" "")
    postlines))

(defun process-find-expand-subframe-cell (s revname postlines)
  (let ((slot) (class))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq class (cdar postlines))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-close-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>")
    (format s "an object of type ~A<BR>" (string-downcase class))
    (setq postlines (expand-subframe s revname postlines))
    (format s "</TD></TR></TABLE>")
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    (pop postlines)
    postlines))


(defun reissue-find-subframe (s revname postlines)
  (let (classname predicatename aspectname)
    (setq classname (cdr (pop postlines)))
    (setq predicatename (cdr (pop postlines)))
    (setq aspectname (cdr (pop postlines)))
    (format-hidden s "Class" (htmlify classname))
    (format-hidden s "Predicate" (htmlify predicatename))
    (format-hidden s "Aspect" (htmlify aspectname))
    (format s "<TABLE>")
    (do ()
        ((or (null postlines) (string= (caar postlines) "Concept-End"))
         (pop postlines))
        (setq postlines (reissue-find-cell s revname postlines)))
    (format s "</TABLE>")
    (format-hidden s "Concept-End" "")
    postlines))

(defun reissue-find-cell (s revname postlines)
  (let ((cellname (cdar postlines)) (type (cdadr postlines)))
    (cond ((string= type "Typein")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-typein-cell s postlines)))
          ((string= type "MultiChoiceList")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-menu-cell s postlines)))
          ((string= type "DropdownList")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-selector-cell s postlines)))
          ((string= type "Multiselector")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-multiselector-cell s postlines)))
          ((string= type "Checkbox")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-checkbox-cell s postlines)))
          ((string= type "Radiobutton")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-radiobutton-cell s postlines)))
          ((string= type "Interval") (reissue-interval-cell s postlines))
          ((string= type "Intermenu") (reissue-intermenu-cell s postlines))
          ((string= type "Stringfield") (reissue-stringfield-cell s postlines))
          ((string= type "Text") (reissue-text-cell s postlines))
          ((string= type "Textarea") (reissue-text-cell s postlines))
          ((string= type "Message")
           (if (string= cellname revname)
               (progn (output-find-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-message-cell s postlines)))
          ((string= type "Subframe")
           (if (string= cellname revname)
               (progn (output-find-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-find-subframe-cell s revname postlines)))
          (t (reissue-other postlines)))))

(defun reissue-find-menu-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-options slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "MultiChoiceList")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-find-button s slot *cells*)
    (format s "</TD><TD>")
    (output-find-menu s *cells* options values)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-find-selector-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-possibilities slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-find-button s slot *cells*)
    (format s "</TD><TD>")
    (output-find-selector s *cells* options (car values))
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-find-multiselector-cell (s postlines)
  (let (slot references options value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (or (read-value-string (cdr (pop postlines))) 'unknown))
    (pop postlines)
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-find-button s slot *cells*)
    (format s "</TD><TD>")
    (output-find-selector s *cells* (nconc references (cons 'unknown options)) value)
    (output-expand-button s *cells*)
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-find-subframe-cell (s revname postlines)
  (let ((slot) (class))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq class (cdar postlines))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-close-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>")
    (format s "an object of type ~A<BR>" (string-downcase class))
    (setq postlines (reissue-find-subframe s revname postlines))
    (format s "</TD></TR></TABLE>")
    (format s "</TD><TD></TD></TR>")
    (format-hidden s "Cell-End" "")
    (pop postlines)
    postlines))


(defun output-find-menu (s slot options values)
  (when options
    (format s "<SELECT NAME=\"~A\" SIZE=~D MULTIPLE onChange='window.document.form1.submit()'>"
            (stringify slot) (menu-size (length options)))
    (dolist (option options)
      (if (member option values :test #'equalp)
        (format s "<OPTION SELECTED>~A~%" (stringify option))
        (format s "<OPTION>~A~%" (stringify option))))
    (format s "</SELECT>")))

(defun output-find-selector (s slot options value)
  (format s "<SELECT NAME=\"~A\" onChange='window.document.form1.submit()'>" (stringify slot))
  (dolist (option options)
    (if (equalp option value)
        (format s "<OPTION SELECTED>~A~%" (stringify option))
        (format s "<OPTION>~A~%" (stringify option))))
  (format s "</SELECT>"))

(defun output-find-checkboxes (s slot options values)
  (format s "<DL>")
  (dolist (option options)
    (format s "<DT>")
    (format-find-checkbox s (stringify slot) (stringify option)
                     (member option values :test #'equalp)))
  (format s "</DL>"))

(defun output-find-radiobuttons (s slot options value)
  (when options
    (format s "<DL>")
    (format s "<DT>")
    (format-find-radiobutton s (stringify slot) (stringify (car options))
                        (equal (car options) value))
    (dolist (option (cdr options))
      (format s "<DT>")
      (format-find-radiobutton s (stringify slot) (stringify option)
                          (equal option value)))
    (format s "</DL>")))

(defun format-find-radiobutton (s name value checked)
  (if checked
      (format s "<INPUT TYPE=RADIO NAME=\"~A\" VALUE=\"~A\" CHECKED onClick='window.document.form1.submit()'>~A"
              name value value)
      (format s "<INPUT TYPE=RADIO NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.submit()'>~A"
              name value value)))

(defun format-find-checkbox (s name value checked)
  (if checked
    (format s "<INPUT TYPE=CHECKBOX NAME=\"~A\" VALUE=\"~A\" CHECKED onClick='window.document.form1.submit()'>~A"
            name value value)
    (format s "<INPUT TYPE=CHECKBOX NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.submit()'>~A"
            name value value)))

(defun format-find-text (s name value size)
  (if (string= value "")
      (format s "<INPUT TYPE=TEXT NAME=\"~A\" SIZE=\"~A\" onChange='window.document.form1.submit()'>" name size)
      (format s "<INPUT TYPE=TEXT NAME=\"~A\" VALUE=\"~A\" SIZE=~A onChange='window.document.form1.submit()'>"
              name value size)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Glimpse
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'glimpse)) postlines)
  (let (object class)
    (setq object (read-value-string (cdr (pop postlines))))
    (setq class (find-isa object))
    (if class (output-glimpse  s object class)
        (html-message s (format nil "~A is unknown." (prettify object))))))

(defun output-glimpse (s obj class)
  (let (page)
    (setq page (find-inspectpage class))
    (cond ((not page) (old-glimpse s obj class))
          (t (new-inspect s obj class page)))))

(defun old-glimpse (s obj class)
  (let ((slots (inspectable-slots class)))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<P><TABLE CELLSPACING=10>")
    (dolist (slot slots)
      (output-multiple-cell s slot
        (request `(ask-all ?x (,slot ,obj ?x)) *client* *agent*)))
    (format s "</TABLE>")
    (unless (or (null slots) (findp `(nochange ,*gui* ,class) *interface*)
                (not (editablep *client* obj)))
      (format s "<HR>")
      (format s "<FORM ACTION=EDIT? METHOD=POST>")
      (format-hidden s "Object" (stringify obj))
      (format-hidden s "Class" (stringify class))
      (format-simple-button s "Edit")
      (format s " this ~A." (prettify class))
      (format s "</FORM>"))
    (format s "</BODY>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Describe
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'document)) postlines)
  (let (object desc)
    (setq object (read-value-string (cdr (pop postlines))))
    (setq desc (find-documentation object))
    (output-prolog s 200)
    (format s "<P>")
    (if desc (format s "~A" desc) (format s "No description available."))
    (format s "<P>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Createclasses
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'createclasses)) postlines)
  (cond ((null (cdr postlines)) (output-create-taxonomy s))
        (t (reissue-create-taxonomy s postlines))))

(defun output-create-taxonomy (s)
  (let (tree)
    (setq tree (cons 'thing (find-frames *gui*)))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=CREATECLASSES? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (format s "<DL>")
    (dolist (class (cdr tree))
      (format s "<DT>")
      (output-create-tree s class))
    (format s "</DL>")
    (format s "</FORM>")
    (format s "</BODY>")
    (force-output s)))

(defun reissue-create-taxonomy (s postlines)
  (let (tree command)
    (setq tree (read-user-string (cdr (pop postlines))))
    (setq command (caar postlines))
    (setq command (read-user-string (subseq command 0 (- (length command) 2))))
    (setq tree (toggle command tree))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=CREATECLASSES? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (dolist (class (cdr tree))
      (format s "<DT>")
      (output-create-tree s class))
    (format s "</FORM>")
    (format s "</BODY>")))

(defun output-create-tree (s tree)
  (cond ((atom tree)
         (if (find-subclasses tree) (output-create-closed s tree) (output-create-lone s tree)))
        (t (format s "<DL>")
           (format s "<DT>")
           (output-create-open s (car tree))
           (dolist (item (cdr tree))
             (format s "<DD>")
             (output-create-tree s item))
           (format s "</DL>"))))

(defun output-create-open (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/green.gif\" BORDER=0>" class *home*)
  (format s " <A HREF=\"CREATE?Class=~A\" TARGET=\"_top\">~A</A>"
          (addressify class) (prettify class)))

(defun output-create-lone (s class)
  (format s "<IMG SRC=\"~Aimages/grey.gif\">" *home*)
  (format s " <A HREF=\"CREATE?Class=~A\" TARGET=\"_top\">~A</A>"
          (addressify class) (prettify class)))

(defun output-create-closed (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/red.gif\" BORDER=0>" class *home*)
  (format s " <A HREF=\"CREATE?Class=~A\" TARGET=\"_top\">~A</A>"
          (addressify class) (prettify class)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Lookup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'lookup)) postlines)
  (cond ((null postlines) (lookup-top s))
        (t (answer-lookup s postlines))))

(defun answer-lookup (s postlines)
  (let (relation aspect kif arity results count start end (*var-count* 0))
    (setq relation (read-value-string (cdr (pop postlines))))
    (setq arity  (arity-of-relation relation))
    (do ((i 1 (1+ i)) (nl))
        ((> i arity) (setq aspect (nreverse nl)))
        (setq nl (cons (decolonize (newindvar)) nl)))
    (setq kif (cons relation aspect))
    (setq results (prorequest `(ask-all ,aspect ,kif)))
    (setq count (length results))
    (setq start 1)
    (setq end (min count 20))
    (cond ((and (= start 1) (= end count)))
          (t (setq results (subseq results (1- start) end))))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<CENTER>")
    (cond ((= count 0) (display-none s aspect kif))
          (t (display-result s aspect results count 1 end)
             (output-moretable-commands s aspect kif count 1 end)))
    (format s "</CENTER>")
    (format s "</BODY>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Moretable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'moretable)) *postlines*)
  (let (aspect kif start end results count)
    (setq aspect (read-from-string (cdr (pop *postlines*))))
    (setq kif (read-from-string (cdr (pop *postlines*))))
    (setq start (read-value-string (getf-post "Start" *postlines*)))
    (setq end (read-value-string (getf-post "Solutions" *postlines*)))
    (setq results (request `(ask-all ,aspect ,kif) *client* *agent*))
    (setq count (length results))
    (cond ((not (integerp start)) (setq start 1))
          ((< start 1) (setq start 1)))
    (cond ((not (integerp end)) (setq end count))
          ((< end 1) (setq end (min count 20)))
          ((> end count) (setq end count)))
    (when (< end start) (setq end start))
    (cond ((and (= start 1) (= end count)))
          ((> start count) (setq results nil))
          (t (setq results (subseq results (1- start) end))))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<CENTER>")
    (cond ((= count 0) (display-failure s aspect kif))
          (t (display-result s aspect results count start end)
             (output-moretable-commands s aspect kif count start end)))
    (format s "</CENTER>")
    (format s "</BODY>")))

(defun output-moretable-commands (s aspect kif count start end)
  (cond ((and (= start 1) (= end count)))
        ((> count end) (setq start (1+ end) end (min count (+ end 20))))
        (t (setq start 1 end (min count 20))))
  (format s "<FORM ACTION=MORETABLE? METHOD=POST>")
  (format-hidden s "Aspect" (htmlify (prin1-to-string aspect)))
  (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
  (format-button s "Command" "Display")
  (format s "answers ")
  (format-text s "Start" (princ-to-string start) 5)
  (format s " through ")
  (format-text s "Solutions" (princ-to-string end) 5)
  (format s "</FORM>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Relation Tree
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'relations)) postlines)
  (cond ((null (cdr postlines)) (output-relation-taxonomy s))
        (t (reissue-relation-taxonomy s postlines))))

(defun output-relation-taxonomy (s)
  (let (tree)
    (setq tree (cons 'top (find-tables *gui*)))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=RELATIONS? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (format s "<DL>")
    (dolist (relation (cdr tree))
      (format s "<DT>")
      (output-relation-tree s relation))
    (format s "</DL>")
    (format s "</FORM>")
    (format s "</BODY>")
    (crlf s)))

(defun reissue-relation-taxonomy (s postlines)
  (let (tree command)
    (setq tree (read-user-string (cdr (pop postlines))))
    (setq command (caar postlines))
    (setq command (read-user-string (subseq command 0 (- (length command) 2))))
    (setq tree (toggle-relation-tree command tree))
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=RELATIONS? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (dolist (class (cdr tree))
      (format s "<DT>")
      (output-relation-tree s class))
    (format s "</FORM>")
    (format s "</BODY>")))

(defun toggle-relation-tree (relation tree)
  (cond ((eq relation tree) (cons relation (find-subrelations relation)))
        ((atom tree) tree)
        ((eq relation (car tree)) relation)
        (t (do ((l tree (cdr l)) (nl))
               ((null l) (nreverse nl))
               (setq nl (cons (toggle-relation-tree relation (car l)) nl))))))

(defun output-relation-tree (s tree)
  (cond ((atom tree)
         (if (find-subrelations tree) (output-relation-closed s tree) (output-relation-lone s tree)))
        (t (format s "<DL>")
           (format s "<DT>")
           (output-relation-open s (car tree))
           (dolist (item (cdr tree))
             (format s "<DD>")
             (output-relation-tree s item))
           (format s "</DL>"))))

(defun output-relation-open (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/green.gif\" BORDER=0>" class *home*)
  (output-table-link s class))

(defun output-relation-lone (s class)
  (format s "<IMG SRC=\"~Aimages/grey.gif\">" *home*)
  (output-table-link s class))

(defun output-relation-closed (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/red.gif\" BORDER=0>" class *home*)
  (output-table-link s class))

(defun output-table-link (s class)
  (format s " <A HREF=\"LOOKUP?Relation=~A\" TARGET=\"query\">~A</A>"
          (addressify class) (prettify class)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Stuff from old proforma
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Edit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun process-edit (s postlines)
  (let ((name (cdar postlines)) (*cells* *cells*))
    (cond ((null (cdr postlines)) (identify-edit s name))
          (t (make-edit s postlines)))))

(defun process-modify (s postlines)
  (let (name command (*cells* *cells*))
    (setq name (cdaddr postlines))
    (setq command (getf-post "Command" postlines))
    (cond ((string= command "Update") (output-modify s name postlines))
          ((string= command "Delete") (output-kill s name postlines))
          ((string= command "Refresh") (reissue-edit s postlines))
          ((string= command "Convert to ACL") (edit-acl s postlines))
          ((string= command "Edit Structure") (process-modify-updater s postlines))
          ((setq command (getf-revname postlines))
           (cond ((startstringp "Create" command)
                  (output-create s (read-value-string (subseq command 7))))
                 (t (output-frame s (subseq command 5)))))
          (t (reissue-edit s postlines)))))

(defun process-modify-updater (s postlines)
  (let (object class structure (*buttons* 0) (*cells* 0))
    (setq class (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq object (read-value-string (cdr (pop postlines))))
    (do ((style) (slot) (value) (nl))
        ((or (null postlines) (not (string= (caar postlines) "Start")))
         (setq structure (cons object (cons class (nreverse nl)))))
        (pop postlines)
        (setq style (read-value-string (cdr (pop postlines))))
        (setq slot (read-value-string (cdr (pop postlines))))
        (setq postlines (popvals "Reference" postlines))
        (setq postlines (popvals "Default" postlines))
        (do ((flag nil t))
            ((string= (caar postlines) "End") (pop postlines))
            (setq value (cdr (pop postlines)))
            (cond ((equal value "") (unless flag (setq nl (cons `(,slot) nl))))
                  ((find style '(stringfield text textarea password))
                   (setq nl (cons `(,slot ,value) nl)))
                  (t (setq value (readas value (find-range slot)))
                     (setq nl (cons `(,slot ,value) nl))))))
    (output-updater-revision s object class structure)))

(defun identify-edit (s classname)
  (let ((class (read-value-string classname)))
    (output-prolog s 200)
    (output-header s "Identify ~A" (prettify class))
    (format s "<P>Please enter the identifier for the <B>~A</B> you wish to modify:<BR>" (prettify class))
    (format s "<FORM ACTION=EDIT? METHOD=POST>")
    (format-text s "Object" "" 40)
    (format-hidden s "Class" (prettify class))
    (format-simple-button s "Modify")
    (format s "</FORM>")
    (format s "<P>If you do not know the identifier, use a
               <A HREF=\"FRAME?Class=~A\">query form</A> to find the
               object and click on the Edit button.<P>"
            (addressify class))
    (output-footer s)))


(defun make-edit (s postlines)
  (let ((class (read-value-string (cdadr postlines)))
        (handle (read-value-string (cdar postlines))))
    (if (editablep *client* handle)
        (output-edit s class handle)
        (http-problem s (format nil "Can't edit ~A." handle)))))

(defun output-edit (s class obj)
  (let (page)
    (setq page (find-modifypage class))
    (cond ((not page) (old-modify s class obj))
          (t (new-modify s obj page)))))

(defun old-modify (s class obj)
  (output-prolog s 200)
  (output-header s "Modify ~A" (prettify obj))
  (editobj s class (find-predicate class) obj)
  (output-footer s))

(defun new-modify (s obj page)
  (output-prolog s 200)
  (setq page (strreplace (stringify obj) "<OBJECT/>" page))
  (format s (cleanse page)))

(defun editobj (s class predicate object)
  (format s "<P><B><A HREF=\"INSPECT?Object=~A\" target=\"_top\">~A</A></B>"
          (addressify object) (iconify object))
  (format s " is ~A <B>" (article class))
  (output-classlink s class)
  (format s "</B> with the following profile.")
  (format s "<FORM ACTION=MODIFY? METHOD=POST>")
  (format-hidden s "Class" (stringify class))
  (format-hidden s "Predicate" (stringify predicate))
  (format-hidden s "Object" (stringify object))
  (format s "<TABLE>")
  (dolist (slot (modifiable-slots class))
    (cond ((findp `(noupdate ,*gui* ,slot) *interface*)
           (make-edit-glyph s slot
             (request `(ask-all ?x (,slot ,object ?x)) *client* *agent*)))
          (t (make-edit-cell s slot (prorequest `(ask-all ?x (,slot ,object ?x)))))))
  (format s "</TABLE>")
  (format s "<BR>")
  (make-edit-buttons s class))

(defun make-edit-cell (s slot values)
  (let ((style (findx '?t `(changestyle ,slot ?t) *interface*)))
    (cond ((eq style 'multichoicelist) (make-edit-menu s slot values))
          ((eq style 'dropdownlist) (make-edit-selector s slot values))
          ((eq style 'progressivehierarchicalchoicelist) (make-edit-multiselector s slot values))
          ((eq style 'checkbox) (make-edit-checkboxes s slot values))
          ((eq style 'radiobutton) (make-edit-checkboxes s slot values))
          ((eq style 'stringfield) (make-edit-text s slot values))
          ((eq style 'text) (make-edit-text s slot values))
          ((eq style 'textarea) (make-edit-textarea s slot values))
          ((eq style 'password) (make-edit-password s slot values))
          ((eq style 'urlstyle) (make-edit-text s slot values))
          ((eq style 'glyph) (make-edit-glyph s slot values))
          (t (make-edit-typein s slot values)))))

(defun make-edit-menu (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "MultiChoiceList")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (stringify value)))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-slot-button s slot)
  (format s "</TD><TD VALIGN=TOP>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (output-menu s *cells* (find-values slot) values)
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-selector (s slot values)
  (let (options)
    (setq options (find-alternatives slot))
    (format-hidden s "Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (dolist (value values) (format-hidden s "Default" (stringify value)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (output-selector s *cells* options (car values))
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (output-selector s *cells* options value)
      (format s "</TD><TD></TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (output-selector s *cells* options nil)
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "")
    (crlf s)))

(defun make-edit-multiselector (s slot values)
  (let ((count 1))
    (format-hidden s "Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (value values) (format-hidden s "Default" (stringify value)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD>")
    (output-slot-button s slot)
    (format s "</TD><TD>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (make-edit-multiselector-value s slot (car values) count)
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (make-edit-multiselector-value s slot value (incf count))
      (format s "</TD><TD></TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (make-edit-multiselector-value s slot nil (incf count))
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "")
    (crlf s)))

(defun make-edit-multiselector-value (s slot value num)
  (let (references options buttonname)
    (setq references (find-references slot value))
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (output-selector s *cells* (nconc references (cons 'unknown options)) value)
    (setq buttonname (strappend "Expand." (stringify *cells*) "." (stringify num)))
    (format-button s buttonname "Expand")))

(defun make-edit-checkboxes (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Checkbox")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (stringify value)))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-slot-button s slot)
  (format s "</TD><TD VALIGN=TOP>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (if (uniquep slot)
      (output-radiobuttons s *cells* (find-alternatives slot) (car values))
      (output-checkboxes s *cells* (find-values slot) values))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-text (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (htmlify value)))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD>")
  (output-slot-button s slot)
  (format s "</TD><TD>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (format-text s (stringify *cells*) (htmlify (car values)) 40)
  (format s "</TD><TD>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (dolist (value (cdr values))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-text s (stringify *cells*) (htmlify value) 40)
    (format s "</TD><TD></TD></TR>"))
  (when (and values (not (uniquep slot)))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-text s (stringify *cells*) "" 40)
    (format s "</TD><TD></TD></TR>"))
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-textarea (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Textarea")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (htmlify value)))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-slot-button s slot)
  (format s "</TD><TD VALIGN=TOP>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (format-textarea s (stringify *cells*) (htmlify (car values)) 8 60)
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (dolist (value (cdr values))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-textarea s (stringify *cells*) (htmlify value) 8 60)
    (format s "</TD><TD></TD></TR>"))
  (when (and values (not (uniquep slot)))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-textarea s (stringify *cells*) "" 4 60)
    (format s "</TD><TD></TD></TR>"))
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-password (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Password")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (htmlify value)))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD>")
  (output-slot-button s slot)
  (format s "</TD><TD>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (format-password s (stringify *cells*) (htmlify (car values)))
  (format s "</TD><TD>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (dolist (value (cdr values))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-password s (stringify *cells*) (htmlify value))
    (format s "</TD><TD></TD></TR>"))
  (when (and values (not (uniquep slot)))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-password s (stringify *cells*) "")
    (format s "</TD><TD></TD></TR>"))
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-glyph (s slot values)
  (let (style)
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD></TD><TD></TD><TD>")
    (setq style (find-inspectstyle slot))
    (when values (output-value-in-style s (car values) style))
    (dolist (value (cdr values))
      (format s ", ")
      (output-value-in-style s value style))
    (format s "</TD><TD></TD></TR>")))

(defun make-edit-typein (s slot values)
  (format-hidden s "Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringify slot))
  (dolist (value values) (format-hidden s "Default" (stringify value)))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD>")
  (output-slot-button s slot)
  (format s "</TD><TD>")
  (output-create-button s slot)
  (format s "</TD><TD>")
  (format-text s (stringify *cells*) (stringify (or (car values) 'unknown)) 40)
  (format s "</TD><TD>")
  (format s (prettify (find-updatelabel slot)))
  (format s "</TD></TR>")
  (dolist (value (cdr values))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-text s (stringify *cells*) (stringify value) 40)
    (format s "</TD><TD></TD></TR>"))
  (when (and values (not (uniquep slot)))
    (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
    (format-text s (stringify *cells*) "" 40)
    (format s "</TD><TD></TD></TR>"))
  (format-hidden s "End" "")
  (crlf s))

(defun make-edit-buttons (s class)
  (format s "<TABLE WIDTH=100%>")
  (format s "<TR><TD WIDTH=50% VALIGN=TOP>")
  (format-button s "Command" "Update")
  (format s " this item.<BR>")
  (unless (findp `(nocreate ,(name *gui*) ,class) *interface*)
    (format-button s "Command" "Delete")
    (format s " this item.<BR>"))
  (format s "</TD><TD>")
  (format-button s "Command" "Refresh")
  (format s "<BR>")
  (unless (findp `(nocommand ,*gui* updater) *interface*)
    (format-button s "Command" "Edit Structure"))
  (format s "<BR>")
  (unless (findp `(nocommand ,*gui* acl) *interface*)
    (format-button s "Command" "Convert to ACL"))
  (format s "</TD></TR>")
  (format s "</TABLE>")
  (format s "</FORM>"))


(defun reissue-edit (s postlines)
  (let (class predicate object expname)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq predicate (read-value-string (cdr (pop postlines))))
    (setq object (read-value-string (cdr (pop postlines))))
    (setq expname (getf-expname postlines))
    (output-prolog s 200)
    (output-header s "Modify ~A" (prettify object))
    (format s "<P><B>~A</B> is ~A <B>" (prettify object) (article class))
    (output-classlink s class)
    (format s "</B> with the following profile.")
    (format s "<FORM ACTION=MODIFY? METHOD=POST>")
    (format-hidden s "Class" (stringify class))
    (format-hidden s "Predicate" (stringify predicate))
    (format-hidden s "Object" (stringify object))
    (format s "<TABLE>")
    (do ()
        ((or (null postlines) (not (string= (caar postlines) "Start"))))
        (setq postlines (reissue-edit-cell s expname postlines)))
    (format s "</TABLE>") (crlf s)
    (format s "<BR>")
    (make-edit-buttons s class)
    (output-footer s)))

(defun reissue-edit-cell (s expname postlines)
  (let ((style (read-value-string (cdadr postlines))))
    (cond ((eq style 'multichoicelist) (reissue-edit-menu s postlines))
          ((eq style 'dropdownlist) (reissue-edit-selector s postlines))
          ((eq style 'multiselector) (reissue-edit-multiselector s expname postlines))
          ((eq style 'checkbox) (reissue-edit-checkboxes s postlines))
          ((eq style 'radiobutton) (reissue-edit-checkboxes s postlines))
          ((eq style 'stringfield) (reissue-edit-text s postlines))
          ((eq style 'text) (reissue-edit-text s postlines))
          ((eq style 'textarea) (reissue-edit-textarea s postlines))
          ((eq style 'password) (reissue-edit-password s postlines))
          (t (reissue-edit-typein s postlines)))))

(defun reissue-edit-menu (s postlines)
  (let (cell slot references defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (multiple-value-setq (defaults postlines) (getvalues "Default" postlines))
    (multiple-value-setq (values postlines) (getvalues (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "MultiChoiceList")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (dolist (default defaults) (format-hidden s "Default" (stringify default)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (output-menu s cell (find-values slot) values)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-selector (s postlines)
  (let (cell slot references options defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (multiple-value-setq (defaults postlines) (getvalues "Default" postlines))
    (multiple-value-setq (values postlines) (getvalues (stringify cell) postlines))
    (setq options (find-alternatives slot))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (dolist (default defaults) (format-hidden s "Default" (stringify default)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (output-selector s cell options (car values))
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (output-selector s cell options value)
      (format s "</TD><TD></TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (output-selector s cell options nil)
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-multiselector (s expname postlines)
  (let (cell slot defaults cases (count 1))
    (setq cell (cdr (pop postlines)))
    (when (startstringp cell expname)
      (setq expname (read-value-string (subseq expname (1+ (length cell))))))
    (setq cell (read-value-string cell))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvalues "Default" postlines))
    (do ((i 1 (1+ i)) (references) (value) (nl))
        ((or (null postlines) (string-equal (caar postlines) "End"))
         (setq cases (nreverse nl)))
        (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
        (setq value (read-value-string (cdr (pop postlines))))
        (when (string-equal (cdar postlines) "Expand") (pop postlines))
        (cond ((and (numberp expname) (= i expname))
               (setq references (if value (newrefs value references)))
               (setq nl (cons (cons 'unknown references) nl)))
              (value (setq nl (cons (cons value references) nl)))
              (t (setq nl (cons (cons 'unknown references) nl)))))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (stringify default)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD>")
    (output-slot-button s slot)
    (format s "</TD><TD>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (reissue-edit-multiselector-value s cell slot (cdar cases) (caar cases) count)
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (case (cdr cases))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (reissue-edit-multiselector-value s cell slot (cdr case) (car case) (incf count))
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-multiselector-value (s cell slot references value num)
  (let (options buttonname)
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (output-selector s cell (nconc references (cons 'unknown options)) value)
    (setq buttonname (strappend "Expand." (stringify cell) "." (stringify num)))
    (format-button s buttonname "Expand")))

(defun reissue-edit-checkboxes (s postlines)
  (let (cell slot defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvalues "Default" postlines))
    (multiple-value-setq (values postlines) (getvalues (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Checkbox")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (stringify default)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (if (uniquep slot)
      (output-radiobuttons s cell (find-values slot) (car values))
      (output-checkboxes s cell (find-values slot) values))
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-text (s postlines)
  (let (cell slot defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
    (multiple-value-setq (values postlines) (getvals (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Text")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (htmlify default)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (format-text s (stringify cell) (htmlify (car values)) 40)
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-text s (stringify cell) (htmlify value) 40)
      (format s "</TD><TD></TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-text s (stringify cell) "" 40)
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-textarea (s postlines)
  (let (cell slot defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
    (multiple-value-setq (values postlines) (getvals (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Textarea")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (htmlify default)))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN=TOP>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (format-textarea s (stringify cell) (htmlify (car values)) 8 60)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-textarea s (stringify cell) (htmlify value) 8 60)
      (format s "</TD><TD></TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-textarea s (stringify cell) "" 4 60)
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-password (s postlines)
  (let (cell slot defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
    (multiple-value-setq (values postlines) (getvals (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Password")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (htmlify default)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN>")
    (output-slot-button s slot)
    (format s "</TD><TD VALIGN>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (format-password s (stringify cell) (htmlify (car values)))
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-password s (stringify cell) (htmlify value))
      (format s "</TD><TD>")
      (format s (prettify (find-updatelabel slot)))
      (format s "</TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-password s (stringify cell) "")
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))

(defun reissue-edit-typein (s postlines)
  (let (cell slot defaults values)
    (setq cell (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (defaults postlines) (getvalues "Default" postlines))
    (multiple-value-setq (values postlines) (getvalues (stringify cell) postlines))
    (pop postlines)
    (format-hidden s "Start" (stringify cell))
    (format-hidden s "Style" "Typein")
    (format-hidden s "Slot" (stringify slot))
    (dolist (default defaults) (format-hidden s "Default" (stringify default)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD>")
    (output-slot-button s slot)
    (format s "</TD><TD>")
    (output-create-button s slot)
    (format s "</TD><TD>")
    (format-text s (stringify cell) (stringify (or (car values) 'unknown)) 40)
    (format s "</TD><TD>")
    (format s (prettify (find-updatelabel slot)))
    (format s "</TD></TR>")
    (dolist (value (cdr values))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-text s (stringify cell) (stringify value) 40)
      (format s "</TD><TD>")
      (format s (prettify (find-updatelabel slot)))
      (format s "</TD></TR>"))
    (when (and values (not (uniquep slot)))
      (format s "<TR><TD></TD><TD></TD><TD></TD><TD>")
      (format-text s (stringify cell) "" 40)
      (format s "</TD><TD></TD></TR>"))
    (format-hidden s "End" "") (crlf s)
    postlines))


(defun output-modify (s obj-str postlines)
  (let ((handle (read-value-string obj-str)))
    (if (editablep *client* handle)
        (update-obj s handle postlines)
        (http-problem s (format nil "Can't modify ~A." handle)))))

(defun update-obj (s handle postlines)
  (let (class predicate facts untells tells errors dum page)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq predicate (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (multiple-value-setq (untells tells facts) (get-updates handle postlines))
    (setq facts (cons (makpredicate predicate handle class) facts))
    (setq untells (mapcar #'(lambda (x) `(not ,x)) untells))
    (cond ((setq errors (errors facts))
           (do ((l errors (cdr l)) (message "<B>Error(s):</B><BR>"))
               ((null l) (http-problem s message))
               (setq message (strappend message "<BR><BR>" (car l)))))
          ((and (setq dum (prorequest `(tell ,(maksand (nconc untells tells)))))
                (errorp dum))
           (output-problems s dum))
          ((setq page (find-modifypage class)) (new-modify s handle page))
          (t (output-prolog s 200)
             (output-header s "Modify ~A" (prettify handle))
             (format-message s "Update succesful.  Use the following form to make changes.")
             (editobj s class predicate handle)
             (output-footer s)))))

(defun get-updates (handle postlines)
  (do ((cellname) (style) (slot) (type) (defaults) (values)
       (untells) (tells) (facts) (olds) (news))
      ((or (null postlines) (not (string= (caar postlines) "Start")))
       (values (nreverse untells) (nreverse tells) (nreverse facts)))
      (setq cellname (cdr (pop postlines)))
      (setq style (read-value-string (cdr (pop postlines))))
      (setq slot (read-value-string (cdr (pop postlines))))
      (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
      (multiple-value-setq (values postlines) (getupvals cellname postlines))
      (pop postlines)
      (setq news (set-difference values defaults :test #'equalp))
      (setq olds (set-difference defaults values :test #'equalp))
      (unless (find style '(stringfield text textarea password))
        (setq type (find-range slot))
        (setq olds (mapcar #'(lambda (x) (readas x type)) olds))
        (setq news (mapcar #'(lambda (x) (readas x type)) news)))
      (dolist (value values) (push `(,slot ,handle ,value) facts))
      (dolist (default olds) (push `(,slot ,handle ,default) untells))
      (dolist (value news) (push `(,slot ,handle ,value) tells))))

(defun getupvals (slotname pl)
  (do ((l pl (cdr l)) (values))
      ((null l) (values (nreverse values) l))
      (cond ((string-equal (caar l) "Reference"))
            ((string-equal (caar l) slotname)
             (if (not (string= (cdar l) "")) (setq values (cons (cdar l) values))))
            (t (return (values (nreverse values) l))))))

(defun output-kill (s name postlines)
  (let ((object (read-value-string name)))
    (if (editablep *client* object)
	(kill-object s object postlines)
        (http-problem s (format nil "Can't delete ~A." object)))))

(defun kill-object (s object postlines)
  (let (class predicate)
    (output-prolog s 200)
    (output-header s "Delete ~A" (prettify object))
    (setq class (read-value-string (cdr (pop postlines))))
    (setq predicate (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (dolist (sentence (get-untells class predicate object postlines))
      (prorequest `(untell ,sentence)))
    (drop-viewable *client* object)
    (drop-editable *client* object)
    (format s "<P>~A deleted.<P>" (prettify object))
    (output-footer s)))

(defun get-untells (class predicate handle postlines)
  (do ((cellname) (slot) (type) (defaults) (untells))
      ((or (null postlines) (not (string= (caar postlines) "Start")))
       (nreverse (cons (makpredicate predicate handle class) untells)))
      (setq cellname (cdr (pop postlines)))
      (pop postlines)
      (setq slot (read-value-string (cdr (pop postlines))))
      (setq postlines (popvals "Reference" postlines))
      (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
      (setq postlines (popvals cellname postlines))
      (pop postlines)
      (unless (string-slot-p slot)
        (setq type (find-range slot))
        (setq defaults (mapcar #'(lambda (x) (readas x type)) defaults)))
      (dolist (default defaults) (push `(,slot ,handle ,default) untells))))


(defun edit-acl (s postlines)
  (let (handle untells tells)
    (pop postlines)
    (pop postlines)
    (setq handle (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (untells tells) (get-edits handle postlines))
    (setq untells (mapcar #'(lambda (x) `(unprovable ,x)) untells))
    (generate-acl s `(tell ,(maksand (nconc untells tells))))))

(defun get-edits (handle postlines)
  (do ((cellname) (style) (slot) (type) (defaults) (values)
       (untells) (tells) (olds) (news))
      ((or (null postlines) (not (string= (caar postlines) "Start")))
       (values (nreverse untells) (nreverse tells)))
      (setq cellname (cdr (pop postlines)))
      (setq style (read-value-string (cdr (pop postlines))))
      (setq slot (read-value-string (cdr (pop postlines))))
      (multiple-value-setq (defaults postlines) (getvals "Default" postlines))
      (multiple-value-setq (values postlines) (getupvals cellname postlines))
      (pop postlines)
      (setq news (set-difference values defaults :test #'equalp))
      (setq olds (set-difference defaults values :test #'equalp))
      (unless (find style '(stringfield text textarea password))
        (setq type (find-range slot))
        (setq olds (mapcar #'(lambda (x) (readas x type)) olds))
        (setq news (mapcar #'(lambda (x) (readas x type)) news)))
      (dolist (default olds) (push `(,slot ,handle ,default) untells))
      (dolist (value news)
        (unless (eq value 'none) (push (list slot handle value) tells)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; general.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun process-frame (s postlines)
  (let ((classname (cdar postlines)) (command) (*cells* *cells*) (*var-count* 0))
    (cond ((null (cdr postlines)) (output-frame s classname))
          ((not (setq command (getf-post "Command" postlines)))
           (cond ((getf-revname postlines)
                  (reissue-frame s classname postlines))
                 ((getf-expname postlines)
                  (expand-frame s classname postlines))
                 (t (http-problem s "Obsolete form."))))
          ((string= command "  ") (reissue-frame s classname postlines))
          ((string= command " Count ") (count-frame s postlines))
          ((string= command "Display") (answer-frame s postlines))
          ((string= command "  Save  ") (rulify-frame s postlines))
          ((string= command "  Drop  ") (derulify-frame s postlines))
          ((string= command "Convert to QBE Query")
           (transform-frame s postlines))
          ((string= command "Convert to SQL Query")
           (sql-frame s postlines))
          ((string= command "Convert to ACL Query")
           (acl-frame s postlines))
          (t (http-problem s "Obsolete form.")))))

(defun output-frame (s classname)
  (let (class page)
    (setq class (read-value-string classname))
    (setq page (find-searchpage class))
    (cond ((not page) (old-frame s classname))
          (t (new-frame s page)))))

(defun old-frame (s classname)
  (let ((class (read-value-string classname))
        (aspectname (concatenate 'string "?" classname)))
    (output-prolog s 200)
    (output-header s "Find ~A" (iconify class))
    (format s "<P>Find every <B>")
    (output-classlink s class)
    (format s "</B> that satisfies the following criteria.")
    (format s "<FORM ACTION=FRAME? METHOD=POST TARGET=\"_top\">" (addressify class))
    (output-subframe s aspectname class)
    (output-frame-sorter s class)
    (output-frame-commands s)
    (format s "</FORM>")
    (output-footer s)))

(defun new-frame (s page)
  (output-prolog s 200)
  (format s (cleanse page)))

(defun output-subframe (s aspectname class)
  (format-hidden s "Class" (stringify class))
  (format-hidden s "Predicate" (stringify (find-predicate class)))
  (format-hidden s "Aspect" (htmlify aspectname))
  (format s "<TABLE>")
  (dolist (slot (queryable-slots class)) (output-query-cell s slot))
  (format s "</TABLE>")
  (format-hidden s "Concept-End" ""))

(defun output-query-cell (s slot)
  (let ((style (findx '?t `(searchstyle ,slot ?t) *interface*)))
    (cond ((eq style 'multichoicelist) (output-menu-cell s slot))
          ((eq style 'dropdownlist) (output-selector-cell s slot))
          ((eq style 'progressivehierarchicalchoicelist) (output-multiselector-cell s slot))
          ((eq style 'checkbox) (output-checkbox-cell s slot))
          ((eq style 'radiobutton) (output-radiobutton-cell s slot))
          ((eq style 'interval) (output-interval-cell s slot))
          ((eq style 'intermenu) (output-intermenu-cell s slot))
          ((eq style 'stringfield) (output-stringfield-cell s slot))
          ((eq style 'text) (output-text-cell s slot))
          ((eq style 'textarea) (output-text-cell s slot))
          ((eq style 'password))
          ((eq style 'message) (output-message-cell s slot))
          ((eq style 'subframe) (output-subframe-cell s slot))
          (t (output-typein-cell s slot)))))

(defun output-menu-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "MultiChoiceList")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (output-menu s *cells* (find-values slot) (find-inputs slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-selector-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "DropdownList")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (output-selector s *cells* (find-possibilities slot) (find-input slot))
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-multiselector-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Multiselector")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (output-selector s *cells* (find-alternatives slot) 'unknown)
  (format-button s (strappend "Expand." (stringify *cells*)) "Expand")
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-checkbox-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Checkbox")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (output-checkboxes s *cells* (find-values slot) (find-inputs slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-radiobutton-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Radiobutton")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (output-radiobuttons s *cells* (find-values slot) (find-input slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-interval-cell (s slot)
  (let ((input (find-input-string slot)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Interval")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD></TD><TD>")
    (format s "At least ")
    (format-text s "Min" input 10)
    (format s " and at most ")
    (format-text s "Max" input 10)
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-intermenu-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Intermenu")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD></TD><TD>")
  (format s "At least ")
  (output-selector s 'min (find-alternatives slot) (find-input slot))
  (format s " and at most ")
  (output-selector s 'max (find-alternatives slot) (find-input slot))
  (format s "</TD><TD VALIGN=TOP>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-stringfield-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Stringfield")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (format s "</TD><TD>")
  (format-text s (stringify *cells*) (find-input-string slot) 30)
  (format-checkbox s "Match" "Exact?" nil)
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-text-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT>")
  (output-slotlink s slot)
  (format s "</TH><TD></TD><TD>")
  (format-text s (stringify *cells*) (find-input-string slot) 21)
  (format s "<SELECT NAME=\"Match\">")
  (format s "<OPTION SELECTED>All Words")
  (format s "<OPTION>Any Word")
  (format s "<OPTION>Phrase")
  (format s "</SELECT>")
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-message-cell (s slot)
  (let ((subframe (subframep slot)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Message")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (if subframe (format s "Press button to specify criteria.")
        (format s "Cannot specify values for this attribute."))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-subframe-cell (s slot)
  (let* ((class (or (findx '?x `(range ,slot ?x) *interface*) 'thing))
         (aspectname (symbol-name (gentemp "?"))))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-close-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>~%")
    (format s "~A " (article class))
    (format s "~A that satisfies the following criteria<BR>" (string-downcase (princ-to-string class)))
    (output-subframe s aspectname class)
    (format s "</TD></TR></TABLE>")
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")))

(defun output-typein-cell (s slot)
  (format-hidden s "Cell-Start" (stringify (incf *cells*)))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringify slot))
  (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
  (output-slotlink s slot)
  (format s "</TH><TD VALIGN=TOP>")
  (output-open-button s slot *cells*)
  (format s "</TD><TD>")
  (format-text s (stringify *cells*) (find-input-string slot) 40)
  (format s "</TD><TD>")
  (format s (prettify (find-searchlabel slot)))
  (format s "</TD></TR>")
  (format-hidden s "Cell-End" ""))

(defun output-frame-sorter (s class)
  (let (slots)
    (cond ((findp `(nocommand ,*gui* sort) *interface*))
          ((setq slots (sortable-slots class))
           (format s "<P><HR>")
           (format s "<P>Sort by ")
           (output-selector s 'sorter (cons 'unknown slots) nil)
           (format s " in ")
           (output-selector s 'order '(ascending descending) 'ascending)
           (format s " order<P>")))))

(defun output-frame-commands (s)
  (format s "<BR>")
  (format-hidden s "== Commands ==" "")
  (format s "<TABLE WIDTH=100%>")
  (format s "<TR><TD WIDTH=50% VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* count) *interface*)
    (format-button s "Command" " Count ")
    (format s " all answers for query"))
  (format s "</TD><TD>")
  (unless (findp `(nocommand ,*gui* qbe) *interface*)
    (format-button s "Command" "Convert to QBE Query"))
  (format s "</TD></TR><TR><TD>")
  (unless (findp `(nocommand ,*gui* display) *interface*)
    (format-button s "Command" "Display")
    (format s " answers ")
    (format-text s "Start" "1" 5)
    (format s " through ")
    (format-text s "Solutions" "20" 5))
  (format s "</TD><TD>")
  (unless (findp `(nocommand ,*gui* sql) *interface*)
    (format-button s "Command" "Convert to SQL Query"))
  (format s "</TD></TR><TR><TD>")
  (unless (findp `(nocommand ,*gui* rulify) *interface*)
    (format-button s "Command" "  Save  ")
    (format s " rule for class")
    (format-text s "Class" "" 20))
  (format s "</TD><TD>")
  (unless (findp `(nocommand ,*gui* acl) *interface*)
    (format-button s "Command" "Convert to ACL Query"))
  (format s "</TD></TR><TR><TD>")
  (unless (findp `(nocommand ,*gui* rulify) *interface*)
    (format-button s "Command" "  Drop  ")
    (format s " rule for class")
    (format-text s "Class" "" 20))
  (format s "</TD><TD>")
  (format s "</TD></TR></TABLE>~%"))


(defun expand-frame (s classname postlines)
  (let ((class (read-value-string classname)) (revname))
    (output-prolog s 200)
    (output-header s "Find ~A" (prettify class))
    (format s "<P>Find every <B>")
    (output-classlink s class)
    (format s "</B> that satisfies the following criteria.")
    (setq revname (getf-expname postlines))
    (format s "<FORM ACTION=FRAME? METHOD=POST>" (addressify class))
    (setq postlines (expand-subframe s revname postlines))
    (setq postlines (reissue-frame-sorters s class postlines))
    (reissue-frame-commands s postlines)
    (format s "</FORM>")
    (output-footer s)))

(defun expand-subframe (s revname postlines)
  (let ((classname (cdr (pop postlines)))
        (predicatename (cdr (pop postlines)))
        (aspectname (cdr (pop postlines))))
    (format-hidden s "Class" (htmlify classname))
    (format-hidden s "Predicate" (htmlify predicatename))
    (format-hidden s "Aspect" (htmlify aspectname))
    (format s "<TABLE>")
    (do ()
        ((or (null postlines) (string= (caar postlines) "Concept-End"))
         (pop postlines))
        (setq postlines (expand-cell s revname postlines)))
    (format s "</TABLE>")
    (format-hidden s "Concept-End" "")
    postlines))

(defun expand-cell (s revname postlines)
  (let ((cellname (cdar postlines)) (type (cdadr postlines)))
    (cond ((string= type "Typein")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-typein-cell s postlines)))
          ((string= type "MultiChoiceList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-menu-cell s postlines)))
          ((string= type "DropdownList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-selector-cell s postlines)))
          ((string= type "Multiselector")
           (if (string= cellname revname)
               (progn (expand-multiselector-cell s postlines)
                      (reissue-other postlines))
               (reissue-multiselector-cell s postlines)))
          ((string= type "Checkbox")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-checkbox-cell s postlines)))
          ((string= type "Radiobutton")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-radiobutton-cell s postlines)))
          ((string= type "Interval") (reissue-interval-cell s postlines))
          ((string= type "Intermenu") (reissue-intermenu-cell s postlines))
          ((string= type "Stringfield") (reissue-stringfield-cell s postlines))
          ((string= type "Text") (reissue-text-cell s postlines))
          ((string= type "Textarea") (reissue-text-cell s postlines))
          ((string= type "Message")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-message-cell s postlines)))
          ((string= type "Subframe")
           (if (string= cellname revname)
               (progn (output-query-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (expand-subframe-cell s revname postlines)))
          (t (reissue-other postlines)))))

(defun expand-multiselector-cell (s postlines)
  (let (name slot references value options)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (read-value-string (cdr (pop postlines))))
    (when (and postlines (not (string= (caar postlines) name))) (pop postlines))    
    (cond (value (setq references (newrefs value references))
                 (setq options (find-components slot value references)))
          (t (setq references nil options (find-options slot))))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-selector s *cells* (nconc references (cons 'unknown options)) 'unknown)
    (format-button s (strappend "Expand." (stringify *cells*)) "Expand")
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>~%")
    (format-hidden s "Cell-End" "")
    postlines))

(defun expand-subframe-cell (s revname postlines)
  (let ((slot) (class))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq class (cdar postlines))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-close-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>")
    (format s "an object of type ~A<BR>" (string-downcase class))
    (setq postlines (expand-subframe s revname postlines))
    (format s "</TD></TR></TABLE>")
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    (pop postlines)
    postlines))


(defun reissue-frame (s classname postlines)
  (let ((class (read-value-string classname)) (revname))
    (output-prolog s 200)
    (output-header s "Find ~A" (prettify class))
    (format s "<P>Find every <B>")
    (output-classlink s class)
    (format s "</B> that satisfies the following criteria.")
    (setq revname (getf-revname postlines))
    (format s "<FORM ACTION=FRAME? METHOD=POST>" (addressify class))
    (setq postlines (reissue-subframe s revname postlines))
    (setq postlines (reissue-frame-sorters s class postlines))
    (reissue-frame-commands s postlines)
    (format s "</FORM>")
    (output-footer s)))

(defun reissue-subframe (s revname postlines)
  (let ((classname (cdr (pop postlines)))
        (predicatename (cdr (pop postlines)))
        (aspectname (cdr (pop postlines))))
    (format-hidden s "Class" (htmlify classname))
    (format-hidden s "Predicate" (htmlify predicatename))
    (format-hidden s "Aspect" (htmlify aspectname))
    (format s "<TABLE>")
    (do ()
        ((or (null postlines) (string= (caar postlines) "Concept-End"))
         (pop postlines))
        (setq postlines (reissue-cell s revname postlines)))
    (format s "</TABLE>")
    (format-hidden s "Concept-End" "")
    postlines))

(defun reissue-cell (s revname postlines)
  (let ((cellname (cdar postlines)) (type (cdadr postlines)))
    (cond ((string= type "Typein")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-typein-cell s postlines)))
          ((string= type "MultiChoiceList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-menu-cell s postlines)))
          ((string= type "DropdownList")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-selector-cell s postlines)))
          ((string= type "Multiselector")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-multiselector-cell s postlines)))
          ((string= type "Checkbox")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-checkbox-cell s postlines)))
          ((string= type "Radiobutton")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-radiobutton-cell s postlines)))
          ((string= type "Interval") (reissue-interval-cell s postlines))
          ((string= type "Intermenu") (reissue-intermenu-cell s postlines))
          ((string= type "Stringfield") (reissue-stringfield-cell s postlines))
          ((string= type "Text") (reissue-text-cell s postlines))
          ((string= type "Textarea") (reissue-text-cell s postlines))
          ((string= type "Message")
           (if (string= cellname revname)
               (progn (output-subframe-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-message-cell s postlines)))
          ((string= type "Subframe")
           (if (string= cellname revname)
               (progn (output-query-cell s (read-value-string (cdaddr postlines)))
                      (reissue-other postlines))
               (reissue-subframe-cell s revname postlines)))
          (t (reissue-other postlines)))))

(defun reissue-menu-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-values slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "MultiChoiceList")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-menu s *cells* options values)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-selector-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-possibilities slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-selector s *cells* options (car values))
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-multiselector-cell (s postlines)
  (let (slot references options value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (or (read-value-string (cdr (pop postlines))) 'unknown))
    (pop postlines)
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-selector s *cells* (nconc references (cons 'unknown options)) value)
    (format-button s (strappend "Expand." (stringify *cells*)) "Expand")
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-checkbox-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-values slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Checkbox")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-checkboxes s *cells* options values)
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-radiobutton-cell (s postlines)
  (let (name slot options values)
    (setq name (cdr (pop postlines)))
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq options (find-values slot))
    (do ()
        ((or (null postlines) (not (string= (caar postlines) name)))
         (pop postlines))
        (setq values (cons (read-value-string (cdr (pop postlines))) values)))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Radiobutton")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (output-radiobuttons s *cells* options (car values))
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-interval-cell (s postlines)
  (let (slot min max)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq min (cdr (pop postlines)))
    (setq max (cdr (pop postlines)))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Interval")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (format s "</TD><TD>")
    (format s "At least ")
    (format-text s "Min" min 10)
    (format s " and at most ")
    (format-text s "Max" max 10)
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-intermenu-cell (s postlines)
  (let (slot min max options)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq min (read-value-string (cdr (pop postlines))))
    (setq max (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (setq options (find-alternatives slot))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Intermenu")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (format s "</TD><TD>")
    (format s "At least ")
    (format s "<SELECT NAME=\"Min\">~%")
    (format s "  <OPTION>~%")
    (dolist (option options)
      (if (equal option min)
          (format s "  <OPTION SELECTED>~A~%" (stringify option))
          (format s "  <OPTION>~A~%" (stringify option))))
    (format s "</SELECT>~%")
    (format s " and at most ")
    (format s "<SELECT NAME=\"Max\">~%")
    (format s "  <OPTION>~%")
    (dolist (option options)
      (if (equal option max)
          (format s "  <OPTION SELECTED>~A~%" (stringify option))
          (format s "  <OPTION>~A~%" (stringify option))))
    (format s "</SELECT>~%")
    (format s "</TD><TD VALIGN=TOP>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-stringfield-cell (s postlines)
  (let ((slot) (value) (match))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (unless (string= (caar postlines) "Cell-End")
      (setq match (cdr (pop postlines))))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Stringfield")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=\"TOP\">")
    (format s "</TD><TD>")
    (format-text s (stringify *cells*) (htmlify value) 30)
    (format-checkbox s (stringify slot) "Exact?" (string= match "Exact?"))
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-text-cell (s postlines)
  (let ((slot) (value) (match))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (setq match (cdr (pop postlines)))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Text")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (format s "</TD><TD>")
    (format-text s (stringify *cells*) (htmlify value) 21)
    (format s "<SELECT NAME=\"Match\">")
    (if (equal match "All Words")
        (format s "<OPTION SELECTED>All Words")
        (format s "<OPTION>All Words"))
    (if (equal match "Any Word")
        (format s "<OPTION SELECTED>Any Word")
        (format s "<OPTION>Any Word"))
    (if (equal match "Phrase")
        (format s "<OPTION SELECTED>Phrase")
        (format s "<OPTION>Phrase"))
    (format s "</SELECT>")
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-message-cell (s postlines)
  (let ((slot) (subframe))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq subframe (subframep slot))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Message")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (when subframe
      (format-button s (strappend "Command." (stringify *cells*)) "  "))
    (format s "</TD><TD>")
    (if subframe (format s "Press button to specify constraints.")
        (format s "Cannot specify values for this attribute."))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-subframe-cell (s revname postlines)
  (let ((slot) (class))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq class (cdar postlines))
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Subframe")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-close-button s *cells*)
    (format s "</TD><TD>")
    (format s "<TABLE WIDTH=100% BORDER><TR><TD>")
    (format s "an object of type ~A<BR>" (string-downcase class))
    (setq postlines (reissue-subframe s revname postlines))
    (format s "</TD></TR></TABLE>")
    (format s "</TD><TD></TD></TR>")
    (format-hidden s "Cell-End" "")
    (pop postlines)
    postlines))

(defun reissue-typein-cell (s postlines)
  (let ((slot) (value))
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (pop postlines)
    (format-hidden s "Cell-Start" (stringify (incf *cells*)))
    (format-hidden s "Style" "Typein")
    (format-hidden s "Slot" (stringify slot))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (output-slotlink s slot)
    (format s "</TH><TD VALIGN=TOP>")
    (output-open-button s slot *cells*)
    (format s "</TD><TD>")
    (format-text s (stringify *cells*) (htmlify value) 40)
    (format s "</TD><TD>")
    (format s (prettify (find-searchlabel slot)))
    (format s "</TD></TR>")
    (format-hidden s "Cell-End" "")
    postlines))

(defun reissue-other (postlines)
  (do ((n 0) (pair (pop postlines) (pop postlines)))
      ((null pair) nil)
      (cond ((string= (car pair) "Cell-Start") (setq n (1+ n)))
            ((string= (car pair) "Cell-End")
             (setq n (1- n))
             (if (= n 0) (return postlines))))))

(defun reissue-frame-sorters (s class postlines)
  (when (string= (caar postlines) "Sorter")
    (format s "<P><HR>")
    (do ((slots (sortable-slots class)) (sorter) (order))
        ((or (null postlines) (not (string= (caar postlines) "Sorter")))
         postlines)
        (setq sorter (read-value-string (cdr (pop postlines)))
              order (read-value-string (cdr (pop postlines))))
        (format s "<P>Sort by ")
        (output-selector s 'sorter (cons 'unknown slots) sorter)
        (format s " in ")
        (output-selector s 'order '(ascending descending) order)
        (format s " order<P>"))))

(defun reissue-frame-commands (s postlines)
  (let ((start (or (getf-post "Start" postlines) "1"))
        (solutions (or (getf-post "Solutions" postlines) "20"))
        (class (or (getf-post "Class" postlines) "")))
    (format s "<HR>")
    (format-hidden s "== Commands ==" "")
    (format s "<TABLE WIDTH=100%>")
    (format s "<TR><TD WIDTH=50% VALIGN=TOP>")
    (unless (findp `(nocommand ,*gui* count) *interface*)
      (format-button s "Command" " Count ")
      (format s " all answers for query"))
    (format s "</TD><TD>")
    (unless (findp `(nocommand ,*gui* qbe) *interface*)
      (format-button s "Command" "Convert to QBE Query"))
    (format s "</TD></TR><TR><TD>")
    (unless (findp `(nocommand ,*gui* display) *interface*)
      (format-button s "Command" "Display")
      (format s " answers ")
      (format-text s "Start" start 5)
      (format s " through ")
      (format-text s "Solutions" solutions 5))
    (format s "</TD><TD>")
    (unless (findp `(nocommand ,*gui* sql) *interface*)
      (format-button s "Command" "Convert to SQL Query"))
    (format s "</TD></TR><TR><TD>")
    (unless (findp `(nocommand ,*gui* rulify) *interface*)
      (format-button s "Command" "  Save  ")
      (format s "rule for class")
      (format-text s "Class" class 20))
    (format s "</TD><TD>")
    (unless (findp `(nocommand ,*gui* acl) *interface*)
      (format-button s "Command" "Convert to ACL Query"))
    (format s "</TD></TR><TR><TD>")
    (unless (findp `(nocommand ,*gui* rulify) *interface*)
      (format-button s "Command" "  Drop  ")
      (format s "rule for class")
      (format-text s "Class" class 20))
    (format s "</TD><TD>")
    (format s "</TD></TR></TABLE>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayselection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'displayselection)) postlines)
  (cond ((getf-post "== Commands ==" postlines)
         (process-displayselection-start s postlines))
        (t (process-displayclass-kerchunk s postlines))))

(defun process-displayselection-start (s *postlines*)
  (let (class slots aspect kif sorter order start end objects count (*var-count* 0))
    (setq class (read-value-string (cdar *postlines*)))
    (setq aspect (first-aspect *postlines*))
    (setq kif (convert-frame))
    (when (setq sorter (convert-sorters))
      (setq order (cadar sorter) sorter (caar sorter)))
    (setq start (read-value-string (getf-post "Start" *postlines*)))
    (setq end (read-value-string (getf-post "Solutions" *postlines*)))
    (setq objects (request `(ask-all ,aspect ,kif) *client* *agent*))
    (unless (viewablep *client* (gensym))
      (setq objects (remove-if-not #'(lambda (x) (viewablep *client* x)) objects)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq slots (displayable-slots class))
    (output-prolog s 200)
    (output-header s "Result")
    (cond ((= count 0) (display-failure s aspect kif))
          ((and (= count 1) (= (length slots) 1) (uniquep (car slots)))
           (display-class s class slots objects count start end))
          ((>= (1+ (- end start)) count)
           (display-class s class slots objects count start end)
           (output-more-commands s class aspect kif sorter order count start end))
          (t (format s "<CENTER><TABLE><TR><TD>")
             (display-class s class slots objects count start end)
             (format s "</TD></TR><TR><TD>")
             (output-more-commands s class aspect kif sorter order count start end)
             (format s "</TD></TR></TABLE></CENTER>")))
    (output-footer s)))

(defun process-displayselection-kerchunk (s postlines)
  (let (class aspect kif objects attributes count start end)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq aspect (read-value-string (cdr (pop postlines))))
    (setq kif (read-from-string (cdr (pop postlines))))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "End" postlines)))
    (setq objects (request `(ask-all ,aspect ,kif) *client* *agent*))
    (setq attributes (displayable-slots class))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (output-prolog s 200)
    (output-header s "DisplaySelection")
    (display-class s class attributes objects count start end)
    (output-displayselection-commands s class count start end)
    (output-footer s)))

(defun output-displayselection-commands (s class count start end)
  (format s "<FORM ACTION=DISPLAYSELECTION? METHOD=POST>")
  (format-hidden s "Class" (stringify class))
  (format-button s "Command" "   Edit   ")
  (format s "answers ")
  (format-text s "Start" (princ-to-string start) 5)
  (format s " through ")
  (format-text s "End" (princ-to-string end) 5)
  (format s "<BR>")
  (format s "</FORM>")
  (multiple-value-setq (start end) (kerchunk count start end))
  (format s "<FORM ACTION=DISPLAYCLASS? METHOD=POST>")
  (format-hidden s "Class" (stringify class))
  (format-button s "Command" "Display")
  (format s "answers ")
  (format-text s "Start" (princ-to-string start) 5)
  (format s " through ")
  (format-text s "End" (princ-to-string end) 5)
  (format s "</FORM>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; QBE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun process-qbe (s postlines)
  (let (command)
    (cond ((null postlines) (output-retrieveqbe s))
          ((and (setq command (getf-post "Command" postlines)) nil))
          ((null command) (output-qbe s (cdar postlines)))
          ((string-equal command "Examine") (output-qbe s (cdar postlines)))
;          ((string-equal command "Edit") (output-editor s postlines))
;          (t (output-change s postlines))
)))

(defun output-retrieveqbe (s)
  (output-prolog s 200)
  (output-header s "Retrieve")
  (format s "Please enter a word contained in the sentences you wish to examine:<BR>")
  (format s "<FORM ACTION=QBE? METHOD=POST>")
  (format-text s "Object" "" 40)
  (format-button s "Command" "Examine")
  (format s "</FORM>")
  (output-footer s))

(defun output-qbe (s name)
  (let ((obj (read-value-string name)))
    (output-prolog s 200)
    (output-header s "Examine ~A" (prettify obj))
    (format s "<FORM ACTION=QBE? METHOD=POST>")
    (dolist (sentence (request `(ask-about ,obj) *client* *agent*))
      (cond ((atom sentence))
            ((eq '<= (car sentence))
             (cond ((atom (cadr sentence)))
                   ((eq obj (caadr sentence))
                    (generate-atom s (cadr sentence) t)
                    (format-hidden s "Begingroup" "And")
                    (format s "<BLOCKQUOTE>") (crlf s)
                    (dolist (conjunct (cddr sentence))
                      (generate-table s conjunct))
                    (format-hidden s "Endgroup" "")
                    (format s "</BLOCKQUOTE>") (crlf s)
                    (format-hidden s "Endgroup" "") (crlf s)
                    (format s "<P><HR><P>") (crlf s))))))
    (format s "<HR>")
    (format-hidden s "Object" (stringify obj))
    (format-button s "Command" "Edit")
    (format s " these sentences.") (crlf s)
    (format s "</FORM>") (crlf s)
    (output-footer s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
