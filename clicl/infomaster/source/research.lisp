;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; search
;;; temporarily called research
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'research)) postlines)
  (cond ((null (cdr postlines))
         (process-research-start s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((string-equal command "Expand")
         (process-research-revision s postlines))
        ((string-equal command "Count")
         (process-research-count s postlines))
        ((string-equal command "Display")
         (process-research-display s postlines))
        ((string-equal command "Convert Content")
         (process-research-convert s postlines))
        (t (process-research-revision s postlines))))

(defun process-research-start (s postlines)
  (let (class structure (*buttons* 0) (*cells* 0))
    (setq class (read-user-string (cdar postlines)))
    (setq structure (maksearchstructure (gentemp "?") class))
    (output-research-page s class structure)))

(defun process-research-count (s postlines)
  (let (structure class aspect kif count)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq class (cadr structure))
    (setq aspect (car structure))
    (setq kif (maksand (reconverter structure)))
    (setq count (request `(length (ask-all ,aspect ,kif)) *client* *agent*))
    (output-prolog s 200)
    (output-header s "Result")
    (cond ((or (not (numberp count)) (= count 0)) (display-failure s aspect kif))
          ((= count 1)
           (format s "<P>There is 1 viewable answer.<P>")
           (output-more-commands s class aspect kif nil nil count 1 1))
          (t (format s "<P>There are ~D viewable answers." count)
             (output-more-commands s class aspect kif nil nil count 0 0)))
    (output-footer s)))

(defun process-research-display (s postlines)
  (let (structure class aspect kif slots objects start end count)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq class (cadr structure))
    (setq aspect (car structure))
    (setq kif (maksand (reconverter structure)))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "Solutions" postlines)))
    (setq objects (request `(ask-all ,aspect ,kif) *client* *agent*))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq slots (displayable-slots class))
    (output-prolog s 200)
    (output-header s "Result")
    (cond ((= count 0) (display-failure s aspect kif))
          ((and (= count 1) (= (length slots) 1) (uniquep (car slots)))
           (display-class s class slots objects count start end))
          ((>= (1+ (- end start)) count)
           (format s "<CENTER><TABLE><TR><TD>")
           (display-class s class slots objects count start end)
           (format s "</TD></TR><TR><TD>")
           (output-more-commands s class aspect kif nil nil count start end)
           (format s "</TD></TR></TABLE></CENTER>"))
          (t (format s "<CENTER><TABLE><TR><TD>")
             (display-class s class slots objects count start end)
             (format s "</TD></TR><TR><TD>")
             (output-more-commands s class aspect kif nil nil count start end)
             (format s "</TD></TR></TABLE></CENTER>")))
    (output-footer s)))

(defun process-research-convert (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-prolog s 200)
    (output-header s "Inspector ~A" (prettify (car structure)))
    (format s "<XMP>")
    (print-acl s `(ask-all ,(car structure) ,(maksand (reconverter structure))))
    (format s "</XMP>")
    (output-footer s)))

(defun process-research-revision (s postlines)
  (let (structure class revision (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq revision (read-user-string (getf-revision postlines)))
    (setq class (cadr structure))
    (setq structure (revisesearch structure revision))
    (output-research-page s class structure)))


(defun output-research-page (s class structure)
  (output-prolog s 200)
  (output-header s "research ~A" (prettify class))
  (format s "<FORM ACTION=RESEARCH? METHOD=POST NAME=form1>")
  (format s "Find every <B>")
  (output-classlink s class)
  (format s "</B> that satisfies the following criteria.")
  (output-research-structure s structure)
  (format s "<TABLE WIDTH=100%><TR><TD WIDTH=50% VALIGN=TOP>")
  (format-button s "Command" "Count")
  (format s "<BR>")
  (format-button s "Command" "Display")
  (format s "</TD><TD VALIGN=TOP>")
  (format-button s "Command" "Convert Content")
  (format s "</TD></TR></TABLE>")
  (format s "</FORM>")
  (output-footer s))

(defun output-research-structure (s x)
  (let (flat)
    (setq flat (findp `(nocommand ,*gui* subframe) *interface*))
    (format-hidden s "Start" "")
    (format-hidden s "Object" (stringify (car x)))
    (format-hidden s "Class" (stringify (cadr x)))
    (format s "<P><TABLE CELLSPACING=3>")
    (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (flag))
        ((null l))
        (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
        (unless (eq (caar l) flag)
          (setq multivalued (find-multivalued (caar l)))
          (setq style (find-searchstyle (caar l)))
          (output-slotlink s (caar l)))
        (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
        (setq flag (caar l))
        (cond ((null (cdar l))
               (format s "</TH><TD VALIGN=TOP>")
               (output-another-button s (incf *buttons*) multivalued)
               (output-removal-button s (incf *buttons*) multiple)
               (if flat (incf *buttons*) (output-plus-button s (incf *buttons*)))
               (format s "</TD><TD>")
               (output-change-cell s style (caar l) 'unknown)
               (incf *cells*))
              ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between)))
               (format s "</TH><TD VALIGN=TOP>")
               (output-another-button s (incf *buttons*) multivalued)
               (output-removal-button s (incf *buttons*) multiple)
               (if flat (incf *buttons*) (output-plus-button s (incf *buttons*)))
               (format s "</TD><TD>")
               (output-change-cell s style (caar l) (cadar l))
               (incf *cells*))
              (t (format s "</TH><TD VALIGN=TOP>")
                 (output-snow-button s (incf *buttons*))
                 (output-trash-button s (incf *buttons*))
                 (output-minus-button s (incf *buttons*))
                 (format s "</TD><TD>")
                 (format s "<TABLE BORDER><TR><TD>")
                 (format-hidden s "Slot" (stringify (caar l)))
                 (format-hidden s "Status" "Open")
                 (format s "~A <B>" (article (cadr (cadar l))))
                 (output-classlink s (cadr (cadar l)))
                 (format s "</B> that satisfies the following criteria<BR>")
                 (output-research-structure s (cadar l))
                 (format s "</TD></TR></TABLE>")))
        (format s "</TD></TR>")
        (crlf s))
    (format s "</TABLE>")
    (format-hidden s "End" "")))


(defun reconverter (x)
  (nreverse (reconvertertree x nil)))

(defun reconvertertree (x nl)
  (cond ((atom x) nl)
        (t (setq nl (reconverterslots x nl))
           (adjoiner (makpred (car x) (cadr x) *gui*) nl))))

(defun reconverterslots (x nl)
  (do ((l (cddr x) (cdr l)))
      ((null l) nl)
      (cond ((null (cdar l)))
            ((atom (cadar l))
             (setq nl (adjoiner (list (caar l) (car x) (cadar l)) nl)))
            ((eq (caadar l) 'taxonomy)
             (setq nl (adjoiner (raze (caar l) (car x) (car (last (cadar l))) (cdadar l)) nl)))
            (t (setq nl (adjoiner (list (caar l) (car x) (caadar l)) nl))
               (setq nl (reconvertertree (cadar l) nl))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; seek
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'seek)) postlines)
  (format s "<HTML>
<HEAD>
<TITLE>Search</TITLE>
</HEAD>
<FRAMESET COLS=\"*\" ROWS=\"76,*,36\" NAME=\"outer\" FRAMESPACING=\"0\" FRAMEBORDER=\"0\">
<FRAME SRC=\"header?\" NAME=\"header\" SCROLLING=\"no\" MARGINHEIGHT=\"0\" MARGINWIDTH=\"0\">
<FRAMESET COLS=\"190,*,190\" ROWS=\"*\" NAME=\"inner\" FRAMESPACING=\"0\" FRAMEBORDER=\"2\"> 
<FRAME SRC=\"retree?\" NAME=\"tree\" SCROLLING=\"auto\">
<FRAME SRC=\"~A\" NAME=\"query\" SCROLLING=\"auto\">
<FRAME SRC=\"~Apages/empty.html\" NAME=\"result\" SCROLLING=\"auto\">
</FRAMESET> 
<FRAME SRC=\"footer?\" NAME=\"footer\" SCROLLING=\"no\" MARGINHEIGHT=\"0\" MARGINWIDTH=\"0\">
</FRAMESET>
</HTML>"
          (if postlines (stringappend "refind?Class=" (cdar postlines))
              (stringappend *home* "pages/search.html"))
          *home*))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; find
;;; temporarily called refind
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'refind)) postlines)
  (cond ((null (cdr postlines))
         (process-refind-start s postlines))
        ((assoc ".x" postlines :test #'substringp)
         (process-refind-revision s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((string-equal command "Expand")
         (process-refind-revision s postlines))
        (t (process-refind-display s postlines))))

(defun process-refind-start (s postlines)
  (let (class structure (*buttons* 0) (*cells* 0))
    (setq class (read-user-string (cdar postlines)))
    (setq structure (maksearchstructure (gentemp "?") class))
    (output-refind-page s structure)))

(defun process-refind-display (s postlines)
  (let (structure class aspect kif)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq class (cadr structure))
    (setq aspect (car structure))
    (setq kif (maksand (reconverter structure)))
    (format s "<BODY BGCOLOR=\"WHITE\" onLoad='window.top.frames[2].document.form1.target=\"query\"'>")
    (enumerate-items s class aspect kif 1 20)
    (format s "</BODY>")))

(defun process-refind-convert (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-prolog s 200)
    (output-header s "Inspector ~A" (prettify (car structure)))
    (format s "<XMP>")
    (print-acl s `(ask-all ,(car structure) ,(maksand (reconverter structure))))
    (format s "</XMP>")
    (output-footer s)))

(defun process-refind-revision (s postlines)
  (let (structure revision (*buttons* 0) (*cells* 0))
    (setq revision (getrevision postlines))
    (setq postlines (remrevision postlines))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq structure (revisesearch structure revision))
    (output-refind-page s structure)))


(defun output-refind-page (s structure)
  (output-prolog s 200)
  (format s "<BODY BGCOLOR=WHITE onLoad='{window.document.form1.target=\"result\"; window.document.form1.submit();}'>")
  (format s "<FORM ACTION=REFIND? METHOD=POST NAME=form1>")
  (output-refind-structure s structure)
  (format-hidden s "Command" "Display")
  (format s "</FORM>"))

(defun output-refind-structure (s x)
  (let (flat)
    (setq flat (findp `(nocommand ,*gui* subframe) *interface*))
    (format-hidden s "Start" "")
    (format-hidden s "Object" (stringify (car x)))
    (format-hidden s "Class" (stringify (cadr x)))
    (format s "<P><TABLE CELLSPACING=3>")
    (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (flag))
        ((null l))
        (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
        (unless (eq (caar l) flag)
          (setq multivalued (find-multivalued (caar l)))
          (setq style (find-searchstyle (caar l)))
          (output-slotlink s (caar l)))
        (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
        (setq flag (caar l))
        (cond ((null (cdar l))
               (format s "</TH><TD VALIGN=TOP>")
               (output-find-another-button s (incf *buttons*) multivalued)
               (output-find-removal-button s (incf *buttons*) multiple)
               (if flat (incf *buttons*) (output-plus-button s (incf *buttons*)))
               (format s "</TD><TD>")
               (output-refind-cell s style (caar l) 'unknown)
               (incf *cells*))
              ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between)))
               (format s "</TH><TD VALIGN=TOP>")
               (output-find-another-button s (incf *buttons*) multivalued)
               (output-find-removal-button s (incf *buttons*) multiple)
               (if flat (incf *buttons*) (output-plus-button s (incf *buttons*)))
               (format s "</TD><TD>")
               (output-refind-cell s style (caar l) (cadar l))
               (incf *cells*))
              (t (format s "</TH><TD VALIGN=TOP>")
                 (output-find-snow-button s (incf *buttons*))
                 (output-find-trash-button s (incf *buttons*))
                 (output-find-minus-button s (incf *buttons*))
                 (format s "</TD><TD>")
                 (format s "<TABLE BORDER><TR><TD>")
                 (format-hidden s "Slot" (stringify (caar l)))
                 (format-hidden s "Status" "Open")
                 (format s "~A <B>" (article (cadr (cadar l))))
                 (output-classlink s (cadr (cadar l)))
                 (format s "</B> that satisfies the following criteria<BR>")
                 (output-refind-structure s (cadar l))
                 (format s "</TD></TR></TABLE>")))
        (format s "</TD></TR>")
        (crlf s))
    (format s "</TABLE>")
    (format-hidden s "End" "")))


(defun output-refind-cell (s style slot value)
  (cond ((eq style 'multichoicelist) (output-refind-menu s slot value))
        ((eq style 'dropdownlist) (output-refind-selector s slot value))
        ((eq style 'progressivehierarchicalchoicelist)
         (output-refind-multiselector s slot value))
        ((eq style 'checkbox) (make-edit-checkboxes s slot value))
        ((eq style 'radiobutton) (make-edit-checkboxes s slot value))
        ((eq style 'stringfield) (output-refind-text s slot value))
        ((eq style 'text) (output-refind-text s slot value))
        ((eq style 'textarea) (output-refind-textarea s slot value))
        ((eq style 'password) (make-edit-password s slot value))
        ((eq style 'urlstyle) (make-edit-text s slot value))
        ((eq style 'glyph) (output-refind-glyph s slot value))
        (t (output-refind-typein s slot value))))

(defun output-refind-menu (s slot value)
  (let (options)
    (setq options (find-alternatives slot))
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (output-menu s *cells* options (list value))
    (format-hidden s "End" "")))

(defun output-refind-selector (s slot value)
  (let (options)
    (setq options (find-possibilities slot))
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (output-refind-selectorthing s *cells* options value)
    (format-hidden s "End" "")))

(defun output-refind-multiselector (s slot value)
  (let (references options)
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (cond ((atom value) (setq references (find-references slot value)))
          (t (setq references (cdr value) value (car (last value)))))
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (output-refind-selectorthing s *cells* (nconc references (cons 'unknown options)) value)
    (output-refind-button s "Command" "Expand")
    (format-hidden s "End" "")))

(defun output-refind-textarea (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Textarea")
  (format-hidden s "Slot" (stringify slot))
  (format-textarea s (stringify *cells*) (htmlify value) 8 60)
  (format-hidden s "End" ""))

(defun output-refind-text (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringify slot))
  (format-text s (stringify *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-refind-typein (s slot value)
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringify slot))
  (format-text s (stringify *cells*) (stringify value) 40)
  (format-hidden s "End" ""))

(defun output-refind-glyph (s slot value)
  (declare (ignore slot))
  (output-value s value))


(defun output-refind-button (s name value)
  (format s "<INPUT TYPE=SUBMIT NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.submit()'>"
          name value))

(defun output-find-snow-button (s x)
  (format s "<INPUT TYPE=IMAGE SRC=\"~Aimages/new.gif\" NAME=~A BORDER=0>" *home* (addressify x)))

(defun output-find-trash-button (s x)
  (format s "<INPUT TYPE=IMAGE SRC=\"~Aimages/smalltrash.gif\" NAME=~A BORDER=0>" *home* (addressify x)))

(defun output-find-plus-button (s x)
  (format s "<INPUT TYPE=IMAGE SRC=\"~Aimages/plus.gif\" NAME=~A BORDER=0 onClick='window.document.form1.target=\"query\"'>" *home* (addressify x)))

(defun output-find-minus-button (s x)
  (format s "<INPUT TYPE=IMAGE SRC=\"~Aimages/minus.gif\" NAME=~A BORDER=0 onClick='window.document.form1.target=\"query\"'>" *home* (addressify x)))

(defun output-find-blank-button (s x)
  (declare (ignore x))
  (format s "<IMAGE SRC=\"~Aimages/maggie.gif\" BORDER=0 onClick='window.document.form1.target=\"query\"'>" *home*))

(defun output-find-empty-button (s)
  (format s "<IMAGE SRC=\"~Aimages/blank.gif\" BORDER=0 onClick='window.document.form1.target=\"query\"'>" *home*))

(defun output-find-another-button (s buttons multivalued)
  (if multivalued (output-find-snow-button s buttons)
      (output-find-empty-button s)))

(defun output-find-removal-button (s buttons partial)
  (if partial (output-find-trash-button s buttons)
      (output-find-empty-button s)))

(defun output-refind-selectorthing (s slot options value)
  (format s "<SELECT NAME=\"~A\" onChange='{window.document.form1.target=\"result\"; window.document.form1.submit()}'>" (stringify slot))
  (dolist (option options)
    (if (equalp option value)
        (format s "<OPTION SELECTED>~A~%" (stringify option))
        (format s "<OPTION>~A~%" (stringify option))))
  (format s "</SELECT>"))


(defmethod process (s (action (eql 'retree)) postlines)
  (cond ((null (cdr postlines)) (output-retaxonomy s))
        (t (reissue-retaxonomy s postlines))))

(defun output-retaxonomy (s)
  (let (tree)
    (setq tree (cons 'top (find-frames *gui*)))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=RETREE? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (dolist (item (cdr tree))
      (format s "<DT>")
      (output-retree s item))
    (format s "</FORM>")
    (format s "</BODY>")
    (crlf s)))

(defun reissue-retaxonomy (s postlines)
  (let (tree command)
    (setq tree (read-user-string (cdr (pop postlines))))
    (setq command (caar postlines))
    (setq command (read-user-string (subseq command 0 (- (length command) 2))))
    (setq tree (toggle command tree))
    (output-prolog s 200)
    (format s "<BODY BGCOLOR=\"WHITE\">")
    (format s "<FORM ACTION=RETREE? METHOD=POST NAME=formtree>")
    (format-hidden s "Tree" tree)
    (dolist (item (cdr tree))
      (format s "<DT>")
      (output-retree s item))
    (format s "</FORM>")
    (format s "</BODY>")))

(defun output-retree (s tree)
  (cond ((atom tree)
         (if (find-visible-subclass tree) (output-reclosed s tree)
             (output-relone s tree)))
        (t (format s "<DL>")
           (format s "<DT>")
           (output-reopen s (car tree))
           (dolist (item (cdr tree))
             (format s "<DD>")
             (output-retree s item))
           (format s "</DL>"))))

(defun output-reopen (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/green.gif\" BORDER=0>" class *home*)
  (format s " <A HREF=\"REFIND?Class=~A\" TARGET=\"query\">~A</A>"
          (addressify class) (iconify class))
  (unless (findp `(nocreate ,*gui* ,class) *interface*)
    (format s "<A HREF=\"CREATE?Class=~A\" TARGET=_top><IMG SRC=\"~Aimages/snowflake.gif\" BORDER=0></A>" class *home*)))

(defun output-relone (s class)
  (format s "<IMG SRC=\"~Aimages/grey.gif\">" *home*)
  (format s " <A HREF=\"REFIND?Class=~A\" TARGET=\"query\">~A</A>"
          (addressify class) (iconify class))
  (unless (findp `(nocreate ,*gui* ,class) *interface*)
    (format s "<A HREF=\"CREATE?Class=~A\" TARGET=_top><IMG SRC=\"~Aimages/snowflake.gif\" BORDER=0></A>" class *home*)))

(defun output-reclosed (s class)
  (format s "<INPUT TYPE=IMAGE NAME=~A SRC=\"~Aimages/red.gif\" BORDER=0>" class *home*)
  (format s " <A HREF=\"REFIND?Class=~A\" TARGET=\"query\">~A</A>"
          (addressify class) (iconify class))
  (unless (findp `(nocreate ,*gui* ,class) *interface*)
    (format s "<A HREF=\"CREATE?Class=~A\" TARGET=_top><IMG SRC=\"~Aimages/snowflake.gif\" BORDER=0></A>" class *home*)))

(defun getrevision (postlines)
  (do ((l postlines (cdr l)) (dum))
      ((null l) 0)
      (when (setq dum (position #\. (caar l)))
        (return (read-value-string (subseq (caar l) 0 dum))))))

(defun remrevision (postlines)
  (cond ((null postlines) nil)
        ((position #\. (caar postlines)) (remrevision (cdr postlines)))
        (t (rplacd postlines (remrevision (cdr postlines))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
