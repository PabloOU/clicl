;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (c) Copyright 2000 Michael Genesereth.  All rights reserved.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Sample Data Structure:
;;; (object class
;;;         (slot1 object)
;;;         (slot1 (object class (slot3 object) ... (slot3 object)))
;;;         (slot1 (oneof object ... object))
;;;         (slot1 (taxonomy item ... item))
;;;         (slot1 (between object object))
;;;         ...
;;;         (slot4 object))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(eval-when (compile load eval) (proclaim '(special *buttons* *cells*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; inspect
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'inspect)) postlines)
  (cond ((null (cdr postlines)) (process-inspect-start s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "  Edit ") (process-inspect-update s postlines))
        ((equalp command " Copy") (process-inspect-copy s postlines))
        ((equalp command "Delete") (process-inspect-delete s postlines))
        ((equalp command "Convert to KIF") (process-inspect-convert s postlines))
        ((equalp command "Convert to iKIF") (process-inspect-ikif s postlines))
        ((equalp command "Convert to xCBL") (process-inspect-xcbl s postlines))
        (t (process-inspect-revision s postlines))))

(defun process-inspect-start (s postlines)
  (let (object class structure (*buttons* 0))
    (setq object (read-value-string (cdr (pop postlines))))
    (setq class (or (find-isa object) 'thing))
    (setq structure (reviseitem object class))
    (output-inspect-page s object class structure)))

(defun process-inspect-update (s postlines)
  (let (structure object class (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (convert-to-update structure))
    (output-change-page s object class structure)))

(defun process-inspect-copy (s postlines)
  (let (structure object (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq structure (convert-to-update structure))
    (setq object (newinstance (cadr structure)))
    (setq structure (cons object (cdr structure)))
    (output-create-page s structure)))

(defun process-inspect-delete (s postlines)
  (let (structure facts result (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq facts (prorequest `(ask-about ,(car structure))))
    (setq result (prorequest (cons 'update (mapcar #'maknot facts))))
    (cond ((errorp result) (output-problems s result))
          (t (html-message s "Object deleted.")))))

(defun process-inspect-convert (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (output-prolog s 200)
    (output-header s "Inspect ~A" (prettify (car structure)))
    (format s "<XMP>")
    (dolist (fact (converter structure)) (print-acl s fact) (cr s))
    (format s "</XMP>")
    (output-footer s)))

(defun process-inspect-ikif (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (output-prolog s 200)
    (output-header s "Inspect ~A" (prettify (car structure)))
    (format s "<XMP>")
    (dolist (fact (converter structure)) (format s (grind fact)) (cr s))
    (format s "</XMP>")
    (output-footer s)))

(defun process-inspect-xcbl (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (output-prolog s 200)
    (output-header s "Inspect ~A" (prettify (car structure)))
    (format s "<XMP>")
    (format s (cblify structure))
    (format s "</XMP>")
    (output-footer s)))

(defun process-inspect-revision (s postlines)
  (let (structure object class revision (*buttons* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq revision (read-user-string (getf-revision postlines)))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (revise structure revision))
    (output-inspect-page s object class structure)))


(defun output-inspect-page (s object class structure)
  (output-prolog s 200)
  (output-header s "Inspect ~A" (prettify object))
  (format s "<FORM ACTION=INSPECT? METHOD=POST>")
  (format-hidden s "Structure" (htmlify (prin1-to-string structure)))
  (output-inspect-structure s structure)
  (format s "<TABLE WIDTH=100%><TR><TD WIDTH=50% VALIGN=TOP>")
  (unless (or (findp `(nocommand ,*gui* edit) *interface*)
              (findp `(nochange ,*gui* ,class) *interface*))
    (format-button s "Command" "  Edit ")
    (format s " this ~A.<BR>" (prettify class)))
  (unless (or (findp `(nocommand ,*gui* edit) *interface*)
              (findp `(nocreate ,*gui* ,class) *interface*))
    (format-button s "Command" " Copy")
    (format s " this ~A.<BR>" (prettify class))
    (format-button s "Command" "Delete")
    (format s " this ~A.<BR>" (prettify class)))
  (format s "</TD><TD VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format-button s "Command" "Convert to KIF")
    (format s "<BR>")
    (format-button s "Command" "Convert to iKIF")
    (format s "<BR>")
    (format-button s "Command" "Convert to xCBL"))
  (format s "</TD></TR></TABLE>")
  (format s "</FORM>")
  (output-footer s))

(defun output-inspect-structure (s x)
  (format s "<B>~A</B> is an object of type <B>" (prettify (car x)))
  (output-classlink s (cadr x))
  (format s "</B>.")
  (force-output s)
  (format s "<P><TABLE CELLSPACING=10>")
  (do ((l (cddr x) (cdr l)) (flag))
      ((null l))
      (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
      (unless (eq (caar l) flag) (output-slotlink s (caar l)))
      (setq flag (caar l))
      (format s "</TH><TD VALIGN=TOP>")
      (cond ((null (cdar l)))
            ((atom (cadar l)) (output-plus-button s (incf *buttons*)))
            (t (output-minus-button s (incf *buttons*))))
      (format s "</TD><TD>")
      (cond ((null (cdar l)))
            ((atom (cadar l)) (output-value-in-style s (cadar l) 'typein))
            ((eq (caadar l) 'taxonomy)
             (output-value-in-style s (car (last (cadar l))) 'typein))
            (t (format s "<TABLE BORDER><TR><TD>")
               (output-square-button s (incf *buttons*))
               (output-inspect-structure s (cadar l))
               (format s "</TD></TR></TABLE>")))
      (format s "</TD></TR>")
      (crlf s))
  (format s "</TABLE>"))

(defun output-inspect-structure (s x)
  (format s "<B>~A</B> is an object of type <B>" (prettify (car x)))
  (output-classlink s (cadr x))
  (format s "</B>.")
  (force-output s)
  (format s "<P><TABLE CELLSPACING=10>")
  (do ((l (cddr x)) (slot) (values))
      ((null l))
      (setq slot (caar l))
      (multiple-value-setq (values l) (getthevalues slot l))
      (output-multiple-cell s slot values))
  (format s "</TABLE>"))

(defun getthevalues (slot items)
  (do ((l items (cdr l)) (nl))
      ((null l) (values (nreverse nl) nil))
      (cond ((not (eq (caar l) slot)) (return (values (nreverse nl) l)))
            ((cdar l) (setq nl (cons (cadar l) nl))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; change
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'change)) postlines)
  (cond ((null (cdr postlines)) (process-change-start s postlines))
        ((string-equal (setq command (getf-post "Command" postlines)) "Expand")
         (process-change-revision s postlines))
        ((string-equal command "Update")
         (process-change-update s postlines))
        ((string-equal command " Copy ")
         (process-change-copy s postlines))
        ((string-equal command "Delete")
         (process-change-delete s postlines))
        ((string-equal command "Convert Content")
         (process-change-content s postlines))
        ((string-equal command "Convert Difference")
         (process-change-difference s postlines))
        (t (process-change-revision s postlines))))

(defun process-change-start (s postlines)
  (let (object class structure (*buttons* 0) (*cells* 0))
    (setq object (read-value-string (cdr (pop postlines))))
    (setq class (or (find-isa object) 'thing))
    (setq structure (revisenewitem object class))
    (output-change-page s object class structure)))

(defun process-change-update (s postlines)
  (let (structure object class result (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq result (prorequest (cons 'update (differentiator structure))))
    (cond ((errorp result) (output-problems s result))
          (t (setq structure (convert-to-inspect structure))
             (output-inspect-page s object class structure)))))

(defun process-change-copy (s postlines)
  (let (structure object (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq object (newinstance (cadr structure)))
    (setq structure (cons object (cdr structure)))
    (output-create-page s structure)))

(defun process-change-delete (s postlines)
  (let (structure facts result (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq facts (prorequest `(ask-about ,(car structure))))
    (setq result (prorequest (cons 'update (mapcar #'maknot facts))))
    (cond ((errorp result) (output-problems s result))
          (t (html-message s "Object deleted.")))))

(defun process-change-content (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-prolog s 200)
    (output-header s "Inspector ~A" (prettify (car structure)))
    (format s "<XMP>")
    (print-acl s (maksand (converter structure)))
    (format s "</XMP>")
    (output-footer s)))

(defun process-change-difference (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-prolog s 200)
    (output-header s "Inspector ~A" (prettify (car structure)))
    (format s "<XMP>")
    (print-acl s (maksand (differentiator structure)))
    (format s "</XMP>")
    (output-footer s)))

(defun process-change-revision (s postlines)
  (let (structure object class revision (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq revision (read-user-string (getf-revision postlines)))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (revnew structure revision))
    (output-change-page s object class structure)))


(defun output-change-page (s object class structure)
  (output-prolog s 200)
  (output-header s "Change ~A" (prettify object))
  (format s "<FORM ACTION=CHANGE? METHOD=POST NAME=form1>")
  (output-change-structure s structure)
  (format s "<TABLE WIDTH=100%><TR><TD WIDTH=50% VALIGN=TOP>")
  (format-button s "Command" "Update")
  (format s " this ~A." (prettify class))
  (format s "<BR>")
  (format-button s "Command" " Copy ")
  (format s " this ~A." (prettify class))
  (format s "<BR>")
  (format-button s "Command" "Delete")
  (format s " this ~A." (prettify class))
  (format s "</TD><TD VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format-button s "Command" "Convert Content")
    (format s "<BR>")
    (format-button s "Command" "Convert Difference"))
  (format s "</TD></TR></TABLE>")
  (format s "</FORM>")
  (output-footer s))

(defun output-change-structure (s x)
  (output-object s (car x))
  (format s " is an object of type <B>")
  (output-classlink s (cadr x))
  (format s "</B>.")
  (format-hidden s "Start" "")
  (format-hidden s "Object" (stringify (car x)))
  (format-hidden s "Class" (stringify (cadr x)))
  (format s "<P><TABLE CELLSPACING=3>")
  (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (flag))
      ((null l))
      (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
      (unless (eq (caar l) flag)
        (setq multivalued (find-multivalued (caar l)))
        (setq style (find-changestyle (caar l)))
        (output-slotlink s (caar l)))
      (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
      (setq flag (caar l))
      (cond ((null (cdar l))
             (format s "</TH><TD VALIGN=TOP>")
             (output-another-button s (incf *buttons*) multivalued)
             (output-removal-button s (incf *buttons*) multiple)
             (format s "</TD><TD>")
             (output-change-cell s style (caar l) 'unknown)
             (incf *cells*))
            ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between)))
             (format s "</TH><TD VALIGN=TOP>")
             (output-another-button s (incf *buttons*) multivalued)
             (output-removal-button s (incf *buttons*) multiple)
             (format s "</TD><TD>")
             (output-change-cell s style (caar l) (cadar l))
             (incf *cells*))
            ((prorequest `(ask-if ,(makpred (caadar l) (cadr (cadar l)) *agent*)))
             (format s "</TH><TD VALIGN=TOP>")
             (output-snow-button s (incf *buttons*))
             (output-trash-button s (incf *buttons*))
             (format s "</TD><TD>")
             (format s "<TABLE BORDER><TR><TD>")
             (format-hidden s "Slot" (stringify (caar l)))
             (format-hidden s "Status" "Open")
             (output-square-button s (incf *buttons*))
             (output-updater-structure s (cadar l))
             (format s "</TD></TR></TABLE>"))
            (t (format s "</TH><TD VALIGN=TOP>")
               (output-snow-button s (incf *buttons*))
               (output-trash-button s (incf *buttons*))
               (format s "</TD><TD>")
               (format s "<TABLE BORDER><TR><TD>")
               (format-hidden s "Slot" (stringify (caar l)))
               (format-hidden s "Status" "Open")
               (output-square-button s (incf *buttons*))
               (output-creator-structure s (cadar l))
               (format s "</TD></TR></TABLE>")))
      (format s "</TD></TR>")
      (crlf s))
  (format s "</TABLE>")
  (format-hidden s "End" ""))

(defun output-object (s x)
  (format s "<P><B><A HREF=\"INSPECT?Object=~A\" target=\"_top\">~A</A></B>"
          (addressify x) (prettify x)))


(defun output-change-cell (s style slot value)
  (cond ((eq style 'multichoicelist) (output-change-menu s slot value))
        ((eq style 'dropdownlist) (output-change-selector s slot value))
        ((eq style 'progressivehierarchicalchoicelist)
         (output-change-multiselector s slot value))
        ((eq style 'checkbox) (make-edit-checkboxes s slot value))
        ((eq style 'radiobutton) (make-edit-checkboxes s slot value))
        ((eq style 'stringfield) (output-change-text s slot value))
        ((eq style 'text) (output-change-text s slot value))
        ((eq style 'textarea) (output-change-textarea s slot value))
        ((eq style 'password) (make-edit-password s slot value))
        ((eq style 'urlstyle) (make-edit-text s slot value))
        ((eq style 'glyph) (output-change-glyph s slot value))
        (t (output-change-typein s slot value))))

(defun output-change-menu (s slot value)
  (let (options)
    (setq options (find-alternatives slot))
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (output-menu s *cells* options (list value))
    (format-hidden s "End" "")))

(defun output-change-selector (s slot value)
  (let (options)
    (setq options (find-alternatives slot))
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "DropdownList")
    (format-hidden s "Slot" (stringify slot))
    (output-selector s *cells* options value)
    (format-hidden s "End" "")))

(defun output-change-multiselector (s slot value)
  (let (references options)
    (format-hidden s "Start" (stringify (1+ *cells*)))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringify slot))
    (cond ((atom value) (setq references (find-references slot value)))
          (t (setq references (cdr value) value (car (last value)))))
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringify ref)))
    (output-selector s *cells* (nconc references (cons 'unknown options)) value)
    (format-button s "Command" "Expand")
    (format-hidden s "End" "")))

(defun output-change-textarea (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Textarea")
  (format-hidden s "Slot" (stringify slot))
  (format-textarea s (stringify *cells*) (htmlify value) 8 60)
  (format-hidden s "End" ""))

(defun output-change-text (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringify slot))
  (format-text s (stringify *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-change-typein (s slot value)
  (format-hidden s "Start" (stringify (1+ *cells*)))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringify slot))
  (format-text s (stringify *cells*) (stringify value) 40)
  (format-hidden s "End" ""))

(defun output-change-glyph (s slot value)
  (declare (ignore slot))
  (output-value s value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; create
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'create)) postlines)
  (cond ((null (cdr postlines)) (process-create-start s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((string-equal command "Create")
         (process-change-update s postlines))
        ((string-equal command "Convert Content")
         (process-change-content s postlines))
        ((string-equal command "Convert Difference")
         (process-change-difference s postlines))
        (t (process-create-revision s postlines))))

(defun process-create-start (s postlines)
  (let (object class structure (*buttons* 0) (*cells* 0))
    (setq class (or (read-value-string (cdr (pop postlines))) 'thing))
    (setq object (newinstance class))
    (setq structure (revisenewitem object class))
    (output-create-page s structure)))

(defun process-create-revision (s postlines)
  (let (structure revision (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq revision (read-user-string (getf-revision postlines)))
    (setq structure (revnew structure revision))
    (output-create-page s structure)))


(defun output-create-page (s structure)
  (output-prolog s 200)
  (output-header s "Create ~A" (prettify (cadr structure)))
  (format s "<FORM ACTION=CREATE? METHOD=POST NAME=form1>")
  (output-create-structure s structure)
  (format s "<TABLE WIDTH=100%><TR><TD WIDTH=50% VALIGN=TOP>")
  (format-button s "Command" "Create")
  (format s " this new ~A." (prettify (cadr structure)))
  (format s "</TD><TD VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format-button s "Command" "Convert Content")
    (format s "<BR>")
    (format-button s "Command" "Convert Difference"))
  (format s "</TD></TR></TABLE>")
  (format s "</FORM>")
  (output-footer s))

(defun output-create-structure (s x)
  (format-hidden s "Start" "")
  (format s "Create ")
  (cond ((findp `(noupdate ,*gui* handle) *interface*)
         (format-hidden s "Object" (stringify (car x)))
         (format s "<B>~A</B>" (prettify (car x))))
        (t (format-text s "Object" (stringify (car x)) 30)))
  (format s " as an object of type <B>")
  (output-classlink s (cadr x))
  (format s "</B>.")
  (format-hidden s "Class" (stringify (cadr x)))
  (format s "<P><TABLE CELLSPACING=3>")
  (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (flag))
      ((null l))
      (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
      (unless (eq (caar l) flag)
        (setq multivalued (find-multivalued (caar l)))
        (setq style (find-changestyle (caar l)))
        (output-slotlink s (caar l)))
      (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
      (setq flag (caar l))
      (cond ((null (cdar l))
             (format s "</TH><TD VALIGN=TOP>")
             (output-another-button s (incf *buttons*) multivalued)
             (output-removal-button s (incf *buttons*) multiple)
             (format s "</TD><TD>")
             (output-change-cell s style (caar l) 'unknown)
             (incf *cells*))
            ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between)))
             (format s "</TH><TD VALIGN=TOP>")
             (output-another-button s (incf *buttons*) multivalued)
             (output-removal-button s (incf *buttons*) multiple)
             (format s "</TD><TD>")
             (output-change-cell s style (caar l) (cadar l))
             (incf *cells*))
            ((prorequest `(ask-if ,(makpred (caadar l) (cadr (cadar l)) *agent*)))
             (format s "</TH><TD VALIGN=TOP>")
             (output-snow-button s (incf *buttons*))
             (output-trash-button s (incf *buttons*))
             (format s "</TD><TD>")
             (format s "<TABLE BORDER><TR><TD>")
             (format-hidden s "Slot" (stringify (caar l)))
             (format-hidden s "Status" "Open")
             (output-square-button s (incf *buttons*))
             (output-updater-structure s (cadar l))
             (format s "</TD></TR></TABLE>"))
            (t (format s "</TH><TD VALIGN=TOP>")
               (output-snow-button s (incf *buttons*))
               (output-trash-button s (incf *buttons*))
               (format s "</TD><TD>")
               (format s "<TABLE BORDER><TR><TD>")
               (format-hidden s "Slot" (stringify (caar l)))
               (format-hidden s "Status" "Open")
               (output-square-button s (incf *buttons*))
               (output-creator-structure s (cadar l))
               (format s "</TD></TR></TABLE>")))
      (format s "</TD></TR>")
      (crlf s))
  (format s "</TABLE>")
  (format-hidden s "End" ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; miscellaneous
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun parsestructure (postlines)
  (let (object class slots)
    (pop postlines)
    (setq object (read-user-string (cdr (pop postlines))))
    (setq class (read-user-string (cdr (pop postlines))))
    (do ((value) (nl))
        ((or (null postlines) (string= (caar postlines) "End"))
         (pop postlines)
         (setq slots (nreverse nl)))
        (multiple-value-setq (value postlines) (parsevalue postlines))
        (setq nl (cons value nl)))
    (values (list* object class slots) postlines)))

(defun parsevalue (postlines)
  (let ((type (cdadr postlines)))
    (cond ((string= type "Typein") (parsetypein postlines))
          ((string= type "MultiChoiceList") (parseother postlines))
          ((string= type "DropdownList") (parsetypein postlines))
          ((string= type "Multiselector") (parsemultiselector postlines))
          ((string= type "Checkbox") (parseother postlines))
          ((string= type "Radiobutton") (parseother postlines))
          ((string= type "Interval") (parseother postlines))
          ((string= type "Intermenu") (parseother postlines))
          ((string= type "Stringfield") (parsetext postlines))
          ((string= type "Text") (parsetext postlines))
          ((string= type "Textarea") (parsetext postlines))
          ((string= type "Password") (parsetext postlines))
          ((string= type "Subframe") (parseother postlines))
          (t (parseother postlines)))))

(defun parsetypein (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (pop postlines)
    (cond ((string= value "") (setq value (list slot)))
          (t (setq value (list slot (read-value-string value)))))
    (values value postlines)))

(defun parsemultiselector (postlines)
  (let (slot references value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (read-value-string (cdr (pop postlines))))
    (when (string= (cdar postlines) "Expand") (pop postlines))
    (pop postlines)
    (cond ((null value) (setq value (list slot)))
          ((find value references)
           (setq value (list slot `(taxonomy . ,(upthrough value references)))))
          ((= (length references) (length (find-expanders slot)))
           (setq value (list slot value)))
          (t (setq value (list slot `(taxonomy . ,(nconc references (list value)))))))
    (values value postlines)))

(defun parsetext (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (pop postlines)
    (cond ((string= value "") (setq value (list slot)))
          (t (setq value (list slot value))))
    (values value postlines)))

(defun parseother (postlines)
  (let (slot)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (do ((pair (pop postlines) (pop postlines)))
        ((or (null pair) (string= (car pair) "End"))
         (values (list slot) postlines)))))


(defun revnew (tree n)
  (do ((l (cdr tree) (cdr l)) (i 1 (+ i 2)))
      ((null (cdr l)) tree)
      (cond ((= i n)
             (rplacd (cdr l) (cons (list (caadr l)) (cddr l)))
             (return tree))
            ((= (1+ i) n) (rplacd l (cddr l)) (return tree)))))

(defun upthrough (x items)
  (do ((l items (cdr l)))
      ((null l) items)
      (when (eq (car l) x) (rplacd l nil) (return items))))

(defun find-expanders (x)
  (finds '?x `(hierarchyrelation ,x ?x) *manager*))

(defun find-multivalued (x)
  (findp `(singlevalued ,x no) *interface*))

(defun find-partial (x)
  (findp `(alwayshasvalue ,x no) *interface*))

(defun output-another-button (s buttons multivalued)
  (if multivalued (output-snow-button s buttons)
      (output-empty-button s)))

(defun output-removal-button (s buttons partial)
  (if partial (output-trash-button s buttons)
      (output-empty-button s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
