;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; To create:
;;; /usr/local/logic/sw/acl/bin/acl-batch
;;; (load "/usr/local/logic/sw/infomaster/source/loader.franz")
;;; (load "/usr/local/logic/sw/infomaster/source/build.franz")
;;; Load loop package
;;; (build-infomaster) dumps infomaster.exe to code directory
;;; copy infomaster.exe to run directory 
;;; move infomaster.exe to source/solaris
;;; source/solaris sub directory contains necessary files to build a tar file
;;; tar cvf infomaster.tar solaris/* --> infomaster.tar
;;; compress infomaster.tar --> infomaster.tar.Z
;;; move infomaster.tar to /usr/local/logic/www/software/
;;; 
;;; To extract:
;;; uncompress infomaster.tar.Z
;;; tar xvf infomaster.tar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun stop ()
  (dolist (p mp::*all-processes*)
    (if (equal (mp::process-name p) "TCP Handler") (mp::process-kill p))))

(defun quit ()
  (do ((l mp::*all-processes* (cdr l)))
      ((null l) (exit))
      (mp::process-kill (car l))))

(defun start-infomaster ()
  (let (title facilitator warehouse library manager managers) 
    (declaim (optimize (speed 2) (space 0) (debug 0) (safety 3)))
    (setq *read-default-float-format 'double-float)
    (load "sys:socket-sunsol.so")
    (when (cadr (member "-html" (sys:command-line-arguments) :test 'string=))
      (setq *web-server-port*
            (read-from-string (cadr (member "-html" (sys:command-line-arguments)
                                            :test 'string=)))))
    (when (cadr (member "-acl" (sys:command-line-arguments) :test 'string=))
      (setq *port*
            (read-from-string (cadr (member "-acl" (sys:command-line-arguments)
                                            :test 'string=)))))
    (setq *host* (long-site-name))
    (setq facilitator (read-from-string (strappend "facilitator@" *host*)))
    (setq warehouse (read-from-string (strappend "warehouse@" *host*)))
    (setq library (read-from-string (strappend "library@" *host*)))
    (setq manager (read-from-string (strappend "manager@" *host*)))
    (setq managers (contents *manager*))
    (setq managers (subst facilitator (name *facilitator*) managers))
    (setq managers (subst warehouse (name *warehouse*) managers))
    (setq managers (subst library (name *library*) managers))
    (setq managers (subst manager (name *manager*) managers))
    (define-theory *manager* "" managers)
    (set (setf (name *facilitator*) facilitator) *facilitator*)
    (set (setf (name *warehouse*) warehouse) *warehouse*)
    (set (setf (name *library*) library) *library*)
    (set (setf (name *manager*) manager) *manager*)
    (load (strappend (namestring (current-directory)) "infomaster.init")
          :if-does-not-exist nil)
    (when *web-server-port*
      (unless (ignore-errors (start-tcp-server-process #'http-handler *web-server-port*))
        (quit)))))

(defun build-infomaster ()
  (setq excl::*restart-init-function* #'start-infomaster)
  (setq excl::*read-init-files* nil)
  (excl:dumplisp
   :name "/usr/local/logic/sw/infomaster/code/infomaster.exe"
   :checkpoint nil
   :ignore-command-line-arguments t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
