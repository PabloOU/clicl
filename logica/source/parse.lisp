(defparameter *string* "")(defun internalize (s)  (parse (scan s)))(defun scan (*string*)  (do ((n 0) (char) (lexeme) (nl))      ((= n (length *string*)) (nreverse nl))      (setq char (elt *string* n))      (cond ((whitep char) (setq n (1+ n)))            ((alphanumericp char)             (multiple-value-setq (lexeme n) (scansymbol n))             (setq nl (cons lexeme nl)))            ((char-equal char #\<)             (cond ((char-equal (elt *string* (1+ n)) #\=)                    (setq nl (cons '<= nl) n (+ n 2)))                   (t (setq nl (cons '< nl) n (1+ n)))))            (t (setq nl (cons (intern (make-string 1 :initial-element char)) nl)                     n (1+ n))))))(defun scansymbol (n)  (values (read-from-string           (with-output-to-string (s)             (do ((char))                 ((or (= n (length *string*))                      (not (alphanumericp (setq char (elt *string* n))))))                 (write-char char s)                 (setq n (1+ n)))))          n))(defun whitep (char)  (find char '(#\space #\tab #\return #\linefeed)))(defun parse (*string*)  (parsexp 'lparen 'rparen))(defun parsexp (lop rop)  (do ((left (parseprefix rop)))      ((null *string*) left)      (cond ((precedencep lop (car *string*)) (return left))            (t (setq left (parseinfix left (pop *string*) 'rparen))))))(defun parseprefix (rop)  (let ((left (pop *string*)))    (cond ((prefixp left) (list left (parsexp left rop)))          (t left))))(defun parseinfix (left op rop)  (list op left (parsexp op rop)))(defun parsematchfix (op lexemes mate)  nil)(defun prefixp (x)  (and (symbolp x) (get x 'prefix)))(defun infixp (x)  (and (symbolp x) (get x 'infix)))(defun precedencep (lop rop)  (find rop (get lop 'subordinates)))(setf (get '* 'subordinates) '(+ - < >  <= => <=> rparen))(setf (get '/ 'subordinates) '(+ - < > & <= => <=> rparen))(setf (get '+ 'subordinates) '(< > & <= => <=> rparen))(setf (get '- 'subordinates) '(< > & <= => <=> rparen))(setf (get '< 'subordinates) '(& <= => <=> rparen))(setf (get '> 'subordinates) '(& <= => <=> rparen))(setf (get '& 'subordinates) '(rparen))(setf (get '<= 'subordinates) '(rparen))(setf (get '=> 'subordinates) '(rparen))(setf (get '<=> 'subordinates) '(rparen))(setf (get '* 'infix) t)(setf (get '/ 'infix) t)(setf (get '+ 'infix) t)(setf (get '- 'infix) t)(setf (get '< 'infix) t)(setf (get '> 'infix) t)(setf (get '<= 'infix) t)(setf (get '>= 'infix) t)(setf (get '<=> 'infix) t)