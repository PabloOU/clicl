(DEFVAR DATASTORE)
(DEFUN INIT_INDEX NIL (SETQ DATASTORE (MAKE-CLASS 'DICTIONARY)) (DICTIONARY-SET DATASTORE 'UNIV (MAKE-CLASS 'HASHBAG (MAKE-CLASS 'EXPR 0) (MAKE-CLASS 'EXPR 1) (MAKE-CLASS 'EXPR 2) (MAKE-CLASS 'EXPR 3) (MAKE-CLASS 'EXPR 4) (MAKE-CLASS 'EXPR 5))) (DICTIONARY-SET DATASTORE 'FS_TYPE (MAKE-CLASS 'SET (MAKE-CLASS 'EXPR 4) (MAKE-CLASS 'EXPR 5))) (DICTIONARY-SET DATASTORE 'BOOLEAN (MAKE-CLASS 'SET (MAKE-CLASS 'EXPR 2) (MAKE-CLASS 'EXPR 3))))
(DEFUN CHECK_UNIV (?X0) (RETURN-FROM CHECK_UNIV (COLLECTION-MEMBER (DICTIONARY-GET DATASTORE 'UNIV) (MAKE-CLASS 'EXPR ?X0) #'COLLECTION-EQUAL)))
(DEFUN CHECK_BOOLEAN (?X0) (RETURN-FROM CHECK_BOOLEAN (COLLECTION-MEMBER (DICTIONARY-GET DATASTORE 'BOOLEAN) (MAKE-CLASS 'EXPR ?X0) #'COLLECTION-EQUAL)))
(DEFUN CHECK_FS_TYPE (?X0) (RETURN-FROM CHECK_FS_TYPE (COLLECTION-MEMBER (DICTIONARY-GET DATASTORE 'FS_TYPE) (MAKE-CLASS 'EXPR ?X0) #'COLLECTION-EQUAL)))
(DEFUN ENUM_UNIV (?X0) (DECLARE (IGNORE ?X0)) (RETURN-FROM ENUM_UNIV (DICTIONARY-GET DATASTORE 'UNIV)))
(DEFUN ENUM_BOOLEAN (?X0) (DECLARE (IGNORE ?X0)) (RETURN-FROM ENUM_BOOLEAN (DICTIONARY-GET DATASTORE 'BOOLEAN)))
(DEFUN ENUM_FS_TYPE (?X0) (DECLARE (IGNORE ?X0)) (RETURN-FROM ENUM_FS_TYPE (DICTIONARY-GET DATASTORE 'FS_TYPE)))
(DEFUN NEGX_M (X0) (NORMRETURN NIL (FUNCALL #'NEG_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN NEGS_M (X0) (NORMRETURN NIL (FUNCALL #'NEG_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEGSUPPX_M (X0) (NORMRETURN NIL (FUNCALL #'NEG_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN NEGSUPPS_M (X0) (NORMRETURN NIL (FUNCALL #'NEG_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEG_M (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_M_F)) (NORMRETURN NEG_M (FUNCALL #'NEG_M_F ONSUCCESS X0)) (NORMRETURN NEG_M 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_M_B)) (NORMRETURN NEG_M (FUNCALL #'NEG_M_B ONSUCCESS X0)) (NORMRETURN NEG_M 'UNDEFINED))))
(DEFUN NEG_M_B (ONSUCCESS NSH90) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH90)) (WHEN (FUNCALL #'HASCELLVALUE 'E) (WHEN (EQ X0 3) (WHEN (COLLECTION-MEMBER (CELLVALUES 'E) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'E) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_M_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH90))) (NORMRETURN NEG_M_B SOFAR)))
(DEFUN NEG_M_F (ONSUCCESS NSH91) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH91)) (WHEN (FUNCALL #'HASCELLVALUE 'E) (WHEN (COLLECTION-MEMBER (CELLVALUES 'E) 3) (LET ((ARH91 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH91) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH91 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'E) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_M_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH91))) (NORMRETURN NEG_M_F SOFAR)))
(DEFUN NEGX_E (X0) (NORMRETURN NIL (FUNCALL #'NEG_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN NEGS_E (X0) (NORMRETURN NIL (FUNCALL #'NEG_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEGSUPPX_E (X0) (NORMRETURN NIL (FUNCALL #'NEG_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN NEGSUPPS_E (X0) (NORMRETURN NIL (FUNCALL #'NEG_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEG_E (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_E_F)) (NORMRETURN NEG_E (FUNCALL #'NEG_E_F ONSUCCESS X0)) (NORMRETURN NEG_E 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_E_B)) (NORMRETURN NEG_E (FUNCALL #'NEG_E_B ONSUCCESS X0)) (NORMRETURN NEG_E 'UNDEFINED))))
(DEFUN NEG_E_B (ONSUCCESS NSH92) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH92)) (WHEN (FUNCALL #'HASCELLVALUE 'M) (WHEN (EQ X0 3) (WHEN (COLLECTION-MEMBER (CELLVALUES 'M) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'M) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_E_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH92))) (NORMRETURN NEG_E_B SOFAR)))
(DEFUN NEG_E_F (ONSUCCESS NSH93) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH93)) (WHEN (FUNCALL #'HASCELLVALUE 'M) (WHEN (COLLECTION-MEMBER (CELLVALUES 'M) 3) (LET ((ARH93 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH93) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH93 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'M) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_E_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH93))) (NORMRETURN NEG_E_F SOFAR)))
(DEFUN POSX_M (X0) (NORMRETURN NIL (FUNCALL #'POS_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN POSS_M (X0) (NORMRETURN NIL (FUNCALL #'POS_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN POSSUPPX_M (X0) (NORMRETURN NIL (FUNCALL #'POS_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN POSSUPPS_M (X0) (NORMRETURN NIL (FUNCALL #'POS_M #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN POS_M (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_M_F)) (NORMRETURN POS_M (FUNCALL #'POS_M_F ONSUCCESS X0)) (NORMRETURN POS_M 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_M_B)) (NORMRETURN POS_M (FUNCALL #'POS_M_B ONSUCCESS X0)) (NORMRETURN POS_M 'UNDEFINED))))
(DEFUN POS_M_B (ONSUCCESS NSH94) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH94)) (WHEN (FUNCALL #'HASCELLVALUE 'E) (WHEN (EQ X0 3) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'E) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'E) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_M_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH94))) (NORMRETURN POS_M_B SOFAR)))
(DEFUN POS_M_F (ONSUCCESS NSH95) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH95)) (WHEN (FUNCALL #'HASCELLVALUE 'E) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'E) 3)) (LET ((ARH95 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH95) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH95 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'E) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_M_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH95))) (NORMRETURN POS_M_F SOFAR)))
(DEFUN POSX_E (X0) (NORMRETURN NIL (FUNCALL #'POS_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN POSS_E (X0) (NORMRETURN NIL (FUNCALL #'POS_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN POSSUPPX_E (X0) (NORMRETURN NIL (FUNCALL #'POS_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN POSSUPPS_E (X0) (NORMRETURN NIL (FUNCALL #'POS_E #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN POS_E (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_E_F)) (NORMRETURN POS_E (FUNCALL #'POS_E_F ONSUCCESS X0)) (NORMRETURN POS_E 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_E_B)) (NORMRETURN POS_E (FUNCALL #'POS_E_B ONSUCCESS X0)) (NORMRETURN POS_E 'UNDEFINED))))
(DEFUN POS_E_B (ONSUCCESS NSH96) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH96)) (WHEN (FUNCALL #'HASCELLVALUE 'M) (WHEN (EQ X0 3) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'M) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'M) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_E_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH96))) (NORMRETURN POS_E_B SOFAR)))
(DEFUN POS_E_F (ONSUCCESS NSH97) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH97)) (WHEN (FUNCALL #'HASCELLVALUE 'M) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'M) 3)) (LET ((ARH97 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH97) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH97 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'M) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_E_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH97))) (NORMRETURN POS_E_F SOFAR)))
(DEFUN NEGX_FS (X0) (NORMRETURN NIL (FUNCALL #'NEG_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN NEGS_FS (X0) (NORMRETURN NIL (FUNCALL #'NEG_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEGSUPPX_FS (X0) (NORMRETURN NIL (FUNCALL #'NEG_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN NEGSUPPS_FS (X0) (NORMRETURN NIL (FUNCALL #'NEG_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEG_FS (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_FS_F)) (NORMRETURN NEG_FS (FUNCALL #'NEG_FS_F ONSUCCESS X0)) (NORMRETURN NEG_FS 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_FS_B)) (NORMRETURN NEG_FS (FUNCALL #'NEG_FS_B ONSUCCESS X0)) (NORMRETURN NEG_FS 'UNDEFINED))))
(DEFUN NEG_FS_B (ONSUCCESS NSH98) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH98)) (WHEN (FUNCALL #'HASCELLVALUE 'C) (WHEN (EQ X0 5) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH98))) (WHEN (FUNCALL #'HASCELLVALUE 'O) (WHEN (EQ X0 5) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'O) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH98)) (WHEN (EQ X0 4) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'O) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH98))) (NORMRETURN NEG_FS_B SOFAR)))
(DEFUN NEG_FS_F (ONSUCCESS NSH99) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH99)) (WHEN (FUNCALL #'HASCELLVALUE 'C) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (LET ((ARH101 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH101) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH101 KEY) 0)) (WHEN (EQ X0 5) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH99))) (WHEN (FUNCALL #'HASCELLVALUE 'O) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'O) 3)) (LET ((ARH102 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH102) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH102 KEY) 0)) (WHEN (EQ X0 5) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH99)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'O) 3)) (LET ((ARH103 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH103) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH103 KEY) 0)) (WHEN (EQ X0 4) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH99))) (NORMRETURN NEG_FS_F SOFAR)))
(DEFUN POSX_O (X0) (NORMRETURN NIL (FUNCALL #'POS_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN POSS_O (X0) (NORMRETURN NIL (FUNCALL #'POS_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN POSSUPPX_O (X0) (NORMRETURN NIL (FUNCALL #'POS_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN POSSUPPS_O (X0) (NORMRETURN NIL (FUNCALL #'POS_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN POS_O (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_O_F)) (NORMRETURN POS_O (FUNCALL #'POS_O_F ONSUCCESS X0)) (NORMRETURN POS_O 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_O_B)) (NORMRETURN POS_O (FUNCALL #'POS_O_B ONSUCCESS X0)) (NORMRETURN POS_O 'UNDEFINED))))
(DEFUN POS_O_B (ONSUCCESS NSH103) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH103)) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (EQ X0 3) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 5) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_O_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH103)) (WHEN (EQ X0 3) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 4) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_O_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH103))) (NORMRETURN POS_O_B SOFAR)))
(DEFUN POS_O_F (ONSUCCESS NSH104) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH104)) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 5) (LET ((ARH105 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH105) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH105 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_O_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH104)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 4) (LET ((ARH106 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH106) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH106 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_O_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH104))) (NORMRETURN POS_O_F SOFAR)))
(DEFUN POSX_FS (X0) (NORMRETURN NIL (FUNCALL #'POS_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN POSS_FS (X0) (NORMRETURN NIL (FUNCALL #'POS_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN POSSUPPX_FS (X0) (NORMRETURN NIL (FUNCALL #'POS_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN POSSUPPS_FS (X0) (NORMRETURN NIL (FUNCALL #'POS_FS #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN POS_FS (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_FS_F)) (NORMRETURN POS_FS (FUNCALL #'POS_FS_F ONSUCCESS X0)) (NORMRETURN POS_FS 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_FS_B)) (NORMRETURN POS_FS (FUNCALL #'POS_FS_B ONSUCCESS X0)) (NORMRETURN POS_FS 'UNDEFINED))))
(DEFUN POS_FS_B (ONSUCCESS NSH106) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH106)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'FS) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (EQ X0 4) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 5)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH106)) (WHEN (EQ X0 5) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH106))) (WHEN (AND (FUNCALL #'HASCELLVALUE 'C) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (EQ X0 4) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH106))) (NORMRETURN POS_FS_B SOFAR)))
(DEFUN POS_FS_F (ONSUCCESS NSH107) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH107)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'FS) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 5)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (LET ((ARH109 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH109) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH109 KEY) 0)) (WHEN (EQ X0 4) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH107)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (LET ((ARH110 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH110) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH110 KEY) 0)) (WHEN (EQ X0 5) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH107))) (WHEN (AND (FUNCALL #'HASCELLVALUE 'C) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (LET ((ARH111 (ENUM_FS_TYPE X0))) (WITH-COLLECTION-ITERATOR (KEY ARH111) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH111 KEY) 0)) (WHEN (EQ X0 4) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_FS_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH107))) (NORMRETURN POS_FS_F SOFAR)))
(DEFUN NEGX_O (X0) (NORMRETURN NIL (FUNCALL #'NEG_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN NEGS_O (X0) (NORMRETURN NIL (FUNCALL #'NEG_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEGSUPPX_O (X0) (NORMRETURN NIL (FUNCALL #'NEG_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN NEGSUPPS_O (X0) (NORMRETURN NIL (FUNCALL #'NEG_O #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN NEG_O (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_O_F)) (NORMRETURN NEG_O (FUNCALL #'NEG_O_F ONSUCCESS X0)) (NORMRETURN NEG_O 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME NEG_O_B)) (NORMRETURN NEG_O (FUNCALL #'NEG_O_B ONSUCCESS X0)) (NORMRETURN NEG_O 'UNDEFINED))))
(DEFUN NEG_O_B (ONSUCCESS NSH111) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH111)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'C) (FUNCALL #'HASCELLVALUE 'FS)) (WHEN (EQ X0 3) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_O_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH111))) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (EQ X0 3) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 5)) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_O_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH111))) (NORMRETURN NEG_O_B SOFAR)))
(DEFUN NEG_O_F (ONSUCCESS NSH112) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH112)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'C) (FUNCALL #'HASCELLVALUE 'FS)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'C) 3)) (LET ((ARH113 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH113) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH113 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'C 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_O_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH112))) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 5)) (LET ((ARH114 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH114) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH114 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM NEG_O_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH112))) (NORMRETURN NEG_O_F SOFAR)))
(DEFUN POSX_C (X0) (NORMRETURN NIL (FUNCALL #'POS_C #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE NEWVAL))) X0)))
(DEFUN POSS_C (X0) (NORMRETURN NIL (FUNCALL #'POS_C #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SUPPORT)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR NEWVAL #'COLLECTION-EQUAL)))) X0)))
(DEFUN POSSUPPX_C (X0) (NORMRETURN NIL (FUNCALL #'POS_C #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE SOFAR)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'TRUE (MAKE-CLASS 'PAIR NEWVAL SUPPORT)))) X0)))
(DEFUN POSSUPPS_C (X0) (NORMRETURN NIL (FUNCALL #'POS_C #'(LAMBDA (NEWVAL SUPPORT SOFAR) (DECLARE (IGNORE)) (NORMRETURN NIL (MAKE-CLASS 'PAIR 'FALSE (COLLECTION-ADJOIN SOFAR (MAKE-CLASS 'PAIR NEWVAL SUPPORT) #'COLLECTION-EQUAL)))) X0)))
(DEFUN POS_C (ONSUCCESS X0) (IF (FUNCALL #'VARP X0) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_C_F)) (NORMRETURN POS_C (FUNCALL #'POS_C_F ONSUCCESS X0)) (NORMRETURN POS_C 'UNDEFINED)) (IF (FUNCALL #'FBOUNDP (FUNCTIONNAME POS_C_B)) (NORMRETURN POS_C (FUNCALL #'POS_C_B ONSUCCESS X0)) (NORMRETURN POS_C 'UNDEFINED))))
(DEFUN POS_C_B (ONSUCCESS NSH114) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH114)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'FS) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (EQ X0 3) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_C_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))) (SETQ X0 NSH114))) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (EQ X0 3) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 5) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_C_B (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))) (SETQ X0 NSH114))) (NORMRETURN POS_C_B SOFAR)))
(DEFUN POS_C_F (ONSUCCESS NSH115) (LET ((SOFAR (MAKE-CLASS 'SET)) TMP (X0 NSH115)) (WHEN (AND (FUNCALL #'HASCELLVALUE 'FS) (FUNCALL #'HASCELLVALUE 'O)) (WHEN (NOT (COLLECTION-MEMBER (CELLVALUES 'FS) 4)) (WHEN (COLLECTION-MEMBER (CELLVALUES 'O) 3) (LET ((ARH116 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH116) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH116 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS 'O) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_C_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP))))))) (SETQ X0 NSH115))) (WHEN (FUNCALL #'HASCELLVALUE 'FS) (WHEN (COLLECTION-MEMBER (CELLVALUES 'FS) 5) (LET ((ARH117 (ENUM_BOOLEAN X0))) (WITH-COLLECTION-ITERATOR (KEY ARH117) (SETQ X0 (COLLECTION-ELEMENT (COLLECTION-ELEMENT ARH117 KEY) 0)) (WHEN (EQ X0 3) (SETQ TMP (FUNCALL ONSUCCESS (MAKE-CLASS 'EXPR X0) (MAKE-CLASS 'SET 'FS) SOFAR)) (IF (EQ (COLLECTION-FIRST TMP) 'TRUE) (RETURN-FROM POS_C_F (COLLECTION-SECOND TMP)) (SETQ SOFAR (COLLECTION-SECOND TMP)))))) (SETQ X0 NSH115))) (NORMRETURN POS_C_F SOFAR)))
