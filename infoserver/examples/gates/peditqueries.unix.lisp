(defparameter *pedithouse* (make-instance 'dataserver :name 'pedithouse))

(defun makesymbol (prefix id)
   (values (symbolize (format nil "~A.~A" prefix id))))

(defun get-id-number (symbol)
  (let ((str (symbol-name symbol)))
    (values (symbolize (subseq str (+ 1 (position #\. str :from-end t)) (length str))))))

(defun make-office (building num)
  (let ((b (values (symbolize (format nil "~A-~A" (string-upcase building) num)))))
     (when (askp `(office.instance ,b) nil *integrator*) b)))

(defun drop-pedit-person-data (pers &optional (idp t) (agent *pedithouse*))
   (when (truep `(person.instance ,pers) agent)
     (unless idp
       (drop `(person.instance ,pers) agent 'matchp)
       (drop `(person.pedit-id ,pers) agent 'matchp))
     (drop `(person.firstname ,pers ?x) agent 'matchp)
     (drop `(person.lastname ,pers ?x) agent 'matchp)
     (drop `(person.url ,pers ?x) agent 'matchp)
     (drop `(person.csid ,pers ?x) agent 'matchp)
     (drop `(person.office ,pers ?x) agent 'matchp)
     (drop `(person.telephone ,pers ?x) agent 'matchp)
     (drop `(person.email ,pers ?x) agent 'matchp)
     (drop `(person.status ,pers ?x) agent 'matchp)))

(defun load-pedit-person-data (peditid &optional (idp t) (agent *pedithouse*))
   (let* ((id (if (numberp peditid) peditid (get-id-number peditid)))
          (pers (if (numberp peditid) (makesymbol "pedit-person" id) peditid))
          (p (askx '(?nam_last ?nam_first_mi ?nam_friendly ?secretary_id ?sponsor_id ?last_updated_on ?last_updated_by ?homepage)
                 `(people ,id ?nam_last ?nam_first_mi ?nam_friendly ?secretary_id ?sponsor_id ?last_updated_on ?last_updated_by ?homepage)  nil *integrator*))
          (csid (askx '?acct `(unames ,id ?acct ?uid ?uname_id) nil *integrator*))
          (ol (asks '(?office_id ?building ?room) `(offices ?office_id ,id ?building ?room) nil *integrator*))
          (pl (asks '(?phone_id ?phone_number ?phone_type ?phone_visible) `(phones ?phone_id ,id ?phone_number ?phone_type ?phone_visible) nil *integrator*))
          (rl (asks '?relation_id `(relmap ?relmap_id ,id ?relation_id) nil *integrator*))
          (palias (askx '?csname `(csaliases ?csalias_id ,id ?csname ?csname_mash ?user_editable "Y" ?alias_type) nil *integrator*))
          (fn (second p))
          (ln (first p))
          (homepage (eighth p)))
      (drop-pedit-person-data pers idp agent)
      (when p
        (unless idp
          (save `(person.instance ,pers) agent)
          (save `(person.pedit-id ,pers ,id) agent))
        (save `(person.firstname ,pers ,fn) agent)
        (save `(person.lastname ,pers ,ln) agent)
        (save `(person.fullname ,pers ,(stringappend fn " " ln)) agent)
        (when (neq 0 (length homepage)) (save `(person.url ,pers ,homepage) agent)))
      (when csid (save `(person.csid ,pers ,csid) agent))
      (when palias (save `(person.email ,pers ,(stringappend (string-downcase (symbol-name palias)) "@cs.stanford.edu")) agent))
      (dolist (off ol)
         (cond ((equal "GATES" (second off))
            (let ((o (make-office "GATES" (third off))))
               (when o
                   (save `(person.office ,pers ,o) agent))))))
      (dolist (ph pl)
         (cond ((and (equal "OFFICE" (third ph)) (eq 'y (fourth ph)))
                   (save `(person.telephone ,pers ,(second ph)) agent))))
      (dolist (r rl)
         (cond ((find r '(4 5 6 30) :test #'eq)
                  (save `(person.status ,pers faculty) agent))
               ((find r '(73 9 10 14 23 18) :test #'eq)
                  (save `(person.status ,pers student) agent))
               ((eq r 31)
                  (save `(person.status ,pers visiting-scholar) agent))
               ((find r '(11 56 57 74 75 13 58 17) :test #'eq)
                  (save `(person.status ,pers alumnus) agent))
               ((find r '(34 3 41 19 42 46 33 7 44 24 26 15) :test #'eq)
                  (save `(person.status ,pers staff) agent))))))


(defun load-pedit-by-csid (csid &optional (agent *pedithouse*))
  (let* ((id (askx '?id `(unames ?id ,(symbol-name csid) ?uid ?uname_id) nil *integrator*))
         (pers (makesymbol "pedit-person" id)))
     (when id
       (cond ((truep `(person.instance ,pers) agent)
                (drop `(person.csid ,pers ?x) agent 'matchp)
                (save `(person.csid ,pers ,csid) agent))
             (t (load-pedit-person-data id nil agent)))
       pers)))


(defun load-pedit-ids (&optional (agent *pedithouse*))
  (dolist (id (asks '?person_id
                         '(people ?person_id ?nam_last ?nam_first_mi ?nam_friendly ?secretary_id ?sponsor_id ?last_updated_on ?last_updated_by ?homepage)  nil *integrator*))
      (save `(person.instance ,(makesymbol "pedit-person" id)) agent)
      (save `(person.pedit-id ,(makesymbol "pedit-person" id) ,id) agent)))

(defun load-pedit-data  (&optional (agent *pedithouse*))
   (dolist (p (trues '?p `(person.pedit-id ?p ?id) agent))
      (print p)
      (load-pedit-person-data p t agent)))

(defun refresh-pedit-data (idl &optional (agent *pedithouse*))
   (dolist (id idl)
      (print id)
      (load-pedit-person-data id t agent)))

(defun load-pedit-email-data  (&optional (agent *pedithouse*))
   (dolist (p (trues '?p `(person.pedit-id ?p ?id) agent))
      (print p)
      (let* ((id (get-id-number p))
            (palias (askx '?csname `(csaliases ?csalias_id ,id ?csname ?csname_mash ?user_editable "Y" ?alias_type) nil *integrator*)))
         (when palias (save `(person.email ,p ,(stringappend (string-downcase (symbol-name palias)) "@cs.stanford.edu")) agent)))))

(defun load-pedit-fullname-data  (&optional (agent *pedithouse*))
   (dolist (p (trues '?p `(person.pedit-id ?p ?id) agent))
      (print p)
      (let* ((id (get-id-number p))
            (pname (askx '?nam_full `(and (people ,id ?nam_last ?nam_first_mi ?nam_friendly ?secretary_id ?sponsor_id ?last_updated_on ?last_updated_by ?homepage)
                                       (stringappend ?nam_first_mi " " ?nam_last ?nam_full))  nil *integrator*)))
         (when pname (save `(person.fullname ,p ,pname) agent)))))

