;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (c) Copyright 1999-2007 by Michael Genesereth.  All rights reserved.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; oldforma.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(eval-when (compile load eval)
  (proclaim '(special *interface* *home* *bgcolor* *border* *cells* *buttons*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Multiple Page Stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; fieldpage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'fieldpage)) postlines)
  (declare (ignore postlines))
  (format-html s) (crlf s)
  (output-head s "Fieldpage") (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (output-fieldpage s (find-classes *gui*) 4)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun output-fieldpage (s items columns)
  (let (rows width)
    (setq rows (ceiling (length items) columns))
    (setq width (floor 100 columns))
    (format s "<br/>") (crlf s)
    (format s "<center><table width='80%'><tr>") (crlf s)
    (do ((j 1 (1+ j)) (l items))
        ((> j columns))
        (format s "<td width='~A%' valign='top'><dl>"  width) (crlf s)
        (do ((i 1 (1+ i)))
            ((or (> i rows) (null l)))
            (format s "<dt>")
            (format s "<a href='seekpage?class=~A'>~A</a>"
                    (addressify (car l)) (iconify (car l)))
            (setq l (cdr l))
            (format s "</dt>")
            (crlf s))
        (format s "</dl></td>") (crlf s))
    (format s "</tr></table></center>") (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; seekpage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'seekpage)) postlines)
  (cond ((null postlines) (process-seekpage-start s))
        (t (process-seekpage-class s (read-user-string (cdar postlines))))))

(defun process-seekpage-start (s)
  (format-html s) (crlf s)
  (format s "<head>")
  (format s "<title>~A - Seek</title>" (prettify *gui*))
  (format s (javascript))
  (format s "</head>") (crlf s)
  (format-body s *bgcolor*)
  (output-header s)
  (format s "<table cellpadding='4' width='100%'><tr>") (crlf s)
  (format s "<td id='tree' width='20%' valign='top'>")
  (output-tree-start s)
  (format s "</td>") (crlf s)
  (format s "<td id='query' width='*' valign='top' bgcolor='#EEEEEE'>")
  (format s "<BR/><BR/><center><table><tr><td><UL><LI>Click on class name at left to search for items of that class.</LI><LI>Results will appear on the right.</LI></UL></td></tr></table></center>")
  (format s "</td>") (crlf s)
  (format s "<td id='result' width='20%' valign='top'></td>") (crlf s)
  (format s "</tr></table>") (crlf s)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun process-seekpage-class (s class)
  (let (structure (*buttons* 0) (*cells* 1))
    (setq structure (maksearchstructure '? class))
    (format-html s) (crlf s)
    (format s "<head>")
    (format s "<title>~A - Seek</title>" (prettify *gui*))
    (format s (javascript))
    (format s "</head>") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<table cellpadding='4' width='100%'><tr>") (crlf s)
    (format s "<td id='tree' width='20%' valign='top'>")
    (output-tree-start s)
    (format s "</td>") (crlf s)
    (format s "<td id='query' width='*' valign='top' bgcolor='#EEEEEE'>")
    (output-find s structure)
    (format s "</td>") (crlf s)
    (format s "<td id='result' width='20%' valign='top'>")
    (output-list s class '? (maksand (reconverter structure)) 1 20)
    (format s "</td>") (crlf s)
    (format s "</tr></table>") (crlf s)
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; tree
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'tree)) postlines)
  (cond ((null (cdr postlines)) (output-tree-start s))
        (t (output-tree-reissue s postlines))))

(defun process-tree (s tree node)
  (setq tree (front-toggle node tree))
  (format s "<center><b>~A</b></center>" (iconify (car tree)))
  (format s "<dl>")
  (dolist (node (cdr tree))
    (format s "<dt>")
    (output-tree s tree node)
    (format s "</dt>"))
  (format s "</dl>")
  'done)

(defun output-tree-start (s)
  (let (tree)
    (setq tree (cons 'top (find-classes *gui*)))
    (format s "<center><b>Classes</b></center>")
    (format s "<dl>")
    (dolist (node (cdr tree))
      (format s "<dt>")
      (output-tree s tree node)
      (format s "</dt>"))
    (format s "</dl>")
    'done))

(defun output-tree-reissue (s postlines)
  (let (tree node)
    (setq tree (read-user-string (cdr (pop postlines))))
    (setq node (read-user-string (cdr (pop postlines))))
    (setq tree (front-toggle node tree))
    (format s "<center><b>~A</b></center>" (iconify (car tree)))
    (format s "<dl>")
    (dolist (node (cdr tree))
      (format s "<dt>")
      (output-tree s tree node)
      (format s "</dt>"))
    (format s "</dl>")
    'done))

(defun output-tree (s tree node)
  (cond ((atom node)
         (if (find-subclass node) (output-tree-closed s tree node)
             (output-tree-lone s node)))
        (t (format s "<dl>")
           (format s "<dt>")
           (output-tree-open s tree (car node))
           (format s "</dt>")
           (dolist (node (cdr node))
             (format s "<dd>")
             (output-tree s tree node)
             (format s "</dd>"))
           (format s "</dl>"))))

(defun output-tree-open (s tree node)
  (format s "<span style='cursor:pointer; font-weight:bold; text-decoration:underline; color:#0000FF' onClick=\"postFrontdoorwidget('~A','~A')\">" tree node)
  (format s (iconify node))
  (format s "</span>"))

(defun output-tree-closed (s tree node)
  (format s "<span style='cursor:pointer; font-weight:bold; text-decoration:underline; color:#0000FF' onClick=\"postFrontdoorwidget('~A','~A')\">" tree node)
  (format s (iconify node))
  (format s "</span>"))

(defun output-tree-lone (s node)
  (format s "<span style='cursor:pointer; font-weight:bold; text-decoration:underline; color:#0000FF' onClick=\"loneClickEventHandler('~A')\">" node)
  (format s (iconify node))
  (format s "</span>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; find
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'find)) postlines)
  (cond ((null (cdr postlines)) (process-find-start s postlines))
        ((assoc ".x" postlines :test #'substringp)
         (process-find-revision s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Expand") (process-find-revision s postlines))
        (t (process-find-display s postlines))))

(defun process-find-start (s postlines)
  (let (class structure (*buttons* 0) (*cells* 1))
    (setq class (read-user-string (cdar postlines)))
    (setq structure (maksearchstructure (gentemp "?") class))
    (output-find s structure)))

(defun process-find-display (s postlines)
  (let (structure class aspect kif)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq class (cadr structure))
    (setq aspect (car structure))
    (setq kif (maksand (reconverter structure)))
    (output-list s class aspect kif 1 20)))

(defun process-find-revision (s postlines)
  (let (structure revision (*buttons* 0) (*cells* 1))
    (setq revision (getrevision postlines))
    (setq postlines (remrevision postlines))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq structure (revisesearch structure revision))
    (output-find s structure)))

(defun output-find (s structure)
  (when (cddr structure)
    (format s "<p>Find every <b>")
    (output-classlink s (cadr structure))
    (format s "</b> that satisfies the following criteria.</p>")
    (output-find-structure s structure)))

(defun output-find-structure (s x)
  (let (flat)
    (setq flat (findp `(nocommand ,*gui* subframe) *interface*))
    (format s "<form id='query' action='find?' method='post' name='form1' target='result'>")
    (format-hidden s "Start" "")
    (format-hidden s "Object" (stringize (car x)))
    (format-hidden s "Class" (stringize (cadr x)))
    (format s "<table cellspacing='3'>")
    (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (flag))
        ((null l))
      (format s "<tr><th align='left' valign='top'>")
      (unless (eq (caar l) flag)
        (setq multivalued (find-multivalued (caar l)))
        (setq style (find-searchstyle (caar l)))
        (output-slotlink s (caar l)))
      (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
      (setq flag (caar l))
      (cond ((null (cdar l))
             (format s "</th><td valign='top'>")
             (format-another-button s (incf *buttons*) multivalued)
             (format-removal-button s (incf *buttons*) multiple)
             (if (or flat (not (subframeablep (caar l)))) (incf *buttons*)
                 (format-plus-button s (incf *buttons*)))
             (format s "</td><td>")
             (output-find-cell s style (caar l) 'unknown (cadr x))
             (incf *cells*))
            ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between substring)))
             (format s "</th><td valign='top'>")
             (format-another-button s (incf *buttons*) multivalued)
             (format-removal-button s (incf *buttons*) multiple)
             (if (or flat (not (subframeablep (caar l)))) (incf *buttons*)
                 (format-plus-button s (incf *buttons*)))
             (format s "</td><td>")
             (output-find-cell s style (caar l) (cadar l) (cadr x))
             (incf *cells*))
            (t (format s "</th><td valign='top'>")
               (format-snow-button s (incf *buttons*))
               (format-trash-button s (incf *buttons*))
               (format-minus-button s (incf *buttons*))
               (format s "</td><td>")
               (format s "<table border><tr><td>")
               (format-hidden s "Start" "")
               (format-hidden s "Style" "Subframe")
               (format-hidden s "Slot" (stringize (caar l)))
               (format s "~A <b>" (article (cadr (cadar l))))
               (output-classlink s (cadr (cadar l)))
               (format s "</b> that satisfies the following criteria<br/>")
               (output-find-structure s (cadar l))
               (format-hidden s "End" "")
               (format s "</td></tr></table>")))
      (format s "</td></tr>")
      (crlf s))
    (format s "</table>")
    (format-hidden s "End" "")
    (format s "</form>") (crlf s)))

(defun subframeablep (x)
  (findp `(and (range ,x ?y) (attribute ?y ?z)) *interface*))

(defun format-another-button (s buttons multivalued)
  (if multivalued (format-snow-button s buttons)
      (output-empty-button s)))

(defun format-removal-button (s buttons partial)
  (if partial (format-trash-button s buttons)
      (output-empty-button s)))

(defun format-snow-button (s x)
  (format s "<span onClick=\"postAugmentWidget('~A',form1)\"><img src=\"~Aimages/new.gif\"/></span>" x *home*))

(defun format-trash-button (s x)
  (format s "<span onClick=\"postReviseWidget('~A',form1)\"><img src=\"~Aimages/smalltrash.gif\"/></span>" x *home*))

(defun format-plus-button (s x)
  (format s "<span onClick=\"postReviseWidget('~A',form1)\"><img src=\"~Aimages/plus.gif\"/></span>" x *home*))

(defun format-minus-button (s x)
  (format s "<span onClick=\"postReviseWidget('~A',form1)\"><img src=\"~Aimages/minus.gif\"/></span>" x *home*))

(defun output-find-cell (s style slot value class)
  (cond ((eq style 'menu) (output-find-menu s slot value))
        ((eq style 'multichoicelist) (output-find-menu s slot value))
        ((eq style 'selector) (output-find-selector s slot value class))
        ((eq style 'dropdownlist) (output-find-selector s slot value class))
        ((eq style 'hierarchicalselector) (output-find-multiselector s slot value))
        ((eq style 'checkbox) (output-find-checkbox s slot value))
        ((eq style 'radiobutton) (output-find-radiobutton s slot value))
        ((eq style 'interval) (output-find-interval s slot value))
        ((eq style 'textarea) (output-find-textarea s slot value))
        ((eq style 'stringfield) (output-find-stringfield s slot value))
        ((eq style 'text) (output-find-text s slot value))
        ((eq style 'password) (output-find-password s slot value))
        ((eq style 'urlstyle) (output-find-text s slot value))
        ((eq style 'glyph) (output-find-glyph s slot value))
        (t (output-find-typein s slot value))))

(defun output-find-menu (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Menu")
  (format-hidden s "Slot" (stringize slot))
  (output-menu-result s *cells* (find-values slot) (list value))
  (format-hidden s "End" ""))

(defparameter *seekoptions* t)

(defun output-find-selector (s slot value class)
  (let (possibilities)
    (if *seekoptions*
      (setq possibilities (seekoptions slot class))
      (setq possibilities (find-possibilities slot class)))
    (when (eq value 'any) (setq possibilities (nconc possibilities `(any))))
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Selector")
    (format-hidden s "Slot" (stringize slot))
    (output-selector-result s *cells* possibilities value)
    (format-hidden s "End" "")))

(defun output-find-multiselector (s slot value)
  (let (references options)
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringize slot))
    (cond ((atom value) (setq references (find-references slot value)))
          (t (setq references (cdr value) value (car (last value)))))
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringize ref)))
    (output-selector-result s *cells* (nconc references (cons 'unknown options)) value)
    (format-expand-button s)
    (format-hidden s "End" "")))

(defun output-find-checkbox (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Checkbox")
  (format-hidden s "Slot" (stringize slot))
  (output-checkbox s *cells* (find-values slot) (list value))
  (format-hidden s "End" ""))

(defun output-find-radiobutton (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Radiobutton")
  (format-hidden s "Slot" (stringize slot))
  (output-radiobutton s *cells* (find-values slot) (list value))
  (format-hidden s "End" ""))

(defun output-find-interval (s slot value)
  (let (min max)
    (cond ((and (listp value) (eq 'between (car value)))
           (setq min (cadr value) max (caddr value)))
          (t (setq min 'unknown max 'unknown)))
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Interval")
    (format-hidden s "Slot" (stringize slot))
    (format s "At least ")
    (output-text s "Min" (stringize min) 10)
    (format s " and at most ")
    (output-text s "Max" (stringize max) 10)
    (format-hidden s "End" "")))

(defun output-find-stringfield (s slot value)
  (let (match)
    (cond ((and (listp value) (eq 'substring (car value)))
           (setq value (cadr value) match t))
          (t (setq value "" match nil)))
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Stringfield")
    (format-hidden s "Slot" (stringize slot))
    (output-text s (stringize *cells*) value 30)
    (format-checkbox s "Match" "Exact?" match)
    (format-hidden s "End" "")))

(defun output-find-textarea (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Textarea")
  (format-hidden s "Slot" (stringize slot))
  (output-text s (stringize *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-find-text (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringize slot))
  (output-text s (stringize *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-find-password (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Password")
  (format-hidden s "Slot" (stringize slot))
  (output-text s (stringize *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-find-glyph (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Glyph")
  (format-hidden s "Slot" (stringize slot))
  (format-hidden s (stringize *cells*) (stringize value))
  (output-value s value)
  (format-hidden s "End" ""))

(defun output-find-typein (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringize slot))
  (output-text s (stringize *cells*) (stringize value) 40)
  (format-hidden s "End" ""))

(defun output-menu-result (s slot options values)
  (when options
    (format s "<select name='~A' size='~D' MULTIPLE onChange='postEnumeratewidget(this.form)'>"
            (stringize slot) (menu-size (length options)))
    (dolist (option options)
      (cond ((member option values :test #'equalp)
             (format s "<option SELECTED>~A" (stringize option)) (crlf s))
            (t (format s "<option>~A" (stringize option)) (crlf s))))
    (format s "</select>")))

(defun output-selector-result (s slot options value)
  (when options
    (format s "<select name='~A' onChange='postEnumeratewidget(this.form)'>"
            (stringize slot))
    (dolist (option options)
      (cond ((equalp option value)
             (format s "<option SELECTED>~A</option>" (stringize option)) (crlf s))
            (t (format s "<option>~A</option>" (stringize option)) (crlf s))))
    (format s "</select>")))

(defun format-expand-button (s)
  (format s "<input type='button' value='Expand' onClick=\"postRequest('find?',getFormValues(form1) + '&Command=Expand')\"/>"))

(defun output-checkbox (s slot options values)
  (let (slotname optionname)
    (setq slotname (stringize slot))
    (format s "<dl>")
    (dolist (option options)
      (setq optionname (stringize option))
      (format s "<dt>")
      (format s "<input type='checkbox' name='~A' value='~A' " slotname optionname)
      (when (find option values :test #'equalp) (format s "CHECKED "))
      (format s "onClick='postEnumeratewidget(this.form)'>")
      (format s optionname)
      (format s "</dt>"))
    (format s "</dl>")))

(defun output-radiobutton (s slot options values)
  (let (slotname optionname)
    (setq slotname (stringize slot))
    (format s "<dl>")
    (dolist (option options)
      (setq optionname (stringize option))
      (format s "<dt>")
      (format s "<input type='radio' name='~A' value='~A' " slotname optionname)
      (when (find option values :test #'equalp) (format s "checked='1' "))
      (format s "onClick='postEnumeratewidget(this.form)'>")
      (format s optionname)
      (format s "</dt>"))
    (format s "</dl>")))

(defun output-fastchange-text (s name value size)
  (format s "<input type='text' name='~A' value='~A' size='~A'/>"
          name (if (stringp value) value (stringize value)) size))

(defun output-text (s name value size)
  (format s "<input type='text' name='~A' " name)
  (unless (string= value "") (format s "value='~A' " value))
  (format s "size='~A' onChange='textchange=true;' onKeyPress='return textEdit(event)' onBlur='textBlur(event)'/>" size))

(defmethod seekoptions (slot class)
  (let (options)
    (cond ((setq options (results 'option slot *interface*))
           (cons 'unknown options))
          ((setq options (options slot class *agent*))
           (cons 'unknown (sort options #'lessp)))
          (t (list 'unknown)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; list
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (action (eql 'list)) postlines)
  (cond ((string= (getf-post "Command" postlines) "Display")
         (process-list-display s postlines))
        ((string= (getf-post "Command" postlines) "Back")
         (process-list-previous s postlines))
        ((string= (getf-post "Command" postlines) "Next")
         (process-list-next s postlines))
        (t (http-problem s "Obsolete form."))))

(defun process-list-display (s *postlines*)
  (let (class slots aspect kif start end objects selections sorter count)
    (setq class (read-value-string (cdr (pop *postlines*))))
    (setq aspect (read-value-string (cdr (pop *postlines*))))
    (setq kif (read-from-string (cdr (pop *postlines*))))
    (setq start (read-value-string (getf-post "Start" *postlines*)))
    (setq end (read-value-string (getf-post "End" *postlines*)))
    (setq objects (request `(ask-all ,aspect ,kif) *client* *agent*))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq selections (find-selections *client* objects))
    (setq slots (displayable-slots class))
    (cond ((= count 0)   (format s "<P>There are no viewable answers."))
          ((and (= count 1) (= (length slots) 1) (uniquep (car slots)))
           (output-display-page s class aspect kif slots objects selections count start end))
          (t (output-display-page s class aspect kif slots objects selections count start end)))))

(defun process-list-previous (s postlines)
  (let (class aspect kif start end)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq aspect (read-value-string (cdr (pop postlines))))
    (setq kif (read-from-string (cdr (pop postlines))))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "End" postlines)))
    (multiple-value-setq (start end) (keechunk start end))
    (output-list s class aspect kif start end)))

(defun process-list-next (s postlines)
  (let (class aspect kif start end)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq aspect (read-value-string (cdr (pop postlines))))
    (setq kif (read-from-string (cdr (pop postlines))))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "End" postlines)))
    (output-list s class aspect kif (+ start 20) (+ end 20))))

(defun output-list (s class aspect kif start end)
  (let (items count sorter)
    (setq items (request `(ask-all ,aspect ,kif) *client* *agent*))
    (when (setq sorter (find-sorter class))
      (setq items (sortem items sorter 'ascending)))
    (multiple-value-setq (items count start end) (trim items start end))
    (format s "<form action='list?' method='post'>" (addressify class))
    (format-hidden s "Class" (stringize class))
    (format-hidden s "Aspect" (stringize aspect))
    (format-hidden s "Kif" (htmlify (prin1-to-string (decolonize kif))))
    (format-hidden s "Start" (stringize start))
    (format-hidden s "End" (stringize end))
    (cond ((= count 1)
           (format s "<p><center>")
           (format-button s "Command" "Display")
           (format s "</center></p>")
           (format s "<center><b>1 item</b></center>"))
          ((> count 20)
           (format s "<p><center>")
           (format-button s "Command" "Display")
           (format s "</center></p>")
           (format s "<center><b>~A - ~A of ~A items</b></center></p>" start end count))
          (t (format s "<p><center>")
             (format-button s "Command" "Display")
             (format s "</center></p>")
             (format s "<center><b>~A items</b></center></p>" count)))
    (format s "</form>")
    (format s "<dl>")
    (do ((l items (cdr l)) (i 1 (1+ i)))
        ((or (null l) (> i 20)))
        (format s "<dt>")
        (output-value s (car l))   ;;; (output-view s (car l) class)
        (format s "</dt>")
        (crlf s))
    (format s "</dl>")
    (when (> count 20)
      (format s "<form action='list?' method='post'>" (addressify class))
      (format-hidden s "Class" (stringize class))
      (format-hidden s "Aspect" (stringize aspect))
      (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
      (format-hidden s "Start" (stringize start))
      (format-hidden s "End" (stringize end))
      (format s "<p><center>")
      (format-back-button s)
      (format-next-button s)
      (format s "</center></p>")
      (format s "</form>"))))

(defun format-back-button (s)
  (format s "<input type='button' name='Button' value=' Back ' onClick='postEnumerateBack(this.form)'/>"))

(defun format-next-button (s)
  (format s "<input type='button' name='Button' value=' Next ' onClick='postEnumerateNext(this.form)'/>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; showpage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'showpage)) postlines)
  (let (dum start end)
    (cond ((setq dum (getf-post "Class" postlines))
           (setq start (or (read-value-string (getf-post "Start" postlines)) 1))
           (setq end (or (read-value-string (getf-post "End" postlines)) *count*))
           (process-showpage s `(? ,(read-user-string dum)) start end))
          ((setq dum (getf-post "Structure" postlines))
           (setq start (or (read-value-string (getf-post "Start" postlines)) 1))
           (setq end (or (read-value-string (getf-post "End" postlines)) *count*))
           (process-showpage s (read-user-string dum) start end))
          (t (http-problem s "Bad request.")))))

(defun process-showpage (s structure start end)
  (let (objects attributes results count)
    (setq objects (asks (car structure) (maksand (reconverter structure)) nil *gui*))
    (setq attributes (displayable-slots (cadr structure)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq results (prorequest `(ask-table ,objects ,attributes)))
    (format-html s) (crlf s)
    (output-head s "Showpage") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (output-showpage s structure objects attributes results count start end)
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun output-showpage (s structure objects slots results count start end)
  (format s "<center>")
  (cond ((= count 0) (format s "There are no viewable answers."))
        ((and (= start 1) (geqp end count))
         (output-show-inner s (cadr structure) objects slots results)
         (format s "<form action='display?' method='post'>" (stringize structure))
         (format-hidden s "Class" (stringize (cadr structure)))
         (unless (findp `(or (nocommand ,*gui* create) (nocreate ,*gui* ,(cadr structure))) *interface*)
           (format-button s "Command" "Create")
           (format s " a new ~A." (prettify (cadr structure))))
         (format s "</form>") (crlf s))
        (t (format s "<table>")
           (format s "<tr><td>There are ~D viewable answers.  The following table shows answers ~A through ~A.</td></tr>"
                   count start end)
           (format s "<tr><td>")
           (output-show-inner s (cadr structure) objects slots results)
           (format s "</td></tr><tr><td>")
           (multiple-value-setq (start end) (kerchunk count start end))
           (output-show-commands s structure start end)
           (format s "</td></tr></table>")))
  (format s "</center>") (crlf s))

(defun output-show-inner (s class items slots results)
  (let (nohandle)
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (format s "<table bgcolor='~A' border='~A'>" *bgcolor* *border*)
    (format s "<tr>")
    (unless nohandle
      (format s "<th>")
      (output-classlink s class)
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<th>")
      (output-slotlink s slot)
      (format s "</th>"))
    (format s "</tr>")
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)))
        ((null l))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nohandle
          (format s "<th align='left'>")
          (output-value s (car l))
          (format s "</th>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots)) (style) (vals)) 
            ((null n))
            (setq style (find-comparestyle (car slots)))
            (setq vals (car n))
            (setq vals (remove 'unknown vals))
            (if (every #'(lambda (val) (numberp val)) vals)
                (format s "<td align='right'>")
                (format s "<td>"))
            (loop
              for val in vals
              for first-time = t then nil
              unless first-time
              do (format s ", ")
              do (output-value-in-style s val style))
            (format s "<br/></td>"))
        (format s "</tr>")
        (crlf s))
    (format s "</table>") (crlf s)))

(defun output-show-commands (s structure start end)
  (format s "<table><tr><td>")
         (format s "<form action='display?' method='post'>" (stringize structure))
         (format-hidden s "Class" (stringize (cadr structure)))
         (unless (findp `(or (nocommand ,*gui* create) (nocreate ,*gui* ,(cadr structure))) *interface*)
           (format-button s "Command" "Create")
           (format s " a new ~A." (prettify (cadr structure))))
         (format s "</form>") (crlf s)
  (format s "<form action='showpage?' method='post'>")
  (format-hidden s "Structure" (htmlify (prin1-to-string structure)))
  (format-button s "Command" "Display")
  (format s "answers ")
  (format-text s "Start" (princ-to-string start) 5)
  (format s " through ")
  (format-text s "End" (princ-to-string end) 5)
  (format s "</form>")
  (format s "</td></tr><tr><td>")
  (format s "<form action='search?' method='post'>")
  (format-hidden s "Class" (stringify (cadr structure)))
  (format-button s "Command" "Find")
  (format s " a ~A." (prettify (cadr structure)))
  (format s "</td></tr></table>")
  (format s "</form>") (crlf s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; display
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'display)) postlines)
  (cond ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Create") (process-displayclass-create s postlines))
        ((equalp command "Find") (process-display-find s postlines))
        ((equalp command "Display") (process-display-display s postlines))
        ((equalp command "Download") (process-display-download s postlines))
        (t (html-message s "Obsolete form."))))

(defun process-display-find (s postlines)
  (let (class)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (process s 'seek `(("Class" . ,(symbol-name class))))))

(defun process-display-display (s *postlines*)
  (let (class slots aspect kif start end objects selections sorter count)
    (setq class (read-user-string (getf-post "Class" *postlines*)))
    (setq aspect (read-user-string (getf-post "Aspect" *postlines*)))
    (setq kif (read-user-string (getf-post "Kif" *postlines*)))
    (setq start (read-user-string (getf-post "Start" *postlines*)))
    (setq end (read-user-string (getf-post "End" *postlines*)))
    (setq objects (prorequest `(ask-all ,aspect ,kif)))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq selections (find-selections *client* objects))
    (setq slots (displayable-slots class))
    (output-display-page s class aspect kif slots objects selections count start end)))

(defun process-display-download (s postlines)
  (let (class oldselections newselections olds news target facts)
    (setq class (read-user-string (getf-post "Class" postlines)))
    (setq oldselections (read-user-string (getf-post "Selections" postlines)))
    (multiple-value-setq (newselections postlines) (getslots "Class" postlines))
    (setq newselections (mapcar #'read-value-string newselections))
    (setq olds (difference* oldselections newselections))
    (setq news (difference* newselections oldselections))
    (setq target (viewfindx '?x `(database ,*client* ?x) *manager*))
    (dolist (x olds)
      (drop `(interested ,*client* ,x) *manager*)
      (setq facts (cons `(not ,(makpred x class target)) facts)))
    (dolist (slot (attributes class))
      (dolist (datum (request `(ask-all (,slot ?x ?y) (and (oneof ?x . ,olds) (,slot ?x ?y))) *client* *gui*))
        (setq facts (cons `(not ,datum) facts))))
    (dolist (x news)
      (save `(interested ,*client* ,x) *manager*)
      (setq facts (cons (makpred x class target) facts)))
    (dolist (slot (attributes class))
      (dolist (datum (request `(ask-all (,slot ?x ?y) (and (oneof ?x . ,news) (,slot ?x ?y))) *client* *gui*))
        (setq facts (cons datum facts))))
    (request `(update . ,(nreverse facts)) *client* target)
    (format-html s) (crlf s)
    (output-head s "Display") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<p>Data downloaded and subscription recorded.</p>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun output-display-page (s class aspect kif slots objects selections count start end)
  (format-html s) (crlf s)
  (output-head s "Display") (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (format s "<center><table><tr><td>")
  (cond ((and (= start 1) (geqp end count)))
        ((= count 1) (format s "<p>There is 1 answer.</p>"))
        (t (format s "<p>There are ~D viewable answers.  The following table shows answers ~A through ~A.</p>"
                   count start end)))
  (format s "</td></tr><tr><td>")
  (format s "<form action='display?' method='post'>")
  (output-display-table s class objects selections slots)
  (format s "</td></tr><tr><td>")
  (output-display-commands s class aspect kif objects selections count start end)
  (format s "</form>")
  (format s "</td></tr></table></center>")
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun output-display-table (s class items selections slots)
  (let (results)
    (setq results (prorequest `(ask-table ,items ,slots)))
    (cond ((and (null (cdr items)) slots (null (cdr slots)) (null (cdaar results)))
           (output-value s (caaar results)))
          (t (output-display-inner s class items selections slots results)))))

(defun output-display-inner (s class items selections slots results)
  (let (nohandle nodisplay)
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (setq nodisplay (or (null items) (findp `(nocommand ,*gui* memory) *interface*)))
    (format s "<table bgcolor='~A' border='~A'>" *bgcolor* *border*)
    (format s "<tr>")
    (unless nodisplay (format s "<th></th>"))
    (unless nohandle
      (format s "<th>")
      (output-classlink s class)
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<TH>")
      (output-slotlink s slot)
      (format s "</th>"))
    (format s "</tr>")
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)) (checked))
        ((null l))
        (if (eq (car l) (car selections))
            (setq checked t selections (cdr selections))
            (setq checked nil))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nodisplay
          (format s "<th>")
          (format-checkbox s (prettify (car l)) "" checked)
          (format s "</th>"))
        (unless nohandle
          (format s "<th align='left'>")
          (output-value s (car l))
          (format s "</th>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots)) (style) (vals)) 
            ((null n))
            (setq style (find-comparestyle (car slots)))
            (setq vals (car n))
            (setq vals (remove 'unknown vals))
            (if (every #'(lambda (val) (numberp val)) vals)
                (format s "<td align='right'>")
                (format s "<td>"))
            (loop
              for val in vals
              for first-time = t then nil
              unless first-time
              do (format s ", ")
              do (output-value-in-style s val style))
            (format s "<br/></td>"))
        (format s "</tr>")
        (crlf s))
    (format s "</table>")))

(defun output-display-commands (s class aspect kif objects selections count start end)
  (format-hidden s "Class" (stringize class))
  (format-hidden s "Aspect" (stringize aspect))
  (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
  (format-hidden s "Selections" (htmlify (prin1-to-string selections)))
  (format s "<table width='100%'><tr><td width='50%' valign='top'>")
  (unless (findp `(or (nocommand ,*gui* create) (nocreate ,*gui* ,class)) *interface*)
    (format-button s "Command" "Create")
    (format s " a new ~A." (prettify class)))
  (unless (and (= start 1) (<= count end))
    (multiple-value-setq (start end) (kerchunk count start end))
    (format s "<dt><nobr>")
    (format-button s "Command" "Display")
    (format s "answers ")
    (format-text s "Start" (princ-to-string start) 5)
    (format s " through ")
    (format-text s "End" (princ-to-string end) 5)
    (format s "</dt><dt>")
    (format-button s "Command" "Find")
    (format s " a ~A." (prettify class))
    (format s "</nobr></dt>"))
  (format s "</td><td width='50%' valign='top'>")
  (unless (or (null objects) (findp `(nocommand ,*gui* memory) *interface*))
    (format s "<dl><dt>")
    (format-top-button s "Command" "Download")
    (format s "</dt></dl>"))
  (format s "</td></tr></table>"))

(defun output-values-in-style (s vals style)
  (loop for val in vals
        for first-time = t then nil
        unless first-time
        do (format s ", ")
        do (output-value-in-style s val style)))

(defun output-real-value (s value)
  (format s "~A" (stringize value)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; update
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'update)) postlines)
  (cond ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Find") (process-update-find s postlines))
        ((equalp command "Display") (process-update-display s postlines))
        ((equalp command "Download") (process-update-download s postlines))
        (t (html-message s "Obsolete form."))))

(defun process-update-find (s postlines)
  (let (class)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (process s 'seek `(("Class" . ,(symbol-name class))))))

(defun process-update-display (s *postlines*)
  (let (class slots aspect kif start end objects selections sorter count)
    (setq class (read-user-string (getf-post "Class" *postlines*)))
    (setq aspect (read-user-string (getf-post "Aspect" *postlines*)))
    (setq kif (read-user-string (getf-post "Kif" *postlines*)))
    (setq start (read-user-string (getf-post "Start" *postlines*)))
    (setq end (read-user-string (getf-post "End" *postlines*)))
    (setq objects (prorequest `(ask-all ,aspect ,kif)))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq selections (find-selections *client* objects))
    (setq slots (displayable-slots class))
    (output-update-page s class aspect kif slots objects selections count start end)))

(defun process-update-download (s postlines)
  (let (class oldselections newselections olds news target facts)
    (setq class (read-user-string (getf-post "Class" postlines)))
    (setq oldselections (read-user-string (getf-post "Selections" postlines)))
    (multiple-value-setq (newselections postlines) (getslots "Class" postlines))
    (setq newselections (mapcar #'read-value-string newselections))
    (setq olds (difference* oldselections newselections))
    (setq news (difference* newselections oldselections))
    (setq target (viewfindx '?x `(database ,*client* ?x) *manager*))
    (dolist (x olds)
      (drop `(interested ,*client* ,x) *manager*)
      (setq facts (cons `(not ,(makpred x class target)) facts)))
    (dolist (slot (attributes class))
      (dolist (datum (request `(ask-all (,slot ?x ?y) (and (oneof ?x . ,olds) (,slot ?x ?y))) *client* *gui*))
        (setq facts (cons `(not ,datum) facts))))
    (dolist (x news)
      (save `(interested ,*client* ,x) *manager*)
      (setq facts (cons (makpred x class target) facts)))
    (dolist (slot (attributes class))
      (dolist (datum (request `(ask-all (,slot ?x ?y) (and (oneof ?x . ,news) (,slot ?x ?y))) *client* *gui*))
        (setq facts (cons datum facts))))
    (request `(update . ,(nreverse facts)) *client* target)
    (format-html s) (crlf s)
    (output-head s "Update") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<p>Data downloaded and subscription recorded.</p>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun output-update-page (s class aspect kif slots objects selections count start end)
  (format-html s) (crlf s)
  (output-head s "Update") (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (format s "<center><table><tr><td>")
  (cond ((and (= start 1) (geqp end count)))
        ((= count 1) (format s "<P>There is 1 viewable answer.<P>"))
        (t (format s "<P>There are ~D viewable answers.  The following table shows answers ~A through ~A.<P>"
                   count start end)))
  (format s "</td></tr><tr><td>")
  (format s "<form action='display?' method='post'>")
  (output-update-table s class objects selections slots)
  (format s "</td></tr><tr><td>")
  (output-update-commands s class aspect kif objects selections count start end)
  (format s "</form>")
  (format s "</td></tr></table></center>")
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun output-update-table (s class items selections slots)
  (let (results)
    (setq results (prorequest `(ask-table ,items ,slots)))
    (cond ((and (null (cdr items)) slots (null (cdr slots)) (null (cdaar results)))
           (output-value s (caaar results)))
          (t (output-update-inner s class items selections slots results)))))

(defun output-update-inner (s class items selections slots results)
  (let (nohandle nodisplay)
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (setq nodisplay (or (null items) (findp `(nocommand ,*gui* memory) *interface*)))
    (format s "<table bgcolor='white' border='~A'>" *border*)
    (format s "<tr>")
    (unless nodisplay (format s "<th></th>"))
    (unless nohandle
      (format s "<th>")
      (output-classlink s class)
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<th>")
      (output-slotlink s slot)
      (format s "</th>"))
    (format s "</tr>")
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)) (checked))
        ((null l))
        (if (eq (car l) (car selections))
            (setq checked t selections (cdr selections))
            (setq checked nil))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nodisplay
          (format s "<th>")
          (format-checkbox s (prettify (car l)) "" checked)
          (format s "</th>"))
        (unless nohandle
          (format s "<th align='left'>")
          (output-value s (car l))
          (format s "</th>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots)) (style) (vals)) 
            ((null n))
            (setq style (find-changestyle (car slots)))
            (setq vals (car n))
            (setq vals (remove 'unknown vals))
            (if (every #'(lambda (val) (numberp val)) vals)
                (format s "<td align='right'>")
                (format s "<td>"))
            (loop
              for val in vals
              for first-time = t then nil
              unless first-time
              do (format s ", ")
              do (output-value-in-style s val style))
            (format s "<br/></td>"))
        (format s "</tr>")
        (crlf s))
    (format s "</table>")))

(defun output-update-commands (s class aspect kif objects selections count start end)
  (format-hidden s "Class" (stringize class))
  (format-hidden s "Aspect" (stringize aspect))
  (format-hidden s "Kif" (htmlify (prin1-to-string kif)))
  (format-hidden s "Selections" (htmlify (prin1-to-string selections)))
  (format s "<table width='100%'><tr><td width='50%' valign='top'>")
  (unless (and (= start 1) (<= count end))
    (multiple-value-setq (start end) (kerchunk count start end))
    (format s "<dt><nobr>")
    (format-button s "Command" "Display")
    (format s "answers ")
    (format-text s "Start" (princ-to-string start) 5)
    (format s " through ")
    (format-text s "End" (princ-to-string end) 5)
    (format s "</dt><dt>")
    (format-button s "Command" "Find")
    (format s " a ~A." (prettify class))
    (format s "</nobr></dt>"))
  (format s "</td><td width='50%' valign='top'>")
  (unless (or (null objects) (findp `(nocommand ,*gui* memory) *interface*))
    (format s "<dl><dt>")
    (format-top-button s "Command" "Download")
    (format s "</dt></dl>"))
  (format s "</td></tr></table>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayclass
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'displayclass)) postlines)
  (cond ((null postlines) (html-message s "No class specified."))
        ((null (cdr postlines)) (process-displayclass-start s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Find") (process-displayclass-find s postlines))
        ((equalp command "Create") (process-displayclass-create s postlines))
        ((equalp command "   Edit   ") (process-displayclass-edit s postlines))
        ((equalp command "Display") (process-displayclass-display s postlines))
        ((equalp command "Download") (process-display-download s postlines))
        (t (html-message s "Obsolete form."))))

(defun process-displayclass-start (s postlines)
  (let (class attributes objects selections sorter count start end)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq attributes (displayable-slots class))
    (setq objects (prorequest `(ask-all ?x ,(makpred '?x class *gui*))))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (multiple-value-setq (objects count start end) (trim objects 1 20))
    (setq selections (find-selections *client* objects))
    (format-html s) (crlf s)
    (output-head s "Displayclass") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (output-displayclass s class attributes objects selections count start end)
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-displayclass-display (s postlines)
  (let (class attributes objects selections sorter count start end)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "End" postlines)))
    (setq attributes (displayable-slots class))
    (setq objects (prorequest `(ask-all ?x ,(makpred '?x class *gui*))))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (setq selections (find-selections *client* objects))
    (format-html s) (crlf s)
    (output-head s "Displayclass") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (cond ((= count 0) (format s "<CENTER>There are no viewable answers.</CENTER>"))
          (t (output-displayclass s class attributes objects selections count start end)))
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-displayclass-find (s postlines)
  (let (class)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (process s 'seek `(("Class" . ,(symbol-name class))))))

(defun process-displayclass-create (s postlines)
  (let (class)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (process s 'create `(("Class" . ,(symbol-name class))))))

(defun process-displayclass-edit (s postlines)
  (let (class attributes objects sorter count start end)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (setq start (read-value-string (getf-post "Startedit" postlines)))
    (setq end (read-value-string (getf-post "Endedit" postlines)))
    (setq attributes (modifiable-slots class))
    (setq objects (prorequest `(ask-all ?x ,(makpred '?x class *gui*))))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (when (setq sorter (find-sorter class))
      (setq objects (sortem objects sorter 'ascending)))
    (format-html s) (crlf s)
    (output-head s "Updateclass") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (output-updateclass-table s class attributes objects count start end)
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun output-displayclass (s class slots objects selections count start end)
  (format s "<center><table><tr><td>")
  (cond ((and (= start 1) (geqp end count)))
        ((= count 1) (format s "<P>There is 1 viewable answer.<P>"))
        (t (format s "<P>There are ~D viewable answers.  The following table shows answers ~A through ~A.<P>"
                   count start end)))
  (format s "</td></tr><tr><td align='center'>")
  (format s "<form action='displayclass?' method='post'>")
  (output-display-inner s class objects selections slots (prorequest `(ask-table ,objects ,slots)))
  (format s "</td></tr><tr><td>")
  (output-displayclass-commands s class count start end)
  (format s "</td></tr></table></center>")
  (format s "</form>"))

(defun output-displayclass-commands (s class count start end)
  (format-hidden s "Class" (stringize class))
  (format s "<TABLE WIDTH=100%><TR><TD VALIGN=TOP>")
  (format s "<DL>")
  (unless (findp `(or (nocommand ,*gui* create) (nocreate ,*gui* ,class)) *interface*)
    (format s "<DT>")
    (format-button s "Command" "Create")
    (format s " a new ~A." (prettify class))
    (format s "</DT>"))
  (unless (and (= start 1) (<= count end))
    (multiple-value-setq (start end) (kerchunk count start end))
    (format s "<DT>")
    (format-button s "Command" "Display")
    (format s "answers ")
    (format-text s "Start" (princ-to-string start) 5)
    (format s " through ")
    (format-text s "End" (princ-to-string end) 5)
    (format s "</DT><DT>")
    (format-button s "Command" "Find")
    (format s " a ~A." (prettify class))
    (format s "</DT>"))
  (format s "</DL></TD><TD VALIGN=TOP>")
  (format s "<DL>")
  (unless (findp `(nocommand ,*gui* memory) *interface*)
    (format s "<DT>")
    (format-top-button s "Command" "Save")
    (format-top-button s "Command" "Drop")
    (format s "</DT><DT>")
    (format s "<SELECT NAME='Target'>")
    (dolist (option (getbaskets))
      (format s "<OPTION>~A</OPTION>" (stringize option)))
    (format s "</SELECT>")
    (format s "</DT>"))
  (format s "</DL></TD></TR></TABLE>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; updateclass
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'updateclass)) postlines)
  (let (command)
    (setq command (getf-post "Command" postlines))
    (cond ((null command) (process-updateclass-start s postlines))
          ((string-equal command "   Edit   ") (process-updateclass-kerchunk s postlines))
          (t (http-problem s "Obsolete form.")))))

(defun process-updateclass-start (s postlines)
  (let (class slots objects count start end)
    (setq class (read-value-string (cdr (pop postlines))))
    (setq slots (modifiable-slots class))
    (setq objects (prorequest `(ask-all ?x ,(makpred '?x class *gui*))))
    (multiple-value-setq (objects count start end) (trim objects 1 20))
    (format s "<head>")
    (format s "<title>~A - Updateclass</title>" (prettify *gui*))
    (format s (javascript))
    (format s "</head>") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<center>")
    (output-updateclass-table s class slots objects count start end)
    (format s "</center>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-updateclass-kerchunk (s postlines)
  (let (class slots objects count start end)
    (setq class (read-value-string (getf-post "Class" postlines)))
    (setq start (read-value-string (getf-post "Start" postlines)))
    (setq end (read-value-string (getf-post "End" postlines)))
    (setq slots (modifiable-slots class))
    (setq objects (prorequest `(ask-all ?x ,(makpred '?x class *gui*))))
    (multiple-value-setq (objects count start end) (trim objects start end))
    (format-html s) (crlf s)
    (output-head s "Updateclass") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (output-updateclass-table s class slots objects count start end)
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun output-updateclass-table (s class slots objects count start end)
  (let (results)
    (cond ((and (= start 1) (geqp end count)))
          ((= count 1) (format s "<P>There is 1 viewable answer.<P>"))
          (t (format s "<p>There are ~D viewable answers  The following table shows answers ~A through ~A.</p>"
                     count start end)))
    (force-output s)
    (format s "<form action='updateclass?' method='post'>")
    (setq results (request `(ask-table ,objects ,slots) *client* *agent*))
    (output-updateclass-rowtable s class objects nil slots results)
    (output-updateclass-commands s class objects nil count start end)
    (format s "</form>")))

(defun output-updateclass-rowtable (s class items selections slots results)
  (let (nohandle nodisplay)
    (setq nohandle (findp `(nodisplay ,class handle) *interface*))
    (setq nodisplay (or (null items) (findp `(nocommand ,*gui* memory) *interface*)))
    (format s "<table bgcolor='#FFFFFF' border='~A'>" *border*)
    (format s "<tr>")
    (unless nodisplay (format s "<th></th>"))
    (unless nohandle
      (format s "<th>")
      (output-classlink s class)
      (format s "</th>"))
    (dolist (slot slots)
      (format s "<TH>")
      (output-slotlink s slot)
      (format s "</TH>"))
    (format s "</tr>") (crlf s)
    (do ((l items (cdr l)) (m results (cdr m)) (flag nil (not flag)) (checked))
        ((null l))
        (if (eq (car l) (car selections))
            (setq checked t selections (cdr selections))
            (setq checked nil))
        (if flag (format s "<tr>") (format s "<tr bgcolor='#EEEEEE'>"))
        (unless nodisplay
          (format s "<TH>")
          (format-checkbox s (prettify (car l)) "" checked)
          (format s "</TH>"))
        (unless nohandle
          (format s "<TH ALIGN=LEFT>")
          (output-value s (car l))
          (format s "</TH>"))
        (do ((n (car m) (cdr n)) (slots slots (cdr slots))) 
            ((null n))
            (if (every #'(lambda (val) (numberp val)) (car n))
                (format s "<TD ALIGN=RIGHT>")
                (format s "<TD>"))
            (output-updateclass-widget s (car slots) (car l) (car n))
            (format s "</td>"))
        (format s "</tr>"))
    (format s "</table>") (crlf s)
    (force-output s)))

(defun output-updateclass-widget (s slot object values)
  (let (style)
    (setq style (find-changestyle slot))
    (cond ((eq style 'selector) (output-updateclass-selector s slot object (car values)))
          ((eq style 'dropdownlist) (output-updateclass-selector s slot object (car values)))
          ((eq style 'checkbox) (output-updateclass-checkbox s slot object (car values)))
          (t (loop for val in values
                   for first-time = t then nil
                   unless first-time
                   do (format s ", ")
                   do (output-value-in-style s val style))))))

(defun output-updateclass-selector (s slot object value)
  (format s "<select name='~A' onClick=\"postTriple('~A','~A',this.options[this.selectedIndex].value)\">"
          (stringize slot) (stringize slot) (stringize object))
  (dolist (option (find-alternatives slot))
    (if (equalp option value)
      (format s "<option selected>~A</option>" (stringize option))
      (format s "<option>~A</option>" (stringize option))))
  (format s "</select>"))

(defun output-updateclass-checkbox (s slot object value)
  (format s "<input type='checkbox' value='Yes' ")
  (if (eq value 'yes) (format s "checked"))
  (format s " onChange=\"postTriple('~A','~A',this.checked)\">"
          (stringize slot) (stringize object)))

(defun output-updateclass-commands (s class objects selections count start end)
  (format-hidden s "Class" (stringize class))
  ;(format-hidden s "Aspect" (stringize aspect))
  ;(format-hidden s "Kif" (htmlify (prin1-to-string kif)))
  (format-hidden s "Selections" (htmlify (prin1-to-string selections)))
  (format s "<table width='100%'><tr><td width='50%' valign='top'>")
  (unless (and (= start 1) (<= count end))
    (multiple-value-setq (start end) (kerchunk count start end))
    (format s "<dt><nobr>")
    (format-button s "Command" "Display")
    (format s "answers ")
    (format-text s "Start" (princ-to-string start) 5)
    (format s " through ")
    (format-text s "End" (princ-to-string end) 5)
    (format s "</dt><dt>")
    (format-button s "Command" "Find")
    (format s " a ~A." (prettify class))
    (format s "</nobr></dt>"))
  (format s "</td><td width='50%' valign='top'>")
  (unless (or (null objects) (findp `(nocommand ,*gui* memory) *interface*))
    (format s "<dl><dt>")
    (format-top-button s "Command" "Download")
    (format s "</dt></dl>"))
  (format s "</td></tr></table>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; inspectpage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'inspect)) postlines)
  (process s 'inspectpage postlines))
 
(defmethod process (s (command (eql 'inspectpage)) postlines)
  (cond ((null (cdr postlines))
         (process-inspectpage-start s (read-value-string (cdr (pop postlines)))))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Change") (process-inspectpage-change s postlines))
        ((equalp command " Copy") (process-inspectpage-copy s postlines))
        ((equalp command "Delete") (process-inspectpage-delete s postlines))
        ((equalp command "Textual Inspector") (process-inspector-revision s postlines))
        ((equalp command "Convert to KIF") (process-inspectpage-kif s postlines))
        ((equalp command "Convert to Epilog") (process-inspectpage-epilog s postlines))
        ((equalp command "Convert to XML") (process-inspectpage-xml s postlines))
        ((equalp command "Save") (process-inspectpage-save s postlines))
        ((equalp command "Drop") (process-inspectpage-drop s postlines))
        (t (process-inspectpage-revision s postlines))))

(defun process-inspectpage-start (s object)
  (process-inspectpage-as s object (classify object *gui*)))

(defmethod process-inspectpage-as (s object class)
  (let (structure (*buttons* 0))
    (setq structure (reviseitem object class))
    (output-inspect-page s object class structure)))

(defun process-inspectpage-change (s postlines)
  (let (structure object class (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (convert-to-update structure))
    (output-change-page s object class structure)))

(defun process-inspectpage-copy (s postlines)
  (let (structure object (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq structure (convert-to-update structure))
    (setq object (newinstance (cadr structure)))
    (setq structure (cons object (cdr structure)))
    (output-create-page s structure)))

(defun process-inspectpage-delete (s postlines)
  (let (structure facts result (*buttons* 0) (*cells* 0))
    (setq structure (read-user-string (cdr (pop postlines))))
    ;(setq facts (prorequest `(ask-about ,(car structure))))
    (setq facts (facts (car structure) *agent*))
    (setq result (prorequest `(update ,(maksand (mapcar #'maknot facts)))))
    (cond ((errorp result) (output-problems s result))
          (t (html-message s "Object deleted.")))))

(defun process-inspectpage-kif (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (format-html s) (crlf s)
    (output-head s (format nil "Inspect ~A" (prettify (car structure)))) (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<XMP>")
    (dolist (fact (converter structure)) (print-acl s fact) (cr s))
    (format s "</XMP>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-inspectpage-epilog (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (format-html s) (crlf s)
    (output-head s (format nil "Inspect ~A" (prettify (car structure)))) (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<XMP>")
    (dolist (fact (converter structure)) (format s (grind fact)) (cr s))
    (format s "</XMP>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-inspectpage-xml (s postlines)
  (let (structure)
    (setq structure (read-user-string (cdr (pop postlines))))
    (format-html s) (crlf s)
    (output-head s (format nil "Inspect ~A" (prettify (car structure)))) (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<XMP>")
    (format s (cblify structure))
    (format s "</XMP>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-inspectpage-save (s postlines)
  (let (structure object class slots slotsent target)
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq slots (attributes class))
    (setq target (read-user-string (getf-post "Target" postlines)))
    (save (makpred object class target) target)
    (dolist (slot slots)
      (setq slotsent (list slot object '?y))
      (dolist (datum (request `(ask-all ,slotsent ,slotsent) *client* *gui*))
        (save datum target)))
    (format-html s) (crlf s)
    (output-head s "Save") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<P>Object added to ")
    (output-value s target)
    (format s ".</P>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-inspectpage-drop (s postlines)
  (let (structure object class slots slotsent target)
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq target (read-user-string (getf-post "Target" postlines)))
    (drop (makpred object class target) (symbol-value target))
    (dolist (slot slots)
      (setq slotsent (list slot object '?y))
      (dropall slotsent slotsent (symbol-value target)))
    (format-html s) (crlf s)
    (output-head s "Save") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<P>Object dropped from ")
    (output-value s target)
    (format s ".</P>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-inspectpage-revision (s postlines)
  (let (structure object class revision (*buttons* 0))
    (setq revision (getrevision postlines))
    (setq postlines (remrevision postlines))
    (setq structure (read-user-string (cdr (pop postlines))))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (revision structure revision))
    (output-inspect-page s object class structure)))

(defun getrevision (postlines)
  (do ((l postlines (cdr l)) (dum))
      ((null l) 0)
    (when (setq dum (position #\. (caar l)))
      (return (read-value-string (subseq (caar l) 0 dum))))))

(defun remrevision (postlines)
  (cond ((null postlines) nil)
        ((position #\. (caar postlines)) (remrevision (cdr postlines)))
        (t (rplacd postlines (remrevision (cdr postlines))))))

(defun output-inspect-page (s object class structure)
  (format-html s) (crlf s)
  (output-head s (format nil "Inspect ~A" (prettify object))) (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (format s "<div style='margin-left:10px; margin-right:10px'>") (crlf s)
  (format s "<form action='inspect?' method='post'>")
  (format-hidden s "Structure" (htmlify (prin1-to-string structure)))
  (output-inspect-structure s structure)
  (format s "<table width='100%'><tr><td width='25%' valign='top'>")
  (when (changeablep object class *gui*)
    (format s "<dl>")
    (format s "<dt>")
    (format-button s "Command" "Change")
    (format s " this ~A.</dt>" (prettify class))
    (format s "<dt>")
    (format-button s "Command" " Copy")
    (format s " this ~A.</dt>" (prettify class))
    (format s "<dt>")
    (format-button s "Command" "Delete")
    (format s " this ~A.</dt>" (prettify class))
    (format s "</dl>"))
  (unless (findp `(nocommand ,*gui* inspector) *interface*)   
    (format s "</td><td width='25%' valign='top'>")
    (format-button s "Command" "Textual Inspector"))
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format s "</td><td width='25%' valign='top'>")
    (format-button s "Command" "Convert to KIF")
    (format s "<br/>")
    (format-button s "Command" "Convert to Epilog")
    (format s "<br/>")
    (format-button s "Command" "Convert to XML"))
  (format s "</td><td width='25%' valign='top'>")
  (unless (findp `(nocommand ,*gui* memory) *interface*)
    (format s "<dl><dt>")
    (format-top-button s "Command" "Save")
    (format-top-button s "Command" "Drop")
    (format s "</dt><dt>")
    (format s "<select name='Target'>")
    (dolist (option (getbaskets))
      (format s "<option>~A</option>" (stringize option)))
    (format s "</select>")
    (format s "</dt></dl>"))
  (format s "</td><td><br/></td></tr></table>")
  (format s "</form>")
  (format s "</div>")
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun old-inspect (s obj class)
  (output-inspect-page s obj class (reviseitem obj class)))

(defun output-inspect-structure (s x)
  (format s "<BR/><B>~A</B> is " (prettify (car x)))
  (format s (article (cadr x)))
  (format s " <B>" )
  (output-classlink s (cadr x))
  (format s "</B>.")
  (force-output s)
  (format s "<table cellspacing='8'>")
  (do ((l (cddr x)) (slot) (values))
      ((null l))
      (setq slot (caar l))
      (multiple-value-setq (values l) (collectvalues slot l))
      (output-multiple-cell s slot values))
  (format s "</table>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; makefield
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'makefield)) postlines)
  (declare (ignore postlines))
  (format-html s) (crlf s)
  (output-head s "Makefield") (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (output-makefield s (find-classes *gui*) 4)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s))

(defun output-makefield (s items columns)
  (let (rows width)
    (setq rows (ceiling (length items) columns))
    (setq width (floor 100 columns))
    (format s "<br/>") (crlf s)
    (format s "<center><table width='80%'><tr>") (crlf s)
    (do ((j 1 (1+ j)) (l items))
        ((> j columns))
        (format s "<td width='~A%' valign='top'><dl>"  width) (crlf s)
        (do ((i 1 (1+ i)))
            ((or (> i rows) (null l)))
            (format s "<dt>")
            (format s "<a href='seekpage?class=~A'>~A</a>"
                    (addressify (car l)) (iconify (car l)))
            (format s "<a href='create?class=~A'><img src='~Aimages/snowflake.gif'></a>"
                    (addressify (car l)) *home*)
            (setq l (cdr l))
            (format s "</dt>")
            (crlf s))
        (format s "</dl></td>") (crlf s))
    (format s "</tr></table></center>") (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; createpage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'createpage)) postlines)
  (cond ((null (cdr postlines)) (process-createpage-start s postlines))
        ((and (setq command (getf-post "Command" postlines)) nil))
        ((equalp command "Create") (process-changepage-change s postlines))
        ((equalp command "Textual Creator") (process-create-creator s postlines))
        ((equalp command "ACL Creator") (process-create-acl s postlines))
        ((equalp command "Convert Content") (process-change-content s postlines))
        ((equalp command "Convert Difference") (process-change-difference s postlines))
        (t (process-create-revision s postlines))))

(defun process-createpage-start (s postlines)
  (let (object class structure (*buttons* 0) (*cells* 0))
    (setq class (or (read-value-string (cdr (pop postlines))) 'thing))
    (setq object (newinstance class))
    (setq structure (createitem object class))
    (output-create-page s structure)))

(defun process-create-creator (s postlines)
  (let (structure (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-creator-revision s (car structure) (cadr structure) structure)))

(defun process-create-acl (s postlines)
  (let (structure (*buttons* 0) (*cells* 1))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (generate-acl s (cons 'update (differentiator structure)))))

(defun process-create-revision (s postlines)
  (let (structure revision (*buttons* 0) (*cells* 0))
    (setq revision (getrevision postlines))
    (setq postlines (remrevision postlines))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq structure (revnew structure revision))
    (output-create-page s structure)))

(defun output-create-page (s structure)
  (format-html s) (crlf s)
  (output-head s (format nil "Create ~A" (prettify (cadr structure)))) (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (output-create s structure)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s)
  'done)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; create
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'create)) postlines)
  (process s 'createpage postlines))

(defun output-create (s structure)
  (format s "<form action=createpage? method=post name=form1>")
  (output-create-structure s structure)
  (format s "<TABLE WIDTH=100%><TR><TD WIDTH=25% VALIGN=TOP>")
  (format-button s "Command" "Create")
  (format s " this new ~A." (prettify (cadr structure)))
  (format s "</TD><TD WIDTH=25% VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* inspector) *interface*) 
    (format-button s "Command" "Textual Creator")
    (format s "<BR/>")
    (format-button s "Command" "ACL Creator"))
  (format s "</TD><TD VALIGN=TOP>")
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format-button s "Command" "Convert Content")
    (format s "<BR/>")
    (format-button s "Command" "Convert Difference"))
  (format s "</TD></TR></TABLE>")
  (format s "</FORM>") (crlf s)
  'done)

(defun output-create-structure (s x)
  (format-hidden s "Start" "")
  (format s "Create ")
  (cond ((findp `(noupdate ,*gui* handle) *interface*)
         (format-hidden s "Object" (stringize (car x)))
         (format s "<B>~A</B>" (prettify (car x))))
        (t (format-text s "Object" (stringize (car x)) 30)))
  (format s "as " (prettify (car x)))
  (format s (article (cadr x)))
  (format s " <B>" )
  (output-classlink s (cadr x))
  (format s "</B>.")
  (format-hidden s "Class" (stringize (cadr x)))
  (format s "<TABLE CELLSPACING='3'>")
  (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (label) (flag))
      ((null l))
    (format s "<TR><TH ALIGN=LEFT VALIGN=TOP>")
    (unless (eq (caar l) flag)
      (setq multivalued (find-multivalued (caar l)))
      (setq style (find-createstyle (caar l)))
      (setq label (find-createlabel (caar l)))
      (output-slotlink s (caar l)))
    (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
    (setq flag (caar l))
    (cond ((null (cdar l))
           (format s "</TH><TD VALIGN=TOP>")
           (output-another-button s (incf *buttons*) multivalued)
           (output-removal-button s (incf *buttons*) multiple)
           (format s "</TD><TD>")
           (output-change-cell s style (caar l) 'unknown)
           (incf *cells*))
          ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between substring)))
           (format s "</TH><TD VALIGN=TOP>")
           (output-another-button s (incf *buttons*) multivalued)
           (output-removal-button s (incf *buttons*) multiple)
           (format s "</TD><TD>")
           (output-change-cell s style (caar l) (cadar l))
           (incf *cells*))
          ((prorequest `(ask-if ,(makpred (caadar l) (cadr (cadar l)) *agent*)))
           (format s "</TH><TD VALIGN=TOP>")
           (output-snow-button s (incf *buttons*))
           (output-trash-button s (incf *buttons*))
           (format s "</TD><TD>")
           (format s "<TABLE BORDER><TR><TD>")
           (format-hidden s "Slot" (stringize (caar l)))
           (format-hidden s "Status" "Open")
           (output-square-button s (incf *buttons*))
           (output-updater-structure s (cadar l))
           (format s "</TD></TR></TABLE>"))
          (t (format s "</TH><TD VALIGN=TOP>")
             (output-snow-button s (incf *buttons*))
             (output-trash-button s (incf *buttons*))
             (format s "</TD><TD>")
             (format s "<TABLE BORDER><TR><TD>")
             (format-hidden s "Slot" (stringize (caar l)))
             (format-hidden s "Status" "Open")
             (output-square-button s (incf *buttons*))
             (output-creator-structure s (cadar l))
             (format s "</TD></TR></TABLE>")))
    (format s "</TD>")
    (when label (format s "<TD>~A</TD>" label))
    (format s "</TR>")
    (crlf s))
  (format s "</TABLE>")
  (format-hidden s "End" ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; changepage
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'changepage)) postlines)
  (if (findp `(nocommand ,*gui* inspect) *interface*)
    (process-changer s postlines)
    (process-changepage s postlines)))

(defun process-changepage (s postlines)
  (let (command)
    (cond ((null (cdr postlines))
           (process-changepage-start s (read-value-string (cdr (pop postlines)))))
          ((and (setq command (getf-post "Command" postlines)) nil))
          ((equalp command "Expand") (process-change-revision s postlines))
          ((equalp command "Record") (process-changepage-change s postlines))
          ((equalp command "Change") (process-changepage-change s postlines))
          ((equalp command " Copy ") (process-change-copy s postlines))
          ((equalp command "Delete") (process-change-delete s postlines))
          ((equalp command "Textual Changer") (process-change-textual s postlines))
          ((equalp command "ACL Changer") (process-change-acl s postlines))
          ((equalp command "Convert Content") (process-change-content s postlines))
          ((equalp command "Convert Difference") (process-change-difference s postlines))
          ((equalp command "Save") (process-change-save s postlines))
          ((equalp command "Drop") (process-change-drop s postlines))
          (t (process-change-revision s postlines)))))

(defun process-changepage-start (s object)
  (process-change-as s object (classify object *gui*)))

(defmethod process-change-as (s object class)
  (let (structure (*buttons* 0) (*cells* 1))
    (setq structure (revisenewitem object class))
    (output-change-page s object class structure)))

(defun process-changepage-change (s postlines)
  (let (structure object class delta result (*buttons* 0) (*cells* 1))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq delta (differentiator structure))
    (unless (null delta) (setq result (prorequest (cons 'update delta))))
    (cond ((errorp result) (output-problems s result))
          (t (output-inspect-page s object class (reviseitem object class))))))

(defun process-change-acl (s postlines)
  (let (structure (*buttons* 0) (*cells* 1))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (generate-acl s (cons 'update (differentiator structure)))))

(defun process-change-copy (s postlines)
  (let (structure object (*buttons* 0) (*cells* 1))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq object (newinstance (cadr structure)))
    (setq structure (cons object (cdr structure)))
    (output-create-page s structure)))

(defun process-change-delete (s postlines)
  (let (structure facts result (*buttons* 0) (*cells* 1))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq facts (prorequest `(ask-about ,(car structure))))
    (setq result (prorequest (cons 'update (mapcar #'maknot facts))))
    (cond ((errorp result) (output-problems s result))
          (t (html-message s "Object deleted.")))))

(defun process-change-textual (s postlines)
  (let (structure (*buttons* 0) (*cells* 0))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (output-changer-page s (car structure) (cadr structure) structure)))

(defun process-change-content (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (format-html s) (crlf s)
    (output-head s (format nil "~A" (prettify (car structure)))) (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<XMP>")
    (print-acl s (maksand (converter structure)))
    (format s "</XMP>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-change-difference (s postlines)
  (let (structure)
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (format-html s) (crlf s)
    (output-head s (format nil "~A" (prettify (car structure)))) (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<xmp>")
    (print-acl s (maksand (differentiator structure)))
    (format s "</xmp>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-change-save (s postlines)
  (let (structure object class predicates slots target)
    (setq structure (parsestructure postlines))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq predicates (predicates class))
    (setq slots (attributes class))
    (setq target (or (read-user-string (getf-post "Target" postlines)) *warehouse*))
    (save `(isa ,object ,class) (symbol-value target))
    (dolist (p predicates) (save (list p object) (symbol-value target)))
    (dolist (slot slots)
      (dolist (datum (request `(ask-all (,slot ,object ?y) (,slot ,object ?y)) *client* *gui*))
        (save datum (symbol-value target))))
    (format-html s) (crlf s)
    (output-head s "Save") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<P>Object added to ")
    (output-value s target)
    (format s ".</P>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-change-drop (s postlines)
  (let (object target)
    (setq object (car (parsestructure postlines)))
    (setq target (or (read-user-string (getf-post "Target" postlines)) *warehouse*))
    (dropall `(?r ,object) `(?r ,object) (symbol-value target))
    (dropall `(?r ,object ?y) `(?r ,object ?y) (symbol-value target))
    (format-html s) (crlf s)
    (output-head s "Save") (crlf s)
    (format-body s *bgcolor*) (crlf s)
    (output-header s)
    (format s "<P>Object dropped from ")
    (output-value s target)
    (format s ".</P>")
    (output-footer s)
    (finish-body s) (crlf s)
    (finish-html s) (crlf s)))

(defun process-change-revision (s postlines)
  (let (structure object class revision (*buttons* 0) (*cells* 1))
    (setq revision (getrevision postlines))
    (setq postlines (remrevision postlines))
    (multiple-value-setq (structure postlines) (parsestructure postlines))
    (setq object (car structure))
    (setq class (cadr structure))
    (setq structure (revnew structure revision))
    (output-change-page s object class structure)))

(defun output-change-page (s object class structure)
  (format-html s) (crlf s)
  (output-head s (format nil "Change ~A" (prettify object))) (crlf s)
  (format-body s *bgcolor*) (crlf s)
  (output-header s)
  (output-change s class structure)
  (output-footer s)
  (finish-body s) (crlf s)
  (finish-html s) (crlf s)
  'done)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; change
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (command (eql 'change)) postlines)
  (process s 'changepage postlines))

(defun output-change (s class structure)
  (format s "<form action='changepage?' method='post' name='form1'>")
  (output-change-structure s structure)
  (format s "<table width='100%'><tr><td width='25%' valign='top'>")
  (format-button s "Command" "Record")
  (format s " changes.")
  (format s "<br/>")
  (format-button s "Command" " Copy ")
  (format s " this ~A." (prettify class))
  (format s "<br/>")
  (format-button s "Command" "Delete")
  (format s " this ~A." (prettify class))
  (unless (findp `(nocommand ,*gui* inspector) *interface*)   
    (format s "</td><td width='25%' valign='top'>")
    (format-button s "Command" "Textual Changer")
    (format s "<BR/>")
    (format-button s "Command" "ACL Changer"))
  (unless (findp `(nocommand ,*gui* convert) *interface*)   
    (format s "</td><td width='25%' valign='top'>")
    (format-button s "Command" "Convert Content")
    (format s "<BR/>")
    (format-button s "Command" "Convert Difference"))
  (format s "</td><td width='25%' valign='top'>")
  (unless (findp `(nocommand ,*gui* memory) *interface*)
    (format-top-button s "Command" "Save")
    (format-top-button s "Command" "Drop") (format s "<br/>")
    (format s "<select name='Target'>")
    (dolist (option (getbaskets))
      (format s "<option>~A</option>" (stringize option)))
    (format s "</select>"))
  (format s "</td><td><br/></td></tr></table>")
  (format s "</form>") (crlf s)
  'done)

(defun output-change-structure (s x)
  (format s "<br/>")
  (format s "<B>~A</B> is " (prettify (car x)))
  (format s (article (cadr x)))
  (format s " <B>" )
  (output-classlink s (cadr x))
  (format s "</B>.")
  (format-hidden s "Start" "")
  (format-hidden s "Object" (stringize (car x)))
  (format-hidden s "Class" (stringize (cadr x)))
  (format s "<p><table cellspacing='3'>")
  (do ((l (cddr x) (cdr l)) (multivalued) (multiple) (style) (label) (flag))
      ((null l))
    (format s "<tr><th align='left' valign='top'>")
    (unless (eq (caar l) flag)
      (setq multivalued (find-multivalued (caar l)))
      (setq style (find-changestyle (caar l)))
      (setq label (find-changelabel (caar l)))
      (output-slotlink s (caar l)))
    (setq multiple (or (eq (caar l) flag) (eq (caar l) (caadr l))))
    (setq flag (caar l))
    (cond ((null (cdar l))
           (format s "</th><td valign='top'>")
           (output-another-button s (incf *buttons*) multivalued)
           (output-removal-button s (incf *buttons*) multiple)
           (format s "</td><td>")
           (output-change-cell s style (caar l) 'unknown)
           (incf *cells*))
          ((or (atom (cadar l)) (find (caadar l) '(oneof taxonomy between substring)))
           (format s "</th><td valign='top'>")
           (output-another-button s (incf *buttons*) multivalued)
           (output-removal-button s (incf *buttons*) multiple)
           (format s "</td><td>")
           (output-change-cell s style (caar l) (cadar l))
           (incf *cells*))
          ((prorequest `(ask-if ,(makpred (caadar l) (cadr (cadar l)) *agent*)))
           (format s "</th><td valign='top'>")
           (output-snow-button s (incf *buttons*))
           (output-trash-button s (incf *buttons*))
           (format s "</td><td>")
           (format s "<table border><tr><td>")
           (format-hidden s "Slot" (stringize (caar l)))
           (format-hidden s "Status" "Open")
           (output-square-button s (incf *buttons*))
           (output-updater-structure s (cadar l))
           (format s "</td></tr></table>"))
          (t (format s "</th><td valign='top'>")
             (output-snow-button s (incf *buttons*))
             (output-trash-button s (incf *buttons*))
             (format s "</td><td>")
             (format s "<table border><tr><td>")
             (format-hidden s "Slot" (stringize (caar l)))
             (format-hidden s "Status" "Open")
             (output-square-button s (incf *buttons*))
             (output-creator-structure s (cadar l))
             (format s "</td></tr></table>")))
    (format s "</td>")
    (when label (format s "<td>~A</td>" label))
    (format s "</tr>")
    (crlf s))
  (format s "</table>")
  (format-hidden s "End" ""))

(defun format-top-button (s name value)
  (format s "<INPUT TYPE=\"SUBMIT\" NAME=\"~A\" VALUE=\"~A\" onClick='window.document.form1.target=\"_top\"'/>"
          name value))

(defun output-object (s x)
  (format s "<b><a href='inspect?Object=~A' target='_top'>~A</a></b>"
          (addressify x) (prettify x)))

(defun output-change-cell (s style slot value)
  (cond ((eq style 'menu) (output-change-menu s slot value))
        ((eq style 'multichoicelist) (output-change-menu s slot value))
        ((eq style 'selector) (output-change-selector s slot value))
        ((eq style 'dropdownlist) (output-change-selector s slot value))
        ((eq style 'hierarchicalselector) (output-change-multiselector s slot value))
        ((eq style 'checkbox) (output-change-checkbox s slot value))
        ((eq style 'radiobutton) (output-change-radiobutton s slot value))
        ((eq style 'datestyle) (output-change-datestyle s slot value))
        ((eq style 'subframe) (output-change-subframe s slot value))
        ((eq style 'interval) (output-change-typein s slot value))
        ((eq style 'textarea) (output-change-textarea s slot value))
        ((eq style 'stringfield) (output-change-text s slot value))
        ((eq style 'text) (output-change-text s slot value))
        ((eq style 'filestyle) (output-change-filestyle s slot value))
        ((eq style 'urlstyle) (output-change-text s slot value))
        ((eq style 'emailstyle) (output-change-text s slot value))
        ((eq style 'password) (output-change-password s slot value))
        ((eq style 'glyph) (output-change-glyph s slot value))
        (t (output-change-typein s slot value))))

(defun output-change-menu (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Menu")
  (format-hidden s "Slot" (stringize slot))
  (output-menu s *cells* (find-options slot) (list value))
  (format-hidden s "End" ""))

(defun output-change-selector (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Selector")
  (format-hidden s "Slot" (stringize slot))
  (output-selector s *cells* (find-alternatives slot) value)
  (format-hidden s "End" ""))

(defun output-change-multiselector (s slot value)
  (let (references options)
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Multiselector")
    (format-hidden s "Slot" (stringize slot))
    (cond ((atom value) (setq references (find-references slot value)))
          (t (setq references (cdr value) value (car (last value)))))
    (cond ((null references) (setq options (find-options slot)))
          (t (setq options (find-components slot (car (last references)) references))))
    (dolist (ref references) (format-hidden s "Reference" (stringize ref)))
    (output-selector s *cells* (nconc references (cons 'unknown options)) value)
    (format-button s "Command" "Expand")
    (format-hidden s "End" "")))

(defun output-change-checkbox (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Checkbox")
  (format-hidden s "Slot" (stringize slot))
  (output-checkboxes s *cells* (find-options slot) (list value))
  (format-hidden s "End" ""))

(defun output-change-radiobutton (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Radiobutton")
  (format-hidden s "Slot" (stringize slot))
  (output-radiobuttons s *cells* (find-options slot) value)
  (format-hidden s "End" ""))

(defun output-change-datestyle (s slot value)
  (let (month date year)
    (if (datep value)
      (multiple-value-setq (month date year) (deconstructdate value))
      (setq month 'unknown date 'unknown year 'unknown))
    (format-hidden s "Start" (stringize *cells*))
    (format-hidden s "Style" "Datestyle")
    (format-hidden s "Slot" (stringize slot))
    (output-selector s *cells* *months* month)
    (output-selector s *cells* *dates* date)
    (output-selector s *cells* *years* year)
    (format-hidden s "End" "")))

(defun output-change-subframe (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Glyph")
  (format-hidden s "Slot" (stringize slot))
  (format-hidden s "Value" (stringize value))
  (format s "Click <a href='change?Object=~A'>here</a> to change properties." value)
  (format-hidden s "End" ""))

(defun output-change-textarea (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Textarea")
  (format-hidden s "Slot" (stringize slot))
  (format-textarea s (stringize *cells*) (htmlify value) 8 60)
  (format-hidden s "End" ""))

(defun output-change-text (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringize slot))
  (format-text s (stringize *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-change-filestyle (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Text")
  (format-hidden s "Slot" (stringize slot))
  (format s "<INPUT TYPE=FILE ACCEPT='*' SIZE='40' NAME='Filecontent' VALUE=''>")
  (format-hidden s "End" ""))

(defun output-change-password (s slot value)
  (when (eq value 'unknown) (setq value ""))
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Password")
  (format-hidden s "Slot" (stringize slot))
  (format-password s (stringize *cells*) (htmlify value) 40)
  (format-hidden s "End" ""))

(defun output-change-typein (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Typein")
  (format-hidden s "Slot" (stringize slot))
  (format-text s (stringize *cells*) (stringize value) 40)
  (format-hidden s "End" ""))

(defun output-change-glyph (s slot value)
  (format-hidden s "Start" (stringize *cells*))
  (format-hidden s "Style" "Glyph")
  (format-hidden s "Slot" (stringize slot))
  (format-hidden s "Value" (stringize value))
  (output-value s value)
  (format-hidden s "End" ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Structure Stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun parsestructure (postlines)
  (let (object class slots)
    (pop postlines)
    (setq object (read-user-string (cdr (pop postlines))))
    (setq class (read-user-string (cdr (pop postlines))))
    (do ((value) (nl))
        ((or (null postlines) (string= (caar postlines) "End"))
         (pop postlines)
         (setq slots (nreverse nl)))
      (multiple-value-setq (value postlines) (parsevalue postlines))
      (setq nl (cons value nl)))
    (values (list* object class slots) postlines)))

(defun parsevalue (postlines)
  (let ((type (cdadr postlines)))
    (cond ((string= type "Menu") (parsemenu postlines))
          ((string= type "Selector") (parsetypein postlines))
          ((string= type "Multiselector") (parsemultiselector postlines))
          ((string= type "Checkbox") (parsemenu postlines))
          ((string= type "Radiobutton") (parsemenu postlines))
          ((string= type "Interval") (parseinterval postlines))
          ((string= type "Intermenu") (parseother postlines))
          ((string= type "Datestyle") (parsedatestyle postlines))
          ((string= type "Stringfield") (parsestringfield postlines))
          ((string= type "Text") (parsetext postlines))
          ((string= type "Textarea") (parsetext postlines))
          ((string= type "Password") (parsetext postlines))
          ((string= type "Typein") (parsetypein postlines))
          ((string= type "Glyph") (parsetypein postlines))
          ((string= type "Subframe") (parsesubframe postlines))
          (t (parseother postlines)))))

(defun parsetypein (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (pop postlines)
    (cond ((string= value "") (setq value (list slot)))
          (t (setq value (list slot (readas value (find-range slot))))))
    (values value postlines)))

(defun parsemenu (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (do ((nl))
        ((or (null postlines) (string= (caar postlines) "End"))
         (cond ((null (cdr nl)) (setq value (cons slot nl)))
               (t (setq value (list slot (cons 'oneof (nreverse nl)))))))
      (setq value (cdr (pop postlines)))
      (unless (string= value "")
        (setq nl (cons (read-value-string value) nl))))
    (pop postlines)
    (values value postlines)))

(defun parsemultiselector (postlines)
  (let (slot references value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (references postlines) (getvalues "Reference" postlines))
    (setq value (read-value-string (cdr (pop postlines))))
    (when (string= (cdar postlines) "Expand") (pop postlines))
    (pop postlines)
    (cond ((null value) (setq value (list slot)))
          ((find value references)
           (setq value (list slot `(taxonomy . ,(upthrough value references)))))
          ((= (length references) (length (find-expanders slot)))
           (setq value (list slot value)))
          (t (setq value (list slot `(taxonomy . ,(nconc references (list value)))))))
    (values value postlines)))

(defun parseinterval (postlines)
  (let (slot min max value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq min (read-value-string (cdr (pop postlines))))
    (setq max (read-value-string (cdr (pop postlines))))
    (pop postlines)
    (cond ((or min max) (setq value (list slot `(between ,min ,max))))
          (t (setq value (list slot))))
    (values value postlines)))

(defun parsedatestyle (postlines)
  (let (slot month date year)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq month (read-value-string (cdr (pop postlines))))
    (setq date (read-value-string (cdr (pop postlines))))
    (setq year (read-value-string (cdr (pop postlines))))
    (setq month (1+ (position month *months*)))
    (pop postlines)
    (values (list slot (makdate month date year)) postlines)))

(defun parsestringfield (postlines)
  (let (slot value match)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (unless (string= (caar postlines) "End")
      (setq match (cdr (pop postlines))))
    (pop postlines)
    (cond ((string= value "") (setq value (list slot)))
          ((string= match "Exact?") (setq value (list slot value)))
          (t (setq value (list slot `(substring ,value)))))
    (values value postlines)))

(defun parsetext (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (setq value (cdr (pop postlines)))
    (pop postlines)
    (cond ((string= value "") (setq value (list slot)))
          (t (setq value (list slot value))))
    (values value postlines)))

(defun parsesubframe (postlines)
  (let (slot value)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (multiple-value-setq (value postlines) (parsestructure postlines))
    (pop postlines)
    (values (list slot value) postlines)))

(defun parseother (postlines)
  (let (slot)
    (pop postlines)
    (pop postlines)
    (setq slot (read-value-string (cdr (pop postlines))))
    (do ((pair (pop postlines) (pop postlines)))
        ((or (null pair) (string= (car pair) "End"))
         (values (list slot) postlines)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Other Performatives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; triple
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'triple)) postlines)
  (let (slot object old new)
    (setq slot (read-user-string (cdr (pop postlines))))
    (setq object (read-user-string (cdr (pop postlines))))
    (setq new (read-user-string (cdr (pop postlines))))
    (setq old (prorequest `(ask-one ?x ,(list slot object '?x))))
    (cond ((eq new 'true) (setq new 'yes))
          ((eq new 'false) (setq new 'no)))
    (cond ((null new)
           (when old (prorequest `(update (not ,(list slot object old))))))
          ((null old) (prorequest `(update ,(list slot object new))))
          (t (prorequest `(update (not ,(list slot object old))
                                  ,(list slot object new)))))
    (format-html s)
    (finish-html s) (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; quadruple
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'quadruple)) postlines)
  (let (relation arg1 arg2 old new)
    (setq relation (read-user-string (cdr (pop postlines))))
    (setq arg1 (read-user-string (cdr (pop postlines))))
    (setq arg2 (read-user-string (cdr (pop postlines))))
    (setq new (read-user-string (cdr (pop postlines))))
    (setq old (prorequest `(ask-one ?x ,(list relation arg1 arg2 '?x))))
    (cond ((eq new 'true) (setq new 'yes))
          ((eq new 'false) (setq new 'no)))
    (cond ((null new)
           (when old (prorequest `(update (not ,(list relation arg1 arg2 old))))))
          ((null old) (prorequest `(update ,(list relation arg1 arg2 new))))
          (t (prorequest `(update (not ,(list relation arg1 arg2 old))
                                  ,(list relation arg1 arg2 new)))))
    (format-html s)
    (finish-html s) (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; link
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'link)) postlines)
  (let (slot object new)
    (setq slot (read-user-string (cdr (pop postlines))))
    (setq object (read-user-string (cdr (pop postlines))))
    (setq new (read-user-string (cdr (pop postlines))))
    (cond ((eq new 'true) (setq new 'yes))
          ((eq new 'false) (setq new 'no)))
    (prorequest `(update ,(list slot object new)))
    (format-html s)
    (finish-html s) (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; unlink
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod process (s (file (eql 'unlink)) postlines)
  (let (slot object new)
    (setq slot (read-user-string (cdr (pop postlines))))
    (setq object (read-user-string (cdr (pop postlines))))
    (setq new (read-user-string (cdr (pop postlines))))
    (cond ((eq new 'true) (setq new 'yes))
          ((eq new 'false) (setq new 'no)))
    (prorequest `(update (not ,(list slot object new))))
    (format-html s)
    (finish-html s) (crlf s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; javascript
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun javascript ()
  "<script>
    var http_tree = false;
    var http_find = false;
    var http_request = false;
    var http_result = false;
    var textchange = false;

    function postTreeWidget (structure, tree, node)
       {http_tree = false;
        if (window.XMLHttpRequest)
           {http_tree = new XMLHttpRequest();
            if (http_tree.overrideMimeType)
               {http_tree.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject)
                {try {http_tree = new ActiveXObject(\"Msxml2.XMLHTTP\");} 
                 catch (e) {try {http_tree = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                            catch (e) {}}}
        if (!http_tree)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_tree.onreadystatechange = alertTree;
        http_tree.open('POST', 'smarttree?', true);
        http_tree.send('Structure=' + structure + '&Tree=' + tree + '&Node=' + node);}

    function getTreeWidget ()
       {http_tree = false;
        if (window.XMLHttpRequest)
           {http_tree = new XMLHttpRequest();
            if (http_tree.overrideMimeType)
               {http_tree.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject)
                {try {http_tree = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {try {http_tree = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                            catch (e) {}}}
        if (!http_tree)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_tree.onreadystatechange = alertTree;
        http_tree.open('GET', 'smarttree?', true);
        http_tree.send(null);}

    function getFrontdoorwidget ()
       {http_tree = false;
        if (window.XMLHttpRequest)
           {http_tree = new XMLHttpRequest();
            if (http_tree.overrideMimeType)
               {http_tree.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject)
                {try {http_tree = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {try {http_tree = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                            catch (e) {}}}
        if (!http_tree)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_tree.onreadystatechange = alertTree;
        http_tree.open('GET', 'tree?', true);
        http_tree.send(null);}

    function postFrontdoorwidget (tree, node)
       {http_tree = false;
        if (window.XMLHttpRequest)
           {http_tree = new XMLHttpRequest();
            if (http_tree.overrideMimeType)
               {http_tree.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject)
                {try {http_tree = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {try {http_tree = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                            catch (e) {}}}
        if (!http_tree)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_tree.onreadystatechange = alertTree;
        http_tree.open('POST', 'tree?', true);
        http_tree.send('Tree=' + tree + '&Node=' + node);}

    function loneClickEventHandler (node)
      {postFind(node);}

    function postSmartfind (structure)
       {http_find = false;
        if (window.XMLHttpRequest) { // Mozilla, Safari,...
            http_find = new XMLHttpRequest();
            if (http_find.overrideMimeType) {
                http_find.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {http_find = new ActiveXObject(\"Msxml2.XMLHTTP\");} 
                catch (e) {
                try {http_find = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!http_find)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_find.onreadystatechange = alertFind;
        http_find.open('POST', 'smartfind?', true);
        http_find.send('Structure=' + structure);
        return ''}

    function postFind (node)
       {http_find = false;
        if (window.XMLHttpRequest) { // Mozilla, Safari,...
            http_find = new XMLHttpRequest();
            if (http_find.overrideMimeType) {
                http_find.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {http_find = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                catch (e) {
                try {http_find = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!http_find)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_find.onreadystatechange = alertFind;
        http_find.open('POST', 'find?', true);
        http_find.send('Class=' + node);
        return ''}

    function postRequest (url,args)
       {http_request = false;
        if (window.XMLHttpRequest)
           {http_request = new XMLHttpRequest();
            if (http_request.overrideMimeType)
               {http_request.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {http_request = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {
                try {http_request = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!http_request)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_request.onreadystatechange = alertQuery;
        http_request.open('POST', url, true);
        http_request.send(args);}

    function postResult (url,args)
       {http_result = false;
        if (window.XMLHttpRequest)
           {http_result = new XMLHttpRequest();
            if (http_result.overrideMimeType)
               {http_result.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {http_result = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {
                try {http_result = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!http_result)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_result.onreadystatechange = alertResult;
        http_result.open('POST', url, true);
        http_result.send(args);}

    function postRequestRefresh (url,args)
       {http_request = false;
        if (window.XMLHttpRequest)
           {http_request = new XMLHttpRequest();
            if (http_request.overrideMimeType)
               {http_request.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {http_request = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {
                try {http_request = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!http_request)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        http_request.onreadystatechange = alertQueryRefresh;
        http_request.open('POST', url, true);
        http_request.send(args);}

    function postAugmentWidget (cell,fobj)
       {postRequest('find?',getFormValues(fobj) + '&' + cell + '.x=')}

    function postReviseWidget (cell,fobj)
       {postRequestRefresh('find?',getFormValues(fobj) + '&' + cell +
'.x=','find?');}

    function postEnumeratewidget (fobj)
       {postResult(fobj.action,getFormValues(fobj));}

    function postEnumerateBack (fobj)
       {postResult('list?',getFormValues(fobj) + '&Command=Back');}

    function postEnumerateNext (fobj)
       {postResult('list?',getFormValues(fobj) + '&Command=Next');}

    function getFormValues (fobj)
      {var str = \"\";
       for (var i = 0; i < fobj.elements.length; i++)
         {if (fobj.elements[i].type == \"select-one\")
             {var val = fobj.elements[i].options[fobj.elements[i].selectedIndex].value;
              if (val=='') val = fobj.elements[i].options[fobj.elements[i].selectedIndex].text;
              str += fobj.elements[i].name + \"=\" + val + \"&\";}
          else if (fobj.elements[i].type == \"radio\" || fobj.elements[i].type == \"checkbox\")
                  {if (fobj.elements[i].checked)
                      {str += fobj.elements[i].name + \"=\" + escape(fobj.elements[i].value) + \"&\"}}
          else str += fobj.elements[i].name + \"=\" + escape(fobj.elements[i].value) + \"&\";}
       str = str.substr(0,(str.length - 1));
       return str;}

    function populate (node)
      {getFrontdoorwidget();
       if (node == '')
          {query.innerHTML = \"<BR/><BR/><center><table><tr><td><UL><LI>Click on class name at left to search for items of that class.</LI><LI>Results will appear on the right.</LI></UL></td></tr></table></center>\"}
       else query.innerHTML = postFind(node);
       result.innerHTML = \"\";}

    function alertTree()
       {if (http_tree.readyState == 4)
           {if (http_tree.responseText)
               {tree.innerHTML = http_tree.responseText;}
            else {alert('There was a problem with the request in alertTree.');}}}

    function alertFind()
       {if (http_find.readyState == 4)
           {if (http_find.responseText)
               {query.innerHTML = http_find.responseText;
                postEnumeratewidget(form1)}
            else {alert('There was a problem with the request in alertFind.');}}}

    function alertQuery()
       {if (http_request.readyState == 4)
           {if (http_result.responseText)
               {query.innerHTML = http_request.responseText;}
            else {alert('There was a problem with the request in alertQuery.');}}}

    function alertResult()
       {if (http_result.readyState == 4)
           {if (http_result.responseText)
               {result.innerHTML = http_result.responseText}
            else {alert('There was a problem with the request in alertResult.')}}}

    function alertQueryRefresh()
       {if (http_request.readyState == 4)
           {if (http_result.responseText)
               {query.innerHTML = http_request.responseText;
                postResult('find?',getFormValues(form1) + '&Command=Refresh');}
            else {alert('There was a problem with the request in alertQueryRefresh.');}}}

    function textEdit(e)
       {var keynum;
        if (window.event)
           {keynum = e.keyCode}
        else if(e.which)
           {keynum = e.which};
        if (keynum == 13)
           {textchange = false;
            postResult('find?',getFormValues(form1) + '&Command=Refresh');
            return false}
        else {textchange = true;
              return true}}

    function textBlur(e)
      {if (textchange == true)
          {textchange = false;
           postResult('find?',getFormValues(form1) + '&Command=Refresh')}}

    var triple_result = false;

    function postTriple (slot,object,value)
       {triple_result = false;
        if (window.XMLHttpRequest)
           {triple_result = new XMLHttpRequest();
            if (triple_result.overrideMimeType)
               {triple_result.overrideMimeType('text/xml');}}
        else if (window.ActiveXObject) { // IE
            try {triple_result = new ActiveXObject(\"Msxml2.XMLHTTP\");}
                 catch (e) {
                try {triple_result = new ActiveXObject(\"Microsoft.XMLHTTP\");}
                    catch (e) {} }}
        if (!triple_result)
           {alert('Giving up: Cannot create an XMLHTTP instance');
            return false;}
        triple_result.onreadystatechange = alertTriple;
        triple_result.open('POST', 'triple?', true);
        triple_result.send('slot=' + slot + '&object=' + object + '&value=' + value)}

    function alertTriple()
       {if (triple_result.readyState == 4)
           {if (!triple_result.responseText)
               {alert('There was a problem with the request.')}}}

   </script>")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
