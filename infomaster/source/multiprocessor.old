;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Registration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun register (site ip port)
  (let (mgr meta lib multiadmin)
    (setq site (strupcase site))
    (setq mgr (intern (strappend "MANAGER@" site)))
    (setq meta (intern (strappend "METALIBRARY@" site)))
    (setq lib (intern (strappend "LIBRARY@" site)))
    (setq multiadmin (intern (strappend "MULTIADMINISTRATOR@" site)))
    (makimerge site ip port)
    (dolist (sent (request `(getmetadata) (name *manager*) mgr))
      (save sent *manager*))
    (dolist (sent (request `(ask-about ?) (name *manager*) meta))
      (save sent *metalibrary*))
    (dolist (sent (request `(ask-about ?) (name *manager*) lib))
      (save sent *library*))
    (request `(makimerge ,*host* ,*ip* ,*port*) (name *manager*) multiadmin)
    'done))

(defun unregister (site ip port)
  (let (multiadmin)
    (setq multiadmin (intern (strappend "MULTIADMINISTRATOR@" site)))
    (request `(killimerge ,*host* ,*ip* ,*port*) (name *manager*) multiadmin)
    (killimerge site ip port)
    'done))

(defun makimerge (site ip port)
  (let (multi admin meta mgr int lib ware)
    (setq site (strupcase site))
    (setq multi (intern (strappend "MULTIADMINISTRATOR@" site)))
    (setq admin (intern (strappend "ADMINISTRATOR@" site)))
    (setq meta (intern (strappend "METALIBRARY@" site)))
    (setq mgr (intern (strappend "MANAGER@" site)))
    (setq int (intern (strappend "INTEGRATOR@" site)))
    (setq lib (intern (strappend "LIBRARY@" site)))
    (setq ware (intern (strappend "WAREHOUSE@" site)))
    (makremote multi ip port)
    (makremote admin ip port)
    (makremote meta ip port)
    (makremote mgr ip port)
    (makremote int ip port)
    (makremote lib ip port)
    (makremote ware ip port)
    (request `(tell (target multilibrary ,lib)) *client* *agent*)
    (request `(tell (target multiintegrator ,int)) *client* *agent*)
    (request `(tell (target multimetalibrary ,meta)) *client* *agent*)
    (request `(tell (target multiadministrator ,admin)) *client* *agent*)
    'done))

(defun killimerge (site ip port)
  (let (multi admin meta mgr int lib ware)
    (setq site (strupcase site))
    (setq multi (intern (strappend "MULTIADMINISTRATOR@" site)))
    (setq admin (intern (strappend "ADMINISTRATOR@" site)))
    (setq meta (intern (strappend "METALIBRARY@" site)))
    (setq mgr (intern (strappend "MANAGER@" site)))
    (setq int (intern (strappend "INTEGRATOR@" site)))
    (setq lib (intern (strappend "LIBRARY@" site)))
    (setq ware (intern (strappend "WAREHOUSE@" site)))
    (killremote multi ip port)
    (killremote admin ip port)
    (killremote meta ip port)
    (killremote mgr ip port)
    (killremote int ip port)
    (killremote lib ip port)
    (killremote ware ip port)
    (request `(untell (target multilibrary ,lib)) *client* *agent*)
    (request `(untell (target multiintegrator ,int)) *client* *agent*)
    (request `(untell (target multimetalibrary ,meta)) *client* *agent*)
    (request `(untell (target multiadministrator ,admin)) *client* *agent*)
    'done))

(defun makremote (agent host port)
  (request `(tell (isa ,agent aclserver)) *client* *agent*)
  (request `(tell (host ,agent ,host)) *client* *agent*)
  (request `(tell (port ,agent ,port)) *client* *agent*)
  'done)

(defun killremote (agent host port)
  (request `(untell (isa ,agent aclserver)) *client* *agent*)
  (request `(untell (host ,agent ,host)) *client* *agent*)
  (request `(untell (port ,agent ,port)) *client* *agent*)
  'done)

(defun getmetadata ()
  (changelocals (metadata)))

(defun metadata ()
  (do ((l *sentences* (cdr l)) (contents (contents *manager*)) (nl))
      ((null l) (nreconc nl contents))
      (cond ((equalp (car l) (car contents))
             (setq contents (cdr contents)))
            (t (setq nl (cons `(unprovable ,(car l)) nl))))))

(defun changelocals (data)
  (dolist (agent (finds '?x '(isa ?x infoserver) *manager*))
    (setq data (changeagent agent 'infoserver data)))
  (dolist (agent (finds '?x '(isa ?x fileserver) *manager*))
    (setq data (changeagent agent 'fileserver data)))
  (dolist (agent (finds '?x '(isa ?x basket) *manager*))
    (setq data (changeagent agent 'basket data)))
  (dolist (agent (finds '?x '(isa ?x counter) *manager*))
    (setq data (changeagent agent 'counter data)))
  data)

(defun changeagent (agent type data)
  (nconc (remove `(isa ,agent ,type) data :test #'equal)
         `((isa ,agent aclserver)
           (host ,agent ,*ip*)
           (port ,agent ,*port*))))

(defun plugall (x al)
  (cond ((atom x) (plugatom x al))
	((eq 'quote (car x)) x)
	(t (do ((l x (cdr l)) (nl))
               ((null l) (nreverse nl))
               (setq nl (cons (plugall (car l) al) nl))))))

(defun plugatom (x al)
  (let (dum)
    (cond ((setq dum (assoc x al :test #'equalp)) (cdr dum))
          (t x))))

(defun mysublis (al x)
  (cond ((atom x) (sublis al x))
        (t (do ((l x (cdr l)) (nl))
               ((null l) (nreverse nl))
               (setq nl (cons (sublis al (car l)) nl))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; reproduce (replication with mutual registration)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod reproduce (site ip port)
  (let (agents locals remotes adm)
    (replicate site ip port)
    (setq site (strupcase site))
    (setq agents (find-all-agents))
    (setq locals (makallsentences agents site ip port))
    (setq remotes (makallsentences agents *host* *ip* *port*))
    (setq adm (globalize 'administrator site))
    (makremote adm ip port)
    (request `(tell ,(maksand remotes)) *client* adm)
    (request `(tell (target ,adm ,(externalize 'manager))) *client* adm)
    (killremote adm ip port)
    (telladministrator (maksand locals))
    (telladministrator `(target administrator ,adm))
    'done))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
