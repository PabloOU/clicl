;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reviser;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resettodefaultsettings)done(defparameter *updater* (make-instance 'transformer :name 'updater))*updater*(defparameter *berlitz* (make-instance 'translator :name 'berlitz))*berlitz*(definemore *manager*  '((rulebase berlitz library)    (recipient berlitz repository)    (rulebase updater library)    (recipient updater repository)    (base updater m)    (base updater n)    (specialty repository m)    (specialty repository n)    (specialty repository r)    (interest repository m)    (interest repository n)    (interest repository r)))*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fastservers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *repository* ""  '((r a b)))*(reviser '((not (r a b)) (r a c)) *repository*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; dataservers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *warehouse* ""  '((r a b)))*(reviser '((not (r a b)) (r a c)) *warehouse*)DONE(facts 'r *warehouse*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; translators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; inverse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?y ?x))    (<= (s ?x ?y) (m ?y ?x))    (<= (not (r ?x ?y)) (not (m ?y ?x)))    (<= (not (s ?x ?y)) (not (m ?y ?x)))))*(define-theory *repository* ""  '((m b a)    (r a b)))*(reviser '((not (s a b)) (s a c)) *berlitz*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; conjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y ?z) (p ?x ?y) (q ?y ?z))    (<= (p ?x ?y) (m ?x ?y))    (<= (q ?x ?y) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a b c)))*(reviser '((m a c) (n c e)) *berlitz*)DONE(facts 'r *repository*)((R A B C) (R A C E));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; disjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y))    (<= (r ?u ?v) (n ?u ?v))    (<= (not (r ?x ?y)) (not (m ?x ?y)) (not (n ?x ?y)))))*(define-theory *repository* ""  '((m a b)    (n a b)    (r a b)))*(reviser '((m a c) (not (n a b))) *berlitz*)DONE(facts 'r *repository*)((R A B) (R A C))(reviser '((m a c) (not (m a b)) (not (n a b))) *berlitz*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; projection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?z) (m ?x ?y) (n ?y ?z))    (<= (not (r ?x ?z)) (not (m ?x ?y)) (n ?y ?z) (unprovable (and (m ?x ?v) (n ?v ?z))))    (<= (not (r ?x ?z)) (not (n ?y ?z)) (m ?x ?y) (unprovable (and (m ?x ?v) (n ?v ?z))))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a c)))*(reviser '((n b d) (not (n b c))) *berlitz*)DONE(facts 'r *repository*)((R A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; negative conditions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y) (not (n ?x ?y)))    (<= (not (r ?x ?y)) (not (m ?x ?y)))    (<= (not (r ?x ?y)) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (r a b)))*(reviser '((n a b) (m b c)) *berlitz*)DONE(facts 'r *repository*)((R B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; transformers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; inverse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?y ?x))    (<= (s ?x ?y) (m ?y ?x))    (<= (not (r ?x ?y)) (not (m ?y ?x)))    (<= (not (s ?x ?y)) (not (m ?y ?x)))))*(define-theory *repository* ""  '((m b a)    (r a b)))*(reviser '((not (s a b)) (s a c)) *updater*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; conjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y ?z) (p ?x ?y) (q ?y ?z))    (<= (p ?x ?y) (m ?x ?y))    (<= (q ?x ?y) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a b c)))*(reviser '((m a c) (n c e)) *updater*)DONE(facts 'r *repository*)((R A B C) (R A C E));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; disjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y))    (<= (r ?u ?v) (n ?u ?v))    (<= (not (r ?x ?y)) (not (m ?x ?y)) (not (n ?x ?y)))))*(define-theory *repository* ""  '((m a b)    (n a b)    (r a b)))*(reviser '((m a c) (not (n a b))) *updater*)DONE(facts 'r *repository*)((R A B) (R A C))(reviser '((m a c) (not (m a b)) (not (n a b))) *updater*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; projection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?z) (m ?x ?y) (n ?y ?z))    (<= (not (r ?x ?z)) (not (m ?x ?y)) (n ?y ?z) (unprovable (and (m ?x ?v) (n ?v ?z))))    (<= (not (r ?x ?z)) (not (n ?y ?z)) (m ?x ?y) (unprovable (and (m ?x ?v) (n ?v ?z))))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a c)))*(reviser '((n b d) (not (n b c))) *updater*)DONE(facts 'r *repository*)((R A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; negative conditions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y) (not (n ?x ?y)))    (<= (not (r ?x ?y)) (not (m ?x ?y)))    (<= (not (r ?x ?y)) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (r a b)))*(reviser '((n a b) (m b c)) *updater*)DONE(facts 'r *repository*)((R B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; facilitators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; inverse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?y ?x))    (<= (s ?x ?y) (m ?y ?x))    (<= (not (r ?x ?y)) (not (m ?y ?x)))    (<= (not (s ?x ?y)) (not (m ?y ?x)))))*(define-theory *repository* ""  '((m b a)    (r a b)))*(reviser '((not (s a b)) (s a c)) *integrator*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; conjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y ?z) (p ?x ?y) (q ?y ?z))    (<= (p ?x ?y) (m ?x ?y))    (<= (q ?x ?y) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a b c)))*(reviser '((m a c) (n c e)) *integrator*)DONE(facts 'r *repository*)((R A B C) (R A C E));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; disjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y))    (<= (r ?u ?v) (n ?u ?v))    (<= (not (r ?x ?y)) (not (m ?x ?y)) (not (n ?x ?y)))))*(define-theory *repository* ""  '((m a b)    (n a b)    (r a b)))*(reviser '((m a c) (not (n a b))) *integrator*)DONE(facts 'r *repository*)((R A B) (R A C))(reviser '((m a c) (not (m a b)) (not (n a b))) *integrator*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; projection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?z) (m ?x ?y) (n ?y ?z))    (<= (not (r ?x ?z)) (not (m ?x ?y)) (n ?y ?z) (unprovable (and (m ?x ?v) (n ?v ?z))))    (<= (not (r ?x ?z)) (not (n ?y ?z)) (m ?x ?y) (unprovable (and (m ?x ?v) (n ?v ?z))))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a c)))*(reviser '((n b d) (not (n b c))) *integrator*)DONE(facts 'r *repository*)((R A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; negative conditions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y) (not (n ?x ?y)))    (<= (not (r ?x ?y)) (not (m ?x ?y)))    (<= (not (r ?x ?y)) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (r a b)))*(reviser '((n a b) (m b c)) *integrator*)DONE(facts 'r *repository*)((R B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; revise;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resettodefaultsettings)done(defparameter *updater* (make-instance 'transformer :name 'updater))*updater*(definemore *manager*  '((rulebase updater library)    (recipient updater repository)    (base updater m)    (base updater n)    (specialty repository m)    (specialty repository n)    (specialty repository r)    (interest repository m)    (interest repository n)    (interest repository r)))*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; fastservers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *repository* ""  '((r a b)))*(revise '((not (r a b)) (r a c)) *repository*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; dataservers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *warehouse* ""  '((r a b)))*(revise '((not (r a b)) (r a c)) *warehouse*)DONE(facts 'r *warehouse*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; transformers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; inverse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?y ?x))    (<= (s ?x ?y) (m ?y ?x))    (<= (not (r ?x ?y)) (not (m ?y ?x)))    (<= (not (s ?x ?y)) (not (m ?y ?x)))))*(define-theory *repository* ""  '((m b a)    (r a b)))*(revise '((not (s a b)) (s a c)) *updater*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; conjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y ?z) (p ?x ?y) (q ?y ?z))    (<= (p ?x ?y) (m ?x ?y))    (<= (q ?x ?y) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a b c)))*(revise '((m a c) (n c e)) *updater*)DONE(facts 'r *repository*)((R A B C) (R A C E));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; disjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y))    (<= (r ?u ?v) (n ?u ?v))    (<= (not (r ?x ?y)) (not (m ?x ?y)) (not (n ?x ?y)))))*(define-theory *repository* ""  '((m a b)    (n a b)    (r a b)))*(revise '((m a c) (not (n a b))) *updater*)DONE(facts 'r *repository*)((R A B) (R A C))(revise '((m a c) (not (m a b)) (not (n a b))) *updater*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; projection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?z) (m ?x ?y) (n ?y ?z))    (<= (not (r ?x ?z)) (not (m ?x ?y)) (n ?y ?z) (unprovable (and (m ?x ?v) (n ?v ?z))))    (<= (not (r ?x ?z)) (not (n ?y ?z)) (m ?x ?y) (unprovable (and (m ?x ?v) (n ?v ?z))))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a c)))*(revise '((n b d) (not (n b c))) *updater*)DONE(facts 'r *repository*)((R A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; negative conditions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y) (not (n ?x ?y)))    (<= (not (r ?x ?y)) (not (m ?x ?y)))    (<= (not (r ?x ?y)) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (r a b)))*(revise '((n a b) (m b c)) *updater*)DONE(facts 'r *repository*)((R B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; facilitators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; inverse;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?y ?x))    (<= (s ?x ?y) (m ?y ?x))    (<= (not (r ?x ?y)) (not (m ?y ?x)))    (<= (not (s ?x ?y)) (not (m ?y ?x)))))*(define-theory *repository* ""  '((m b a)    (r a b)))*(revise '((not (s a b)) (s a c)) *integrator*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; conjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y ?z) (p ?x ?y) (q ?y ?z))    (<= (p ?x ?y) (m ?x ?y))    (<= (q ?x ?y) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a b c)))*(revise '((m a c) (n c e)) *integrator*)DONE(facts 'r *repository*)((R A B C) (R A C E));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; disjunction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y))    (<= (r ?u ?v) (n ?u ?v))    (<= (not (r ?x ?y)) (not (m ?x ?y)) (not (n ?x ?y)))))*(define-theory *repository* ""  '((m a b)    (n a b)    (r a b)))*(revise '((m a c) (not (n a b))) *integrator*)DONE(facts 'r *repository*)((R A B) (R A C))(revise '((m a c) (not (m a b)) (not (n a b))) *integrator*)DONE(facts 'r *repository*)((R A C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; projection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?z) (m ?x ?y) (n ?y ?z))    (<= (not (r ?x ?z)) (not (m ?x ?y)) (n ?y ?z) (unprovable (and (m ?x ?v) (n ?v ?z))))    (<= (not (r ?x ?z)) (not (n ?y ?z)) (m ?x ?y) (unprovable (and (m ?x ?v) (n ?v ?z))))))*(define-theory *repository* ""  '((m a b)    (n b c)    (r a c)))*(revise '((n b d) (not (n b c))) *integrator*)DONE(facts 'r *repository*)((R A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; negative conditions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *library* ""  '((<= (r ?x ?y) (m ?x ?y) (not (n ?x ?y)))    (<= (not (r ?x ?y)) (not (m ?x ?y)))    (<= (not (r ?x ?y)) (n ?x ?y))))*(define-theory *repository* ""  '((m a b)    (r a b)))*(revise '((n a b) (m b c)) *integrator*)DONE(facts 'r *repository*)((R B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;