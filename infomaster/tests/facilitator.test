;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; facilitator.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; resetsystem;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; revise, revisions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *manager*  '((extension integrator p)    (extension integrator q)    (material  integrator r)    (specialty repository p)    (specialty repository q)    (interest  mrg        p)    (interest  mrg        r)))*(definemore *repository*  '((p a b)    (p b b)    (q b b)))*(define-theory *library* ""  '((<= (r ?x ?y) (p ?x ?y) (q ?x ?y))    (<= (s ?x ?y) (p ?x ?y))    (<= (s ?x ?y) (q ?x ?y))    (<= (t ?x ?z) (p ?x ?y) (q ?y ?z))    (<= (pos (r ?x ?y)) (p ?x ?y) (not (neg (p ?x ?y))) (pos (q ?x ?y)))    (<= (pos (r ?x ?y)) (pos (p ?x ?y)) (q ?x ?y) (not (neg (q ?x ?y))))    (<= (pos (r ?x ?y)) (pos (p ?x ?y)) (pos (q ?x ?y)))    (<= (neg (r ?x ?y)) (neg (p ?x ?y)))    (<= (neg (r ?x ?y)) (neg (q ?x ?y)))    ;(<= (pos (s ?x ?y)) (pos (p ?x ?y)) (not (q ?x ?y)))    ;(<= (pos (s ?x ?y)) (pos (q ?x ?y)) (not (p ?x ?y)))    ;(<= (neg (s ?x ?y)) (neg (p ?x ?y)) (not (q ?x ?y)))    ;(<= (neg (s ?x ?y)) (neg (q ?x ?y)) (not (p ?x ?y)))    ;(<= (neg (s ?x ?y)) (neg (p ?x ?y)) (neg (q ?x ?y)))    ;(<= (pos (p ?x ?y)) (pos (r ?x ?y)) (not (p ?x ?y)))    ;(<= (pos (q ?x ?y)) (pos (r ?x ?y)) (not (q ?x ?y)))    ;(<= (neg (p ?x ?y)) (neg (r ?x ?y)) (q ?x ?y))    ;(<= (pos (p ?x ?y)) (pos (s ?x ?y)))    (<= (neg (p ?x ?y)) (neg (s ?x ?y)) (p ?x ?y))    (<= (neg (q ?x ?y)) (neg (s ?x ?y)) (q ?x ?y))    (<= (not (neg (p ?x ?y))) (not (minus (p ?x ?y))) (not (neg (s ?x ?y))))    (<= (not (neg (q ?x ?y))) (not (minus (q ?x ?y))) (not (neg (s ?x ?y))))    (<= (not (neg (s ?x ?y))) (not (minus (s ?x ?y))))    (<= (pos ?p) (plus ?p))    (<= (neg ?p) (minus ?p))    (<= (not (plus ?p)) (unprovable (plus ?p)))    (<= (not (minus ?p)) (unprovable (minus ?p)))    (<= (trigger (print (kwote ?x))) (pos (p ?x ?y)) (pos (q ?x ?y)))    (<= (error "P is a function.") (p ?x ?y) (not (neg (p ?x ?y))) (pos (p ?x ?z)) (distinct ?y ?z))    (<= (error "P is a function.") (pos (p ?x ?y)) (pos (p ?x ?z)) (distinct ?y ?z))))*(errors '(p a c) *integrator*)("P is a function.")(errors '(and (not (p a b)) (p a c)) *integrator*)NIL(materializations '(and (not (p b b)) (q a b)) *integrator*)((NOT (R B B)) (R A B))(notifications '(and (not (p b b)) (q a b)) *integrator*)((MRG (NOT (P B B)) (NOT (R B B)) (R A B)))(reactions '(and (p a c) (q a c)) *integrator*)((PRINT (KWOTE A)))(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(integer 2) nil *integrator*)t(askp '(integer 1/2) nil *integrator*)nil(askp '(integer 3.2) nil *integrator*)nil(askp '(integer #c(1 2)) nil *integrator*)nil(askp '(integer a) nil *integrator*)nil(askp '(even 2) nil *integrator*)t(askp '(even a) nil *integrator*)nil(askp '(odd 3) nil *integrator*)t(askp '(odd a) nil *integrator*)nil(askp '(positive 3) nil *integrator*)t(askp '(positive a) nil *integrator*)nil(askp '(negative -1) nil *integrator*)t(askp '(negative a) nil *integrator*)nil(askp '(zero 0) nil *integrator*)t(askp '(gcd 2 6 2) nil *integrator*)t(askp '(lcm 2 3 6) nil *integrator*)t(askp '(isqrt 5 2) nil *integrator*)t(askp '(mod 7 2 1) nil *integrator*)t(askp '(rem 3 2 1) nil *integrator*)t(askp '(ash 1 1 2) nil *integrator*)t(askp '(boole 6 1 1 1) nil *integrator*)t(askp '(logbit 2 6) nil *integrator*)t(askp '(logand 1 1 1) nil *integrator*)t(askp '(logandc1 0 1 1) nil *integrator*)t(askp '(logandc2 1 0 1) nil *integrator*)t(askp '(logcount 3 2) nil *integrator*)t(askp '(logeqv 1 1 -1) nil *integrator*)t(askp '(logior 1 1 1) nil *integrator*)t(askp '(lognand 0 1 -1) nil *integrator*)t(askp '(lognor 0 0 -1) nil *integrator*)t(askp '(lognot -4 3) nil *integrator*)t(askp '(logorc1 0 0 -1) nil *integrator*)t(askp '(logorc2 0 0 -1) nil *integrator*)t(askp '(logxor 0 1 1) nil *integrator*)t(askp '(zero a) nil *integrator*)nil(askp '(logbit 0 6) nil *integrator*)nil(askp '(logtest 2 6) nil *integrator*)t(askp '(logtest 2 -3) nil *integrator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(rationalnumber 1) nil *integrator*)t(askp '(rationalnumber 1/2) nil *integrator*)t(askp '(rationalnumber 3.2) nil *integrator*)nil(askp '(rationalnumber #c(1 2)) nil *integrator*)nil(askp '(rationalnumber a) nil *integrator*)nil(askp '(numerator 1/2 1) nil *integrator*)t(askp '(denominator 1/2 2) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(realnumber 1) nil *integrator*)t(askp '(realnumber 1/2) nil *integrator*)t(askp '(realnumber 3.2) nil *integrator*)t(askp '(realnumber #c(1 2)) nil *integrator*)nil(askp '(realnumber a) nil *integrator*)nil(askp '(< 2 3) nil *integrator*)t(askp '(< 3 3) nil *integrator*)nil(askp '(< a b) nil *integrator*)nil(askp '(=< 2 3) nil *integrator*)t(askp '(=< 3 2) nil *integrator*)nil(askp '(=< a b) nil *integrator*)nil(askp '(> 3 2) nil *integrator*)t(askp '(> 3 3) nil *integrator*)nil(askp '(> a b) nil *integrator*)nil(askp '(>= 3 2) nil *integrator*)t(askp '(>= 2 3) nil *integrator*)nil(askp '(>= a b) nil *integrator*)nil(askp '(+ 1 2 3) nil *integrator*)t(askp '(- 3 2 1) nil *integrator*)t(askp '(* 2 3 6) nil *integrator*)t(askp '(/ 4 2 2) nil *integrator*)t(askp '(1+ 1 2) nil *integrator*)t(askp '(1- 2 1) nil *integrator*)t(askp '(abs -1 1) nil *integrator*)t(askp '(exp 0 1) nil *integrator*)t(askp '(expt 2 3 8) nil *integrator*)t(askp '(log 8 2 3) nil *integrator*)t(askp '(sqrt 4 2) nil *integrator*)t(askp '(max 1 2 3 3) nil *integrator*)t(askp '(min 1 2 3 1) nil *integrator*)t(askp '(signum 23 1) nil *integrator*)t(askp '(acos 1 0) nil *integrator*)t(askp '(acosh 1 0) nil *integrator*)t(askp '(asin 0 0) nil *integrator*)t(askp '(asinh 0 0) nil *integrator*)t(askp '(atan 0 0) nil *integrator*)t(askp '(atanh 0 0) nil *integrator*)t(askp '(cos 0 1) nil *integrator*)t(askp '(cosh 0 1) nil *integrator*)t(askp '(sin 0 0) nil *integrator*)t(askp '(sinh 0 0) nil *integrator*)t(askp '(tan 0 0) nil *integrator*)t(askp '(tanh 0 0) nil *integrator*)t(askp '(ceiling 1.6 2) nil *integrator*)t(askp '(floor 1.6 1) nil *integrator*)t(askp '(round 1.6 2) nil *integrator*)t(askp '(truncate 1.6 1) nil *integrator*)t(askp '(rationalize 0.5 1/2) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(complexnumber 1) nil *integrator*)nil ;;; t?(askp '(complexnumber 1/2) nil *integrator*)nil ;;; t?(askp '(complexnumber 3.2) nil *integrator*)nil ;;; t?(askp '(complexnumber #c(1 2)) nil *integrator*)t(askp '(complexnumber a) nil *integrator*)nil(askp '(conjugate #c(1 1) #c(1 -1)) nil *integrator*)t(askp '(complex 1 1 #c(1 1)) nil *integrator*)t(askp '(realpart #c(1 2) 1) nil *integrator*)t(askp '(imagpart #c(1 2) 2) nil *integrator*)t(askp '(cis 0 #c(1 0)) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(number 1) nil *integrator*)t(askp '(number 1/2) nil *integrator*)t(askp '(number 3.2) nil *integrator*)t(askp '(number #c(1 2)) nil *integrator*)t(askp '(number a) nil *integrator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(character #\a) nil *integrator*)t(askp '(character "a") nil *integrator*)nil(askp '(character a) nil *integrator*)nil(askp '(alphabetic #\a) nil *integrator*)t(askp '(alphabetic #\1) nil *integrator*)nil(askp '(uppercase #\A) nil *integrator*)t(askp '(uppercase #\a) nil *integrator*)nil(askp '(lowercase #\a) nil *integrator*)t(askp '(lowercase #\A) nil *integrator*)nil(askp '(digit #\1) nil *integrator*)t(askp '(digit #\a) nil *integrator*)nil(askp '(alphanumeric #\a) nil *integrator*)t(askp '(alphanumeric #\1) nil *integrator*)t(askp '(alphanumeric #\.) nil *integrator*)nil(askp '(chargreater #\b #\a) nil *integrator*)t(askp '(chargreater #\a #\b) nil *integrator*)nil(askp '(charless #\a #\b) nil *integrator*)t(askp '(charless #\b #\a) nil *integrator*)nil(askp '(charupcase #\a #\A) nil *integrator*)t(askp '(chardowncase #\A #\a) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(string #\a) nil *integrator*)nil(askp '(string "a") nil *integrator*)t(askp '(string a) nil *integrator*)nil(askp '(stringgreater "bbc" "abc") nil *integrator*)t(askp '(stringgreater "abc" "bbc") nil *integrator*)nil(askp '(stringless "abc" "bbc") nil *integrator*)t(askp '(stringless "bbc" "abc") nil *integrator*)nil(askp '(substring "bc" "abcd") nil *integrator*)t(askp '(substring "abcd" "ab") nil *integrator*)nil(askp '(stringlength "abc" 3) nil *integrator*)t(askp '(stringelement "abc" 2 #\b) nil *integrator*)t(askp '(stringsubseq "abcd" 2 3 "bc") nil *integrator*)t(askp '(stringalphanumeric " a bc'd-e " "abcde") nil *integrator*)t(askp '(stringappend "abc" "def" "ghi" "abcdefghi") nil *integrator*)t(askp '(stringappend "" "") nil *integrator*)t(askp '(stringcharpos #\b "abc" 2) nil *integrator*)t(askp '(stringcharpos #\d "abc" ?x) nil *integrator*)nil(askp '(stringposition "bc" "abcd" 2) nil *integrator*)t(askp '(stringposition "cb" "abcd" ?x) nil *integrator*)nil(askp '(stringsubstitute #\a #\b "abab" "aaaa") nil *integrator*)t(askp '(stringupcase "abc" "ABC") nil *integrator*)t(askp '(stringdowncase "ABC" "abc") nil *integrator*)t(askp '(stringcapitalize "abc.def" "Abc.Def") nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(charstring #\a "a") nil *integrator*)t(askp '(stringify a "A") nil *integrator*)t(askp '(symbolize "a" a) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp '(same a a) nil *integrator*)t(askp '(same a b) nil *integrator*)nil(askp '(distinct a a) nil *integrator*)nil(askp '(distinct a b) nil *integrator*)t(askp '(word 'a) nil *integrator*)t(askp '(word a) nil *integrator*)nil(askp '(indvar '?x) nil *integrator*)t(askp '(indvar a) nil *integrator*)nil(askp '(seqvar '@l) nil *integrator*)t(askp '(seqvar a) nil *integrator*)nil(askp '(variable '?x) nil *integrator*)t(askp '(variable '@l) nil *integrator*)t(askp '(variable a) nil *integrator*)nil(askp '(execute (member 'b '(a b c)) '(b c)) nil *integrator*)t(askp '(evaluate (member b (a b c)) (b c)) nil *integrator*)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Logic;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(askp 'true nil *integrator*)t(askp 'false nil *integrator*)nil(askp '(not true) nil *integrator*)nil(askp '(not false) nil *integrator*)t(askp '(and true true) nil *integrator*)t(askp '(and true false) nil *integrator*)nil(askp '(and false true) nil *integrator*)nil(askp '(and false false) nil *integrator*)nil(askp '(or true true) nil *integrator*)t(askp '(or true false) nil *integrator*)t(askp '(or false true) nil *integrator*)t(askp '(or false false) nil *integrator*)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *manager*  '((specialty repository p)    (specialty repository q)))*(definemore *library*  '((<= (r ?x) (p ?x) (q ?x))))*(define-theory *repository* ""  '((p a)    (p b)    (p c)    (q b)    (q c)))*(askx '?x '(and (p ?x) (q ?x)) nil *integrator*)b(asks '?x '(and (p ?x) (q ?x)) nil *integrator*)(b c)(askx '?x '(or (p ?x) (q ?x)) nil *integrator*)a(asks '?x '(or (p ?x) (q ?x)) nil *integrator*)(a b c)(askx '?x '(r ?x) nil *integrator*)b(asks '?x '(r ?x) nil *integrator*)(b c)(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Aggregation and Dissemination and Integration;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *manager*  '((specialty myfactserver p)    (specialty myviewserver q)))*(definemore *library*  '((<= (r ?x ?z) (p ?x ?y) (q ?y ?z))))*(define-theory *myfactserver* ""  '((p a a)    (p a b)    (p a c)))*(define-theory *myviewserver* ""  '((q b c)    (q b d)))*(askx '(?x ?z) '(and (p ?x ?y) (q ?y ?z)) nil *integrator*)(A C)(asks '(?x ?z) '(and (p ?x ?y) (q ?y ?z)) nil *integrator*)((A C) (A D))(askx '(?x ?y) '(or (p ?x ?y) (q ?x ?y)) nil *integrator*)(A A)(asks '(?x ?y) '(or (p ?x ?y) (q ?x ?y)) nil *integrator*)((A A) (A B) (A C) (B C) (B D))(askx '(?x ?y) '(r ?x ?y) nil *integrator*)(A C)(asks '(?x ?y) '(r ?x ?y) nil *integrator*)((A C) (A D))(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;