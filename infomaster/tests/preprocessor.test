;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Preprocessor Tests;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(defparameter *sourcery* nil)*(defparameter *targetry* nil)*(eq (specvar 'one) '?ONE)T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; rename;;; duplicate;;; kill;;; move;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(setq *sourcery* (make-instance 'infoserver :name 'sourcery :kind 'ruleserver))*(setq *targetry* (make-instance 'infoserver :name 'targetry :kind 'ruleserver))*(define-theory *sourcery* ""  '((t a d)))*(define-theory *targetry* ""  '((r a d)))*(definemore *manager*  '((arity t 2)))*(contents *sourcery*)((T A D))(rename 't "S" *sourcery*)DONE(contents *sourcery*)((S A D))(move 's *sourcery* *targetry*)DONE(contents *sourcery*)NIL(contents *targetry*)((R A D) (S A D))(duplicate 'r "T" *targetry*)DONE(contents *targetry*)((R A D) (S A D) (T A D))(kill 'r *targetry*)*(contents *targetry*)((S A D) (T A D))(definemore *manager*  '((isa targetry infoserver)    (kind targetry ruleserver)))*(rename 'targetry "SOURCERY" *manager*)DONE(contents *sourcery*)NIL(contents *targetry*)((S A D) (T A D));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; copytable;;; droptable;;; movetable;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(setq *sourcery* (make-instance 'infoserver :name 'sourcery :kind 'ruleserver))*(setq *targetry* (make-instance 'infoserver :name 'targetry :kind 'fastserver))*(define-theory *sourcery* ""  '((p a b) (q b c)))*(define-theory *targetry* ""  '((p b c)))*(contents *sourcery*)((P A B) (Q B C))(contents *targetry*)((P B C))(copytable 'p *sourcery* *targetry*)DONE(contents *sourcery*)((P A B) (Q B C))(contents *targetry*)((P B C) (P A B))(movetable 'q *sourcery* *targetry*)DONE(contents *sourcery*)((P A B))(contents *targetry*)((P B C) (P A B) (Q B C))(droptable 'q *targetry*)DONE(contents *targetry*)((P B C) (P A B));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; copyclass;;; dropclass;;; moveclass;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a b) (isafrob b) (frob.parent b a) (frob.child b c) (q c d)))*(define-theory *targetry* ""  '((p b c)))*(definemore *manager*  '((predicate frob isafrob)    (attribute frob frob.parent)    (attribute frob frob.child)))*(copyclass 'frob *sourcery* *targetry*)DONE(contents *sourcery*)((P A B) (ISAFROB B) (FROB.PARENT B A) (FROB.CHILD B C) (Q C D))(contents *targetry*)((P B C) (ISAFROB B) (FROB.PARENT B A) (FROB.CHILD B C))(dropclass 'frob *sourcery*)DONE(contents *sourcery*)((P A B) (Q C D))(moveclass 'frob *targetry* *sourcery*)DONE(contents *sourcery*)((P A B) (Q C D) (ISAFROB B) (FROB.PARENT B A) (FROB.CHILD B C))(contents *targetry*)((P B C));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; copycontents;;; dropcontents;;; movecontents;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((t a c) (t a d)))*(define-theory *targetry* ""  '((r a d)))*(copycontents *sourcery* *targetry*)DONE(contents *sourcery*)((T A C) (T A D))(contents *targetry*)((R A D) (T A C) (T A D))(dropcontents *sourcery*)DONE(contents *sourcery*)NIL(movecontents *targetry* *sourcery*)DONE(contents *sourcery*)((R A D) (T A C) (T A D))(contents *targetry*)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; separate¬;;; separatedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((arity wide 3)    (column wide wide.1)    (column wide wide.2)    (column wide wide.3)    (key wide wide.1)))*(define-theory *sourcery* ""  '((wide a b c)    (wide d e f)))*(define-theory *targetry* "" nil)*(separate 'wide nil)((<= (WIDE.2 ?WIDE.1 ?WIDE.2) (WIDE ?WIDE.1 ?WIDE.2 ?WIDE.3)) (<= (WIDE.3 ?WIDE.1 ?WIDE.3) (WIDE ?WIDE.1 ?WIDE.2 ?WIDE.3)))(separatedata 'wide *sourcery* *targetry*)DONE(contents *targetry*)((WIDE.2 A B) (WIDE.3 A C) (WIDE.2 D E) (WIDE.3 D F))(facts 'wide.2 *manager*)((COLUMN WIDE WIDE.2) (SPECIALTY TARGETRY WIDE.2) (SPECIALIST WIDE.2 TARGETRY) (INTEREST TARGETRY WIDE.2) (TABLE TARGETRY WIDE.2));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; consolidate;;; consolidatedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((arity narrow 3)    (column narrow narrow.1)    (column narrow narrow.2)    (column narrow narrow.3)    (key narrow narrow.1)))*(define-theory *sourcery* ""  '((narrow.2 a b)    (narrow.3 a c)    (narrow.2 d e)    (narrow.3 d f)))*(define-theory *targetry* "" nil)*(consolidate 'narrow nil)(<= (NARROW ?NARROW.1 ?NARROW.2 ?NARROW.3)    (NARROW.2 ?NARROW.1 ?NARROW.2)    (NARROW.3 ?NARROW.1 ?NARROW.3))(consolidatedata 'narrow *sourcery* *targetry*)DONE(contents *targetry*)((NARROW A B C) (NARROW D E F))(facts 'targetry *manager*)((SPECIALTY TARGETRY NARROW) (SPECIALIST NARROW TARGETRY) (INTEREST TARGETRY NARROW) (TABLE TARGETRY NARROW));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reify;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((arity foo 4)    (column foo foo.1)    (column foo foo.2)    (column foo foo.3)    (column foo foo.4)    (key foo foo.1)    (range foo.2 string)    (range foo.3 frob)    (arity bas 2)    (arity bat 3)    (key bat bat.1)    (key bat bat.2)))*(reify 'foo)FOO.ENTITY(facts 'foo *manager*)((ARITY FOO 4) (COLUMN FOO FOO.1) (COLUMN FOO FOO.2) (COLUMN FOO FOO.3) (COLUMN FOO FOO.4) (KEY FOO FOO.1))(facts 'foo.entity *manager*)((ISA FOO.ENTITY CLASS) (ISA FOO.ENTITY THING) (PREDICATE FOO.ENTITY FOO.ENTITY.ISA) (ATTRIBUTE FOO.ENTITY FOO.ENTITY.1) (ATTRIBUTE FOO.ENTITY FOO.ENTITY.2) (ATTRIBUTE FOO.ENTITY FOO.ENTITY.3) (ATTRIBUTE FOO.ENTITY FOO.ENTITY.4) (FOCUS FOO.ENTITY.ISA FOO.ENTITY) (DOMAIN FOO.ENTITY.1 FOO.ENTITY) (DOMAIN FOO.ENTITY.2 FOO.ENTITY) (DOMAIN FOO.ENTITY.3 FOO.ENTITY) (DOMAIN FOO.ENTITY.4 FOO.ENTITY))(facts 'foo.entity.isa *manager*)((PREDICATE FOO.ENTITY FOO.ENTITY.ISA) (ISA FOO.ENTITY.ISA NARYRELATION) (ISA FOO.ENTITY.ISA RELATION) (ISA FOO.ENTITY.ISA THING) (ARITY FOO.ENTITY.ISA 1) (FOCUS FOO.ENTITY.ISA FOO.ENTITY))(facts 'foo.entity.1 *manager*)((ATTRIBUTE FOO.ENTITY FOO.ENTITY.1) (ISA FOO.ENTITY.1 ATTRIBUTERELATION) (ISA FOO.ENTITY.1 RELATION) (ISA FOO.ENTITY.1 THING) (ARITY FOO.ENTITY.1 2) (DOMAIN FOO.ENTITY.1 FOO.ENTITY) (UNIQUE FOO.ENTITY.1 YES) (TOTAL FOO.ENTITY.1 YES))(reify 'bar)"Error - Relation has no arity."(reify 'bas)"Error - Relation has no key."(reify 'bat)"Error - Relation has more than one key.";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reifyrules;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *manager*  '((range foo.entity.2 string)    (range foo.entity.3 number)    (range foo.entity.4 frob)))*(define-theory *targetry* "" nil)*(reifyrules 'foo 'foo.entity *targetry*)DONE(contents *targetry*)((<= (ISA ?X FOO.ENTITY) (FOO.ENTITY.ISA ?X)) (<= (FOO.ENTITY.ISA ?X) (FOO.ENTITY.1 ?X ?Y)) (<= (ISONE ?X FOO.ENTITY) (FOO.ENTITY.1 ?X ?Y)) (<= (NOT (FOO.ENTITY.1 ?X ?Y)) (ISNOT ?X FOO.ENTITY)) (<= (ISONE ?X FOO.ENTITY) (FOO.ENTITY.2 ?X ?Y)) (<= (NOT (FOO.ENTITY.2 ?X ?Y)) (ISNOT ?X FOO.ENTITY)) (<= (ISONE ?X FOO.ENTITY) (FOO.ENTITY.3 ?X ?Y)) (<= (NOT (FOO.ENTITY.3 ?X ?Y)) (ISNOT ?X FOO.ENTITY)) (<= (ISONE ?X FOO.ENTITY) (FOO.ENTITY.4 ?X ?Y)) (<= (NOT (FOO.ENTITY.4 ?X ?Y)) (ISNOT ?X FOO.ENTITY)) (<= (FOO.ENTITY.1 ?FOO.ENTITY ?FOO.1)     (FOO ?FOO.1 ?FOO.2 ?FOO.3 ?FOO.4)     (SYMBOLIZE ?FOO.1 ?FOO.ENTITY)) (<= (FOO.ENTITY.2 ?FOO.ENTITY ?FOO.2)     (FOO ?FOO.1 ?FOO.2 ?FOO.3 ?FOO.4)     (SYMBOLIZE ?FOO.1 ?FOO.ENTITY)) (<= (FOO.ENTITY.3 ?FOO.ENTITY ?3)     (FOO ?FOO.1 ?FOO.2 ?FOO.3 ?FOO.4)     (SYMBOLIZE ?FOO.1 ?FOO.ENTITY)     (SYMBOLIZE ?FOO.3 ?3)) (<= (FOO.ENTITY.4 ?FOO.ENTITY ?4)     (FOO ?FOO.1 ?FOO.2 ?FOO.3 ?FOO.4)     (SYMBOLIZE ?FOO.1 ?FOO.ENTITY)     (SYMBOLIZE ?FOO.4 ?4)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; reifydata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *sourcery* ""  '((foo "a" "b" "c" "d")    (foo "e" "f" "g" "h")))*(define-theory *targetry* "" nil)*(reifydata 'foo 'foo.entity *sourcery* *targetry*)DONE(contents *targetry*)((ISA A FOO.ENTITY) (FOO.ENTITY.ISA A) (FOO.ENTITY.1 A "a") (FOO.ENTITY.2 A "b") (FOO.ENTITY.3 A C) (FOO.ENTITY.4 A D) (ISA E FOO.ENTITY) (FOO.ENTITY.ISA E) (FOO.ENTITY.1 E "e") (FOO.ENTITY.2 E "f") (FOO.ENTITY.3 E G) (FOO.ENTITY.4 E H))(facts 'targetry *manager*)((FRAME TARGETRY FOO.ENTITY) (SPECIALTY TARGETRY FOO.ENTITY.ISA) (SPECIALIST FOO.ENTITY.ISA TARGETRY) (INTEREST TARGETRY FOO.ENTITY.ISA) (TABLE TARGETRY FOO.ENTITY.ISA) (SPECIALTY TARGETRY FOO.ENTITY.1) (SPECIALIST FOO.ENTITY.1 TARGETRY) (INTEREST TARGETRY FOO.ENTITY.1) (TABLE TARGETRY FOO.ENTITY.1) (SPECIALTY TARGETRY FOO.ENTITY.2) (SPECIALIST FOO.ENTITY.2 TARGETRY) (INTEREST TARGETRY FOO.ENTITY.2) (TABLE TARGETRY FOO.ENTITY.2) (SPECIALTY TARGETRY FOO.ENTITY.3) (SPECIALIST FOO.ENTITY.3 TARGETRY) (INTEREST TARGETRY FOO.ENTITY.3) (TABLE TARGETRY FOO.ENTITY.3) (SPECIALTY TARGETRY FOO.ENTITY.4) (SPECIALIST FOO.ENTITY.4 TARGETRY) (INTEREST TARGETRY FOO.ENTITY.4) (TABLE TARGETRY FOO.ENTITY.4));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; tabulate;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((isa foo class)    (predicate foo foo.isa)    (attribute foo foo.2)    (attribute foo foo.3)    (attribute foo foo.4)    (isa foo.isa naryrelation)    (arity  foo.isa 1)    (isa foo.2 attributerelation)    (domain foo.2 foo)    (range  foo.2 string)    (unique foo.2 yes)    (total  foo.2 yes)    (isa foo.3 attributerelation)    (domain foo.3 foo)    (range  foo.3 number)    (unique foo.3 yes)    (total  foo.3 yes)    (isa foo.4 attributerelation)    (domain foo.4 foo)    (range  foo.4 frob)    (unique foo.4 yes)    (total  foo.4 yes)))*(tabulate 'foo)FOO.TABLE(facts 'foo.table *manager*)((ISA FOO.TABLE NARYRELATION) (ISA FOO.TABLE RELATION) (ISA FOO.TABLE THING) (ARITY FOO.TABLE 4) (COLUMN FOO.TABLE FOO.TABLE.1) (COLUMN FOO.TABLE FOO.TABLE.2) (COLUMN FOO.TABLE FOO.TABLE.3) (COLUMN FOO.TABLE FOO.TABLE.4))(facts 'foo.table.1 *manager*)((COLUMN FOO.TABLE FOO.TABLE.1) (ISA FOO.TABLE.1 ATTRIBUTERELATION) (ISA FOO.TABLE.1 RELATION) (ISA FOO.TABLE.1 THING) (ARITY FOO.TABLE.1 2));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; tabulaterules;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *targetry* "" nil)*(tabulaterules 'foo 'foo.table *targetry*)DONE(contents *targetry*)((<= (FOO.TABLE ?X ?1 ?2 ?3)     (FOO.ISA ?X)     (FOO.2 ?X ?1)     (FOO.3 ?X ?2)     (FOO.4 ?X ?3)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; tabulatedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-theory *sourcery* ""  '((foo.isa a)    (foo.1 a "a")    (foo.2 a "b")    (foo.3 a c)    (foo.4 a d)    (foo.isa e)    (foo.1 e "e")    (foo.2 e "f")    (foo.3 e g)    (foo.4 e h)))*(define-theory *targetry* "" nil)*(tabulatedata 'foo 'foo.table *sourcery* *targetry*)DONE(contents *targetry*)((FOO.TABLE "A" "b" "C" "D") (FOO.TABLE "E" "f" "G" "H"));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; interrelate;;; interrelatedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((arity p 3)    (arity q 3)    (superrelation p q)))*(interrelate 'p *targetry*)DONE(contents *targetry*)((<= (Q ?1 ?2 ?3) (P ?1 ?2 ?3)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; incorporate;;; incorporatedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((superclass c b)    (predicate c c.isa)    (attribute c c.1)    (attribute c c.2)))*(incorporate 'c *targetry*)DONE(contents *targetry*)((<= (ISA ?X B) (C.ISA ?X)) (<= (ISA ?X C) (C.ISA ?X)) (<= (ISONE ?X C) (C.ISA ?X)) (<= (NOT (C.ISA ?X)) (ISNOT ?X C)) (<= (ISONE ?X C) (C.1 ?X ?Y)) (<= (NOT (C.1 ?X ?Y)) (ISNOT ?X C)) (<= (ISONE ?X C) (C.2 ?X ?Y)) (<= (NOT (C.2 ?X ?Y)) (ISNOT ?X C)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; integrate;;; integratedata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((specialty sourcery a.isa)    (specialty sourcery b.isa)    (predicate a a.isa)    (attribute a a.1)    (attribute a a.2)    (superclass b b.1)    (predicate b b.isa)    (attribute b b.1)    (attribute b b.2)    (superclass c b)    (predicate c c.isa)    (attribute c c.1)    (attribute c c.2)))*(integrate *sourcery* *targetry*)DONE(contents *targetry*)((<= (ISA ?X A) (A.ISA ?X)) (<= (ISONE ?X A) (A.ISA ?X)) (<= (NOT (A.ISA ?X)) (ISNOT ?X A)) (<= (ISONE ?X A) (A.1 ?X ?Y)) (<= (NOT (A.1 ?X ?Y)) (ISNOT ?X A)) (<= (ISONE ?X A) (A.2 ?X ?Y)) (<= (NOT (A.2 ?X ?Y)) (ISNOT ?X A)) (<= (ISA ?X B.1) (B.ISA ?X)) (<= (ISA ?X B) (B.ISA ?X)) (<= (ISONE ?X B) (B.ISA ?X)) (<= (NOT (B.ISA ?X)) (ISNOT ?X B)) (<= (ISONE ?X B) (B.1 ?X ?Y)) (<= (NOT (B.1 ?X ?Y)) (ISNOT ?X B)) (<= (ISONE ?X B) (B.2 ?X ?Y)) (<= (NOT (B.2 ?X ?Y)) (ISNOT ?X B)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; evert;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((<= (r ?x ?z) (m ?x ?z))    (<= (r ?x ?z) (p ?x ?y) (q ?y ?z))))*(instp (evertrules 'r *sourcery* nil)       '((<= (M ?V1 ?V2) (R ?V1 ?V2) (NOT (R2 ?V1 ?V2)))         (<= (R2 ?V1 ?V2) (R ?V1 ?V2) (NOT (M ?V1 ?V2)))         (<= (R2 ?V1 ?V2) (P ?V1 ?Y) (Q ?Y ?V2))         (<= (P ?V1 (?sk ?V2 ?V1)) (R2 ?V1 ?V2))         (<= (Q (?sk ?V2 ?V1) ?V2) (R2 ?V1 ?V2))))T(evertrules 's *sourcery* nil)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; backwardrules;;; forwardrules;;; triggerrules;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((<= (r ?x ?z) (m ?x ?z))    (<= (r ?x ?z) (p ?x ?y) (q ?y ?z))))*(define-theory *targetry* "" nil)*(evertrules 'r *sourcery* *targetry*)*(backwardrules 'r *sourcery* nil)((<= (R ?V1 ?V2) (M ?V1 ?V2)) (<= (R ?V1 ?V2) (P ?V1 ?Y) (Q ?Y ?V2)))(backwardrules 'r *targetry* nil)((<= (NOT (R ?V1 ?V2)) (NOT (M ?V1 ?V2)) (NOT (R2 ?V1 ?V2))) (<= (NOT (R ?V1 ?V2)) (NOT (R2 ?V1 ?V2)) (NOT (M ?V1 ?V2))))(backwardrules 's *targetry* nil)NIL(forwardrules 'r *sourcery* nil)((=> (M ?X ?Z) (R ?X ?Z)) (=> (P ?X ?Y) (Q ?Y ?Z) (R ?X ?Z)) (=> (Q ?Y ?Z) (P ?X ?Y) (R ?X ?Z)))(forwardrules 'r *targetry* nil)((=> (NOT (R2 ?V1 ?V2)) (NOT (M ?V1 ?V2)) (NOT (R ?V1 ?V2))) (=> (NOT (M ?V1 ?V2)) (NOT (R2 ?V1 ?V2)) (NOT (R ?V1 ?V2))))(forwardrules 's *targetry* nil)NIL(triggerrules 'r *sourcery* nil)((=> (NOT (R ?X ?Z)) (NOT (M ?X ?Z))) (=> (NOT (R ?X ?Z)) (Q ?Y ?Z) (NOT (P ?X ?Y))) (=> (NOT (R ?X ?Z)) (P ?X ?Y) (NOT (Q ?Y ?Z))))(triggerrules 'r *targetry* nil)((=> (R ?V1 ?V2) (NOT (M ?V1 ?V2)) (R2 ?V1 ?V2)) (=> (R ?V1 ?V2) (NOT (R2 ?V1 ?V2)) (M ?V1 ?V2)))(triggerrules 's *targetry* nil)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; materialize;;; dematerialize;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(definemore *manager*  '((isa r relation)    (arity r 2)))*(define-theory *sourcery* ""  '((p a b)    (p a c)    (q c d)    (<= (r ?x ?z) (p ?x ?y) (q ?y ?z))))*(define-theory *targetry* ""  '((r b c)))*(materialize 'r *sourcery* *targetry* 'yes)DONE(findp `(specialty ,(name *targetry*) r) *manager*)T(findp `(interest ,(name *targetry*) r) *manager*)T(contents *targetry*)((R A D))(dematerialize 'r *targetry*)DONE(findp `(specialty ,(name *targetry*) r) *manager*)NIL(findp `(interest ,(name *targetry*) r) *manager*)NIL(contents *targetry*)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; cache;;; flush;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a b) (isafrob b) (frob.parent b a) (frob.child b c) (q c d)))*(define-theory *targetry* ""  '((p b c)))*(definemore *manager*  '((predicate frob isafrob)    (attribute frob frob.parent)    (attribute frob frob.child)    (arity isafrob 1)    (arity frob.parent 2)    (arity frob.child 2)))*(cache 'frob *sourcery* *targetry*)DONE(contents *targetry*)((P B C) (ISAFROB B) (FROB.PARENT B A) (FROB.CHILD B C))(finds '?r `(specialty ,(name *targetry*) ?r) *manager*)(ISAFROB FROB.PARENT FROB.CHILD)(flush 'frob *targetry*)DONE(contents *targetry*)((P B C))(finds '?r `(specialty ,(name *targetry*) ?r) *manager*)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; introspect;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a b) (p a b) (q b c)))*(introspect *sourcery*)DONE(facts 'p *manager*)((ISA P RELATION) (ISA P THING) (ARITY P 2) (SPECIALTY SOURCERY P) (SPECIALIST P SOURCERY) (TABLE SOURCERY P))(facts 'sourcery *manager*)((SPECIALTY SOURCERY P) (SPECIALIST P SOURCERY) (TABLE SOURCERY P) (SPECIALTY SOURCERY Q) (SPECIALIST Q SOURCERY) (TABLE SOURCERY Q));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; countrows;;; area;;; uniquize;;; initize;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a b) (p a b) (q b c)))*(definemore *manager*  '((frame sourcery c)    (specialty sourcery p)    (specialist p sourcery)    (table sourcery p)))*(countrows *sourcery*)3(area *sourcery*)9(uniquize *sourcery*)DONE(countrows *sourcery*)2(initize *sourcery* 'dynamic)DONE(countrows *sourcery*)0(facts 'sourcery *manager*)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; checkdata;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a)    (p a b)    (p a b c)    (p a d)    (q a b)    (q a c)))*(definemore *manager*  '((arity p 2)    (unique p yes)    (unique q no)))*(badarities *sourcery*)((ERROR "Bad arity" (P A)) (ERROR "Bad arity" (P A B C)))(nonuniques 'p *sourcery*)((P A B) (P A D))(nonuniques 'q *sourcery*)NIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; checkrules;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((<= (unsafe ?x ?y) (u ?x) (v ?x))    (<= (duplicate ?x ?y) (d ?x ?y))    (<= (duplicate ?u ?v) (d ?u ?v))    (<= (empty ?x) (e ?x) (isacharacter ?x) (+ ?x 2 3))    (<= (cartesian ?x ?v) (c ?x ?z) (d ?y ?v) (e ?u ?v))    (<= (explosive ?x) (p ?x) (q ?x))    (<= (p ?x) (m ?x))    (<= (p ?x) (n ?x))    (<= (q ?x) (r ?x))    (<= (q ?x) (t ?x))))*(unsafes *sourcery*)((<= (UNSAFE ?X ?Y) (U ?X) (V ?X)))(duplicates *sourcery*)((<= (DUPLICATE ?X ?Y) (D ?X ?Y)))(empties *sourcery*)((<= (EMPTY ?X) (E ?X) (ISACHARACTER ?X) (+ ?X 2 3)))(cartesians *sourcery*)((<= (CARTESIAN ?X ?V) (C ?X ?Z) (D ?Y ?V) (E ?U ?V)))(explosives *sourcery*)((<= (EXPLOSIVE ?X) (P ?X) (Q ?X)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; checkviews;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(restartsystem)*(define-theory *sourcery* ""  '((p a a)    (p a b)    (p c d)    (isa a frob)    (isa b frob)))*(definemore *manager*  '((domain p frob)    (range p frob)    (unique p yes)    (total p yes)))*(find-domain-violations 'p *sourcery*)((ERROR "Domain violation" (P C ??)))(find-range-violations 'p *sourcery*)((ERROR "Range violation" (P ?? D)))(find-unique-violations 'p *sourcery*)((ERROR "Uniqueness violation" (P A A)) (ERROR "Uniqueness violation" (P A B)))(find-total-violations 'p *sourcery*)((ERROR "Total violation" (P B ??)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;