;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; broker.test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; resetsystem;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; revise, revisions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(definemore *repository*  '((p a)    (p b)    (q b)))*(definemore *library*  '((<= (pos ?p) (plus ?p))    (<= (neg ?p) (minus ?p))        (<= (pos (r ?x)) (p ?x) (not (minus (p ?x))) (plus (q ?x)))    (<= (pos (r ?x)) (plus (p ?x)) (q ?x) (not (minus (q ?x))))    (<= (pos (r ?x)) (plus (p ?x)) (plus (q ?x)))        (<= (neg (r ?x)) (minus (p ?x)))    (<= (neg (r ?x)) (minus (q ?x)))    (<= (trigger (print (kwote ?x))) (pos (p ?x)) (pos (q ?x)))))*(record 'p *repository*)DONE(record 'q *repository*)DONE(publish 'p *repository*)DONE(publish 'q *repository*)DONE(maintain 'r *mybroker*)DONE(subscribe 'p 'mrg)DONE(subscribe 'r 'mrg)DONE(revisions '(and (not (p b)) (q a)) mybroker)((NOT (P B)) (Q A) (NOT (R B)) (R A))(revisions '(and (p c) (q c)) mybroker)((P C) (Q C) (R C));(reactions '(and (p c) (q c)) mybroker);((PRINT (KWOTE C)))(define-theory *library* ""  '((<= (error "P is a function.") (p ?x ?y) (not (minus (p ?x ?y))) (plus (p ?x ?z)) (distinct ?y ?z))    (<= (error "P is a function.") (plus (p ?x ?y)) (plus (p ?x ?z)) (distinct ?y ?z))))*(definemore *repository*  '((p a b)))*(errors '(p a c) mybroker)("P is a function.")(errors '(and (not (p a b)) (p a c)) mybroker)NIL(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Integers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (integer 2)) nil mybroker)t(request '(ask-if (integer 1/2)) nil mybroker)nil(request '(ask-if (integer 3.2)) nil mybroker)nil(request '(ask-if (integer #c(1 2))) nil mybroker)nil(request '(ask-if (integer a)) nil mybroker)nil(request '(ask-if (even 2)) nil mybroker)t(request '(ask-if (even a)) nil mybroker)nil(request '(ask-if (odd 3)) nil mybroker)t(request '(ask-if (odd a)) nil mybroker)nil(request '(ask-if (positive 3)) nil mybroker)t(request '(ask-if (positive a)) nil mybroker)nil(request '(ask-if (negative -1)) nil mybroker)t(request '(ask-if (negative a)) nil mybroker)nil(request '(ask-if (zero 0)) nil mybroker)t(request '(ask-if (gcd 2 6 2)) nil mybroker)t(request '(ask-if (lcm 2 3 6)) nil mybroker)t(request '(ask-if (isqrt 5 2)) nil mybroker)t(request '(ask-if (mod 7 2 1)) nil mybroker)t(request '(ask-if (rem 3 2 1)) nil mybroker)t(request '(ask-if (ash 1 1 2)) nil mybroker)t(request '(ask-if (boole 6 1 1 1)) nil mybroker)t(request '(ask-if (logbit 2 6)) nil mybroker)t(request '(ask-if (logand 1 1 1)) nil mybroker)t(request '(ask-if (logandc1 0 1 1)) nil mybroker)t(request '(ask-if (logandc2 1 0 1)) nil mybroker)t(request '(ask-if (logcount 3 2)) nil mybroker)t(request '(ask-if (logeqv 1 1 -1)) nil mybroker)t(request '(ask-if (logior 1 1 1)) nil mybroker)t(request '(ask-if (lognand 0 1 -1)) nil mybroker)t(request '(ask-if (lognor 0 0 -1)) nil mybroker)t(request '(ask-if (lognot -4 3)) nil mybroker)t(request '(ask-if (logorc1 0 0 -1)) nil mybroker)t(request '(ask-if (logorc2 0 0 -1)) nil mybroker)t(request '(ask-if (logxor 0 1 1)) nil mybroker)t(request '(ask-if (zero a)) nil mybroker)nil(request '(ask-if (logbit 0 6)) nil mybroker)nil(request '(ask-if (logtest 2 6)) nil mybroker)t(request '(ask-if (logtest 2 -3)) nil mybroker)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rationals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (rationalnumber 1)) nil mybroker)t(request '(ask-if (rationalnumber 1/2)) nil mybroker)t(request '(ask-if (rationalnumber 3.2)) nil mybroker)nil(request '(ask-if (rationalnumber #c(1 2))) nil mybroker)nil(request '(ask-if (rationalnumber a)) nil mybroker)nil(request '(ask-if (numerator 1/2 1)) nil mybroker)t(request '(ask-if (denominator 1/2 2)) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reals;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (realnumber 1)) nil mybroker)t(request '(ask-if (realnumber 1/2)) nil mybroker)t(request '(ask-if (realnumber 3.2)) nil mybroker)t(request '(ask-if (realnumber #c(1 2))) nil mybroker)nil(request '(ask-if (realnumber a)) nil mybroker)nil(request '(ask-if (< 2 3)) nil mybroker)t(request '(ask-if (< 3 3)) nil mybroker)nil(request '(ask-if (< a b)) nil mybroker)nil(request '(ask-if (=< 2 3)) nil mybroker)t(request '(ask-if (=< 3 2)) nil mybroker)nil(request '(ask-if (=< a b)) nil mybroker)nil(request '(ask-if (> 3 2)) nil mybroker)t(request '(ask-if (> 3 3)) nil mybroker)nil(request '(ask-if (> a b)) nil mybroker)nil(request '(ask-if (>= 3 2)) nil mybroker)t(request '(ask-if (>= 2 3)) nil mybroker)nil(request '(ask-if (>= a b)) nil mybroker)nil(request '(ask-if (+ 1 2 3)) nil mybroker)t(request '(ask-if (- 3 2 1)) nil mybroker)t(request '(ask-if (* 2 3 6)) nil mybroker)t(request '(ask-if (/ 4 2 2)) nil mybroker)t(request '(ask-if (1+ 1 2)) nil mybroker)t(request '(ask-if (1- 2 1)) nil mybroker)t(request '(ask-if (abs -1 1)) nil mybroker)t(request '(ask-if (exp 0 1)) nil mybroker)t(request '(ask-if (expt 2 3 8)) nil mybroker)t(request '(ask-if (log 8 2 3)) nil mybroker)t(request '(ask-if (sqrt 4 2)) nil mybroker)t(request '(ask-if (max 1 2 3 3)) nil mybroker)t(request '(ask-if (min 1 2 3 1)) nil mybroker)t(request '(ask-if (signum 23 1)) nil mybroker)t(request '(ask-if (acos 1 0)) nil mybroker)t(request '(ask-if (acosh 1 0)) nil mybroker)t(request '(ask-if (asin 0 0)) nil mybroker)t(request '(ask-if (asinh 0 0)) nil mybroker)t(request '(ask-if (atan 0 0)) nil mybroker)t(request '(ask-if (atanh 0 0)) nil mybroker)t(request '(ask-if (cos 0 1)) nil mybroker)t(request '(ask-if (cosh 0 1)) nil mybroker)t(request '(ask-if (sin 0 0)) nil mybroker)t(request '(ask-if (sinh 0 0)) nil mybroker)t(request '(ask-if (tan 0 0)) nil mybroker)t(request '(ask-if (tanh 0 0)) nil mybroker)t(request '(ask-if (ceiling 1.6 2)) nil mybroker)t(request '(ask-if (floor 1.6 1)) nil mybroker)t(request '(ask-if (round 1.6 2)) nil mybroker)t(request '(ask-if (truncate 1.6 1)) nil mybroker)t(request '(ask-if (rationalize 0.5 1/2)) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Complexes;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (complexnumber 1)) nil mybroker)nil ;;; t?(request '(ask-if (complexnumber 1/2)) nil mybroker)nil ;;; t?(request '(ask-if (complexnumber 3.2)) nil mybroker)nil ;;; t?(request '(ask-if (complexnumber #c(1 2))) nil mybroker)t(request '(ask-if (complexnumber a)) nil mybroker)nil(request '(ask-if (conjugate #c(1 1) #c(1 -1))) nil mybroker)t(request '(ask-if (complex 1 1 #c(1 1))) nil mybroker)t(request '(ask-if (realpart #c(1 2) 1)) nil mybroker)t(request '(ask-if (imagpart #c(1 2) 2)) nil mybroker)t(request '(ask-if (cis 0 #c(1 0))) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Numbers;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (number 1)) nil mybroker)t(request '(ask-if (number 1/2)) nil mybroker)t(request '(ask-if (number 3.2)) nil mybroker)t(request '(ask-if (number #c(1 2))) nil mybroker)t(request '(ask-if (number a)) nil mybroker)nil;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Characters;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (character #\a)) nil mybroker)t(request '(ask-if (character "a")) nil mybroker)nil(request '(ask-if (character a)) nil mybroker)nil(request '(ask-if (alphabetic #\a)) nil mybroker)t(request '(ask-if (alphabetic #\1)) nil mybroker)nil(request '(ask-if (uppercase #\A)) nil mybroker)t(request '(ask-if (uppercase #\a)) nil mybroker)nil(request '(ask-if (lowercase #\a)) nil mybroker)t(request '(ask-if (lowercase #\A)) nil mybroker)nil(request '(ask-if (digit #\1)) nil mybroker)t(request '(ask-if (digit #\a)) nil mybroker)nil(request '(ask-if (alphanumeric #\a)) nil mybroker)t(request '(ask-if (alphanumeric #\1)) nil mybroker)t(request '(ask-if (alphanumeric #\.)) nil mybroker)nil(request '(ask-if (chargreater #\b #\a)) nil mybroker)t(request '(ask-if (chargreater #\a #\b)) nil mybroker)nil(request '(ask-if (charless #\a #\b)) nil mybroker)t(request '(ask-if (charless #\b #\a)) nil mybroker)nil(request '(ask-if (charupcase #\a #\A)) nil mybroker)t(request '(ask-if (chardowncase #\A #\a)) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Strings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (string #\a)) nil mybroker)nil(request '(ask-if (string "a")) nil mybroker)t(request '(ask-if (string a)) nil mybroker)nil(request '(ask-if (stringgreater "bbc" "abc")) nil mybroker)t(request '(ask-if (stringgreater "abc" "bbc")) nil mybroker)nil(request '(ask-if (stringless "abc" "bbc")) nil mybroker)t(request '(ask-if (stringless "bbc" "abc")) nil mybroker)nil(request '(ask-if (substring "bc" "abcd")) nil mybroker)t(request '(ask-if (substring "abcd" "ab")) nil mybroker)nil(request '(ask-if (stringlength "abc" 3)) nil mybroker)t(request '(ask-if (stringelement "abc" 2 #\b)) nil mybroker)t(request '(ask-if (stringsubseq "abcd" 2 3 "bc")) nil mybroker)t(request '(ask-if (stringalphanumeric " a bc'd-e " "abcde")) nil mybroker)t(request '(ask-if (stringappend "abc" "def" "ghi" "abcdefghi")) nil mybroker)t(request '(ask-if (stringappend "" "")) nil mybroker)t(request '(ask-if (stringcharpos #\b "abc" 2)) nil mybroker)t(request '(ask-if (stringcharpos #\d "abc" ?x)) nil mybroker)nil(request '(ask-if (stringposition "bc" "abcd" 2)) nil mybroker)t(request '(ask-if (stringposition "cb" "abcd" ?x)) nil mybroker)nil(request '(ask-if (stringsubstitute #\a #\b "abab" "aaaa")) nil mybroker)t(request '(ask-if (stringupcase "abc" "ABC")) nil mybroker)t(request '(ask-if (stringdowncase "ABC" "abc")) nil mybroker)t(request '(ask-if (stringcapitalize "abc.def" "Abc.Def")) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Conversion;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (charstring #\a "a")) nil mybroker)t(request '(ask-if (stringify a "A")) nil mybroker)t(request '(ask-if (symbolize "a" a)) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Miscellaneous;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if (same a a)) nil mybroker)t(request '(ask-if (same a b)) nil mybroker)nil(request '(ask-if (distinct a a)) nil mybroker)nil(request '(ask-if (distinct a b)) nil mybroker)t(request '(ask-if (word 'a)) nil mybroker)t(request '(ask-if (word a)) nil mybroker)nil(request '(ask-if (indvar '?x)) nil mybroker)t(request '(ask-if (indvar a)) nil mybroker)nil(request '(ask-if (seqvar '@l)) nil mybroker)t(request '(ask-if (seqvar a)) nil mybroker)nil(request '(ask-if (variable '?x)) nil mybroker)t(request '(ask-if (variable '@l)) nil mybroker)t(request '(ask-if (variable a)) nil mybroker)nil(request '(ask-if (execute (member 'b '(a b c)) '(b c))) nil mybroker)t(request '(ask-if (evaluate (member b (a b c)) (b c))) nil mybroker)t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inference;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(request '(ask-if true) nil mybroker)t(request '(ask-if false) nil mybroker)nil(request '(ask-if (not true)) nil mybroker)nil(request '(ask-if (not false)) nil mybroker)t(request '(ask-if (and true true)) nil mybroker)t(request '(ask-if (and true false)) nil mybroker)nil(request '(ask-if (and false true)) nil mybroker)nil(request '(ask-if (and false false)) nil mybroker)nil(request '(ask-if (or true true)) nil mybroker)t(request '(ask-if (or true false)) nil mybroker)t(request '(ask-if (or false true)) nil mybroker)t(request '(ask-if (or false false)) nil mybroker)nil(definemore *manager*  '((specialty repository p)    (specialty repository q)))*(definemore *library*  '((<= (r ?x) (p ?x) (q ?x))))*(define-theory *repository* ""  '((p a)    (p b)    (p c)    (q b)    (q c)))*(request '(ask-one ?x (and (p ?x) (q ?x))) nil mybroker)b(request '(ask-all ?x (and (p ?x) (q ?x))) nil mybroker)(b c)(request '(ask-one ?x (or (p ?x) (q ?x))) nil mybroker)a(request '(ask-all ?x (or (p ?x) (q ?x))) nil mybroker)(a b c)(request '(ask-one ?x (r ?x)) nil mybroker)b(request '(ask-all ?x (r ?x)) nil mybroker)(b c)(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; resetsystem;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(resetsystem)*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;