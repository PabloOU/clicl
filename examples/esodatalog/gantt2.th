; date, date-lte, event, event-start, event-end, row, col are inputs
; want assignment of events to <row,col> pairs so that no two events that overlap are assigned the
;    same row.  Also want to minimize the number of rows and columns.
;   esodb: assign-row and assign-col

; events have (functional) start and end points
(=> (= (event-start ?e) ?s) (and (event ?e) (date ?s)))
(=> (= (event-end ?e) ?s) (and (event ?e) (date ?s)))

; assign each event to a unique row-col pair
(=> (= (assign-row ?e) ?r) (and (event ?e) (row ?r))) ; types
(=> (= (assign-col ?e) ?c) (and (event ?e) (col ?c))) ; types

; ensure events don't overlap if they are assigned the same row
(=> (= (assign-row ?e1) ?r) (= (assign-row ?e2) ?r) (not (overlap ?e1 ?e2)))


; two events overlap as long as one interval is not wholly contained outside the other
;   i.e. as long as neither the end of the first is less than the start of the second
;   nor the end of the second is less than the start of the first.

(<= (overlap ?e1 ?e2)
	(event ?e1)
	(event ?e2)
	(not (= ?e1 ?e2))
	(not (intervals-disjoint (event-start ?e1) (event-end ?e1) (event-start ?e2) (event-end ?e2)))) 
	
(<= (intervals-disjoint ?s1 ?e1 ?s2 ?e2)
	(date-lte ?e1 ?s2))
(<= (intervals-disjoint ?s1 ?e1 ?s2 ?e2)
	(date-lte ?e2 ?s1))

; should be able to optimize using these constraints.
;  might even be able to generate the first constraint from constraints on the base tables.
(=> (overlap ?e1 ?e2) (overlap ?e2 ?e1))
(=> (event ?e) (date-lte (event-start ?e) (event-end ?e)))

; should be able to replace the use of overlap above with overlapA (to avoid symmetries)
(<= (overlapA ?e1 ?e2)
	(event-lt ?e1 ?e2)
	(not (date-lte (event-end ?e1) (event-start ?e2))))

